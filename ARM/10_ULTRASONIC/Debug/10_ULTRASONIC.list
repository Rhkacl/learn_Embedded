
10_ULTRASONIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041b8  080041b8  000051b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c0  080041c0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c0  080041c0  000051c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041c4  080041c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080041c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08004230  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004230  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db72  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223e  00000000  00000000  00013c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00015e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  00016b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017814  00000000  00000000  0001751f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c3  00000000  00000000  0002ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fedf  00000000  00000000  0003d3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000cd318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d0f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004144 	.word	0x08004144

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004144 	.word	0x08004144

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  // 호출하면 0부터 시작
  __HAL_TIM_SET_COUNTER(&htim11, 0);    // __ 이거 붙은 애들은 함수가 아닌 매크로
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_GPIO_Init+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <MX_GPIO_Init+0x7c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000634:	f000 ff42 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000638:	2320      	movs	r3, #32
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000650:	f000 fdb0 	bl	80011b4 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b0a      	cmp	r3, #10
 8000670:	d106      	bne.n	8000680 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000676:	2201      	movs	r2, #1
 8000678:	4907      	ldr	r1, [pc, #28]	@ (8000698 <__io_putchar+0x34>)
 800067a:	4808      	ldr	r0, [pc, #32]	@ (800069c <__io_putchar+0x38>)
 800067c:	f002 fa78 	bl	8002b70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000686:	2201      	movs	r2, #1
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <__io_putchar+0x38>)
 800068a:	f002 fa71 	bl	8002b70 <HAL_UART_Transmit>
}
 800068e:	bf00      	nop
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0800415c 	.word	0x0800415c
 800069c:	20000120 	.word	0x20000120

080006a0 <HCSR04_TRIG>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HCSR04_TRIG(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2120      	movs	r1, #32
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <HCSR04_TRIG+0x34>)
 80006aa:	f000 ff07 	bl	80014bc <HAL_GPIO_WritePin>
  delay_us(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f7ff ff7c 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2120      	movs	r1, #32
 80006b8:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <HCSR04_TRIG+0x34>)
 80006ba:	f000 feff 	bl	80014bc <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HCSR04_TRIG+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <HCSR04_TRIG+0x38>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f042 0202 	orr.w	r2, r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000
 80006d8:	20000090 	.word	0x20000090

080006dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7f1b      	ldrb	r3, [r3, #28]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d171      	bne.n	80007d0 <HAL_TIM_IC_CaptureCallback+0xf4>
  {
    if(captureFlag == 0)  // 아직 캡처를 안했다면
 80006ec:	4b3a      	ldr	r3, [pc, #232]	@ (80007d8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d11b      	bne.n	800072c <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80006f4:	2100      	movs	r1, #0
 80006f6:	4839      	ldr	r0, [pc, #228]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x100>)
 80006f8:	f001 ff32 	bl	8002560 <HAL_TIM_ReadCapturedValue>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b37      	ldr	r3, [pc, #220]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000702:	801a      	strh	r2, [r3, #0]
      captureFlag = 1;    // 캡처 했음
 8000704:	4b34      	ldr	r3, [pc, #208]	@ (80007d8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 rising 에서 falling 으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6a1a      	ldr	r2, [r3, #32]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f022 020a 	bic.w	r2, r2, #10
 8000718:	621a      	str	r2, [r3, #32]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6a1a      	ldr	r2, [r3, #32]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0202 	orr.w	r2, r2, #2
 8000728:	621a      	str	r2, [r3, #32]
      captureFlag = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
    }
  }
}
 800072a:	e051      	b.n	80007d0 <HAL_TIM_IC_CaptureCallback+0xf4>
    else if(captureFlag == 1)   // 캡처를 했다면
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d14d      	bne.n	80007d0 <HAL_TIM_IC_CaptureCallback+0xf4>
      IC_Value2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	4829      	ldr	r0, [pc, #164]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x100>)
 8000738:	f001 ff12 	bl	8002560 <HAL_TIM_ReadCapturedValue>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000742:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x100>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24
      if(IC_Value2 > IC_Value1)
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d908      	bls.n	800076a <HAL_TIM_IC_CaptureCallback+0x8e>
        echoTime = IC_Value2 - IC_Value1;
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	e00f      	b.n	800078a <HAL_TIM_IC_CaptureCallback+0xae>
      else if(IC_Value1 > IC_Value2)
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800076c:	881a      	ldrh	r2, [r3, #0]
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d909      	bls.n	800078a <HAL_TIM_IC_CaptureCallback+0xae>
        echoTime = (0xffff - IC_Value1) + IC_Value2;
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	b29b      	uxth	r3, r3
 8000782:	3b01      	subs	r3, #1
 8000784:	b29a      	uxth	r2, r3
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000788:	801a      	strh	r2, [r3, #0]
      distance = echoTime / 58;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x110>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	095b      	lsrs	r3, r3, #5
 8000796:	b29b      	uxth	r3, r3
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_TIM_IC_CaptureCallback+0x114>)
 800079c:	701a      	strb	r2, [r3, #0]
      captureFlag = 0;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6a1a      	ldr	r2, [r3, #32]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f022 020a 	bic.w	r2, r2, #10
 80007b2:	621a      	str	r2, [r3, #32]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6a12      	ldr	r2, [r2, #32]
 80007be:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x100>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x100>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f022 0202 	bic.w	r2, r2, #2
 80007ce:	60da      	str	r2, [r3, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000008a 	.word	0x2000008a
 80007dc:	20000090 	.word	0x20000090
 80007e0:	20000084 	.word	0x20000084
 80007e4:	20000086 	.word	0x20000086
 80007e8:	20000088 	.word	0x20000088
 80007ec:	8d3dcb09 	.word	0x8d3dcb09
 80007f0:	2000008b 	.word	0x2000008b

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fb34 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f826 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff feee 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000804:	f000 f9a8 	bl	8000b58 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000808:	f000 f9fa 	bl	8000c00 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 800080c:	f000 fa8e 	bl	8000d2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim11);    // us timer
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <main+0x48>)
 8000812:	f001 fb55 	bl	8001ec0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for ultrasonic timer
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <main+0x4c>)
 800081a:	f001 fbfb 	bl	8002014 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HCSR04_TRIG();
 800081e:	f7ff ff3f 	bl	80006a0 <HCSR04_TRIG>
    printf(" %d cm\r\n", distance);
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <main+0x50>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <main+0x54>)
 800082a:	f002 fe1f 	bl	800346c <iprintf>
    HAL_Delay(500);
 800082e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000832:	f000 fb89 	bl	8000f48 <HAL_Delay>
    HCSR04_TRIG();
 8000836:	bf00      	nop
 8000838:	e7f1      	b.n	800081e <main+0x2a>
 800083a:	bf00      	nop
 800083c:	200000d8 	.word	0x200000d8
 8000840:	20000090 	.word	0x20000090
 8000844:	2000008b 	.word	0x2000008b
 8000848:	08004160 	.word	0x08004160

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	@ 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fe5b 	bl	8003516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a26      	ldr	r2, [pc, #152]	@ (8000914 <SystemClock_Config+0xc8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <SystemClock_Config+0xcc>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008bc:	2308      	movs	r3, #8
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fe0d 	bl	80014f0 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 f81e 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2103      	movs	r1, #3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f86f 	bl	80019e0 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000908:	f000 f808 	bl	800091c <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	@ 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 fa9b 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <TIM3_IRQHandler+0x10>)
 80009de:	f001 fc33 	bl	8002248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000090 	.word	0x20000090

080009ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	4601      	mov	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
  }

  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe0f 	bl	8000664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
  }
  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f002 fd5c 	bl	80035b4 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20020000 	.word	0x20020000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	2000008c 	.word	0x2000008c
 8000b30:	200002b8 	.word	0x200002b8

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <MX_TIM3_Init+0xa4>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100 - 1;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b7c:	2263      	movs	r2, #99	@ 0x63
 8000b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b9a:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000b9c:	f001 f9ea 	bl	8001f74 <HAL_TIM_IC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f7ff feb9 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480f      	ldr	r0, [pc, #60]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000bba:	f001 ff07 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bc4:	f7ff feaa 	bl	800091c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_TIM3_Init+0xa0>)
 8000be0:	f001 fc22 	bl	8002428 <HAL_TIM_IC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bea:	f7ff fe97 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000090 	.word	0x20000090
 8000bfc:	40000400 	.word	0x40000400

08000c00 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c06:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <MX_TIM11_Init+0x44>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100 - 1;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c0c:	2263      	movs	r2, #99	@ 0x63
 8000c0e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c1c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_TIM11_Init+0x40>)
 8000c2c:	f001 f8f8 	bl	8001e20 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c36:	f7ff fe71 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d8 	.word	0x200000d8
 8000c44:	40014800 	.word	0x40014800

08000c48 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	@ (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d133      	bne.n	8000cd2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca2:	2340      	movs	r3, #64	@ 0x40
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <HAL_TIM_IC_MspInit+0x9c>)
 8000cbe:	f000 fa79 	bl	80011b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	201d      	movs	r0, #29
 8000cc8:	f000 fa3d 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ccc:	201d      	movs	r0, #29
 8000cce:	f000 fa56 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40000400 	.word	0x40000400
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10d      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40014800 	.word	0x40014800
 8000d28:	40023800 	.word	0x40023800

08000d2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART2_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f001 feb4 	bl	8002ad0 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f7ff fdd5 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000120 	.word	0x20000120
 8000d7c:	40004400 	.word	0x40004400

08000d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dea:	2307      	movs	r3, #7
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df6:	f000 f9dd 	bl	80011b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e14:	f7ff fe8e 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f002 fbbf 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fcd7 	bl	80007f4 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e54:	080041c8 	.word	0x080041c8
  ldr r2, =_sbss
 8000e58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e5c:	200002b8 	.word	0x200002b8

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f94f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fd46 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f967 	bl	800119a <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee4:	f000 f92f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000168 	.word	0x20000168

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000168 	.word	0x20000168

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e159      	b.n	8001484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8148 	bne.w	800147e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a2 	beq.w	800147e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b57      	ldr	r3, [pc, #348]	@ (800149c <HAL_GPIO_Init+0x2e8>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	4a56      	ldr	r2, [pc, #344]	@ (800149c <HAL_GPIO_Init+0x2e8>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44
 800134a:	4b54      	ldr	r3, [pc, #336]	@ (800149c <HAL_GPIO_Init+0x2e8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_GPIO_Init+0x2ec>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a49      	ldr	r2, [pc, #292]	@ (80014a4 <HAL_GPIO_Init+0x2f0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x202>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a48      	ldr	r2, [pc, #288]	@ (80014a8 <HAL_GPIO_Init+0x2f4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x1fe>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a47      	ldr	r2, [pc, #284]	@ (80014ac <HAL_GPIO_Init+0x2f8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x1fa>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a46      	ldr	r2, [pc, #280]	@ (80014b0 <HAL_GPIO_Init+0x2fc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x1f6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a45      	ldr	r2, [pc, #276]	@ (80014b4 <HAL_GPIO_Init+0x300>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x1f2>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	@ (80014a0 <HAL_GPIO_Init+0x2ec>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a2f      	ldr	r2, [pc, #188]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144e:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f aea2 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e267      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d075      	beq.n	80015fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800150e:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b04      	cmp	r3, #4
 8001518:	d00c      	beq.n	8001534 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151a:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001522:	2b08      	cmp	r3, #8
 8001524:	d112      	bne.n	800154c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001532:	d10b      	bne.n	800154c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	4b7e      	ldr	r3, [pc, #504]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d05b      	beq.n	80015f8 <HAL_RCC_OscConfig+0x108>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d157      	bne.n	80015f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e242      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x74>
 8001556:	4b76      	ldr	r3, [pc, #472]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a75      	ldr	r2, [pc, #468]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e01d      	b.n	80015a0 <HAL_RCC_OscConfig+0xb0>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6f      	ldr	r2, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b6d      	ldr	r3, [pc, #436]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6c      	ldr	r2, [pc, #432]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xb0>
 8001588:	4b69      	ldr	r3, [pc, #420]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a68      	ldr	r2, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800158e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a65      	ldr	r2, [pc, #404]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fcc2 	bl	8000f30 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fcbe 	bl	8000f30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e207      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0xc0>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fcae 	bl	8000f30 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fcaa 	bl	8000f30 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1f3      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	4b51      	ldr	r3, [pc, #324]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0xe8>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d063      	beq.n	80016ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001606:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001612:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800161a:	2b08      	cmp	r3, #8
 800161c:	d11c      	bne.n	8001658 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161e:	4b44      	ldr	r3, [pc, #272]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x152>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e1c7      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4937      	ldr	r1, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	e03a      	b.n	80016ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001660:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <HAL_RCC_OscConfig+0x244>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff fc63 	bl	8000f30 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fc5f 	bl	8000f30 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1a8      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4925      	ldr	r1, [pc, #148]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_OscConfig+0x244>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc42 	bl	8000f30 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fc3e 	bl	8000f30 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e187      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d036      	beq.n	8001748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d016      	beq.n	8001710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_RCC_OscConfig+0x248>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fc22 	bl	8000f30 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fc1e 	bl	8000f30 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e167      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_OscConfig+0x240>)
 8001704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x200>
 800170e:	e01b      	b.n	8001748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_OscConfig+0x248>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fc0b 	bl	8000f30 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	e00e      	b.n	800173c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fc07 	bl	8000f30 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d907      	bls.n	800173c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e150      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
 8001730:	40023800 	.word	0x40023800
 8001734:	42470000 	.word	0x42470000
 8001738:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ea      	bne.n	800171e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8097 	beq.w	8001884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175a:	4b81      	ldr	r3, [pc, #516]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10f      	bne.n	8001786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b7d      	ldr	r3, [pc, #500]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a7c      	ldr	r2, [pc, #496]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b7a      	ldr	r3, [pc, #488]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b77      	ldr	r3, [pc, #476]	@ (8001964 <HAL_RCC_OscConfig+0x474>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b74      	ldr	r3, [pc, #464]	@ (8001964 <HAL_RCC_OscConfig+0x474>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a73      	ldr	r2, [pc, #460]	@ (8001964 <HAL_RCC_OscConfig+0x474>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff fbc7 	bl	8000f30 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff fbc3 	bl	8000f30 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e10c      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001964 <HAL_RCC_OscConfig+0x474>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x2ea>
 80017cc:	4b64      	ldr	r3, [pc, #400]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a63      	ldr	r2, [pc, #396]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x324>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x30c>
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x324>
 80017fc:	4b58      	ldr	r3, [pc, #352]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	4a57      	ldr	r2, [pc, #348]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	@ 0x70
 8001808:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180c:	4a54      	ldr	r2, [pc, #336]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d015      	beq.n	8001848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff fb88 	bl	8000f30 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff fb84 	bl	8000f30 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0cb      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ee      	beq.n	8001824 <HAL_RCC_OscConfig+0x334>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fb72 	bl	8000f30 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fb6e 	bl	8000f30 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0b5      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ee      	bne.n	8001850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	4a38      	ldr	r2, [pc, #224]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a1 	beq.w	80019d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	d05c      	beq.n	8001954 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d141      	bne.n	8001926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <HAL_RCC_OscConfig+0x478>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb42 	bl	8000f30 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fb3e 	bl	8000f30 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e087      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	491b      	ldr	r1, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x478>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb17 	bl	8000f30 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff fb13 	bl	8000f30 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e05c      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x416>
 8001924:	e054      	b.n	80019d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_OscConfig+0x478>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fb00 	bl	8000f30 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fafc 	bl	8000f30 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e045      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_OscConfig+0x470>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x444>
 8001952:	e03d      	b.n	80019d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e038      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000
 8001968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_RCC_OscConfig+0x4ec>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d028      	beq.n	80019cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d121      	bne.n	80019cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11a      	bne.n	80019cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d111      	bne.n	80019cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0cc      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d90c      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b65      	ldr	r3, [pc, #404]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a58      	ldr	r2, [pc, #352]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	494d      	ldr	r1, [pc, #308]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d044      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d119      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e067      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4934      	ldr	r1, [pc, #208]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff fa2e 	bl	8000f30 <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff fa2a 	bl	8000f30 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d20c      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4916      	ldr	r1, [pc, #88]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	490e      	ldr	r1, [pc, #56]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f98e 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	0800416c 	.word	0x0800416c
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb0:	b094      	sub	sp, #80	@ 0x50
 8001bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc4:	4b79      	ldr	r3, [pc, #484]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d00d      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x40>
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	f200 80e1 	bhi.w	8001d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bde:	e0db      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b73      	ldr	r3, [pc, #460]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be4:	e0db      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4b73      	ldr	r3, [pc, #460]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bea:	e0d8      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bec:	4b6f      	ldr	r3, [pc, #444]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b6a      	ldr	r3, [pc, #424]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c1e:	4622      	mov	r2, r4
 8001c20:	462b      	mov	r3, r5
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	0159      	lsls	r1, r3, #5
 8001c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c30:	0150      	lsls	r0, r2, #5
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4621      	mov	r1, r4
 8001c38:	1a51      	subs	r1, r2, r1
 8001c3a:	6139      	str	r1, [r7, #16]
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c50:	4659      	mov	r1, fp
 8001c52:	018b      	lsls	r3, r1, #6
 8001c54:	4651      	mov	r1, sl
 8001c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	018a      	lsls	r2, r1, #6
 8001c5e:	4651      	mov	r1, sl
 8001c60:	ebb2 0801 	subs.w	r8, r2, r1
 8001c64:	4659      	mov	r1, fp
 8001c66:	eb63 0901 	sbc.w	r9, r3, r1
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7e:	4690      	mov	r8, r2
 8001c80:	4699      	mov	r9, r3
 8001c82:	4623      	mov	r3, r4
 8001c84:	eb18 0303 	adds.w	r3, r8, r3
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	eb49 0303 	adc.w	r3, r9, r3
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	024b      	lsls	r3, r1, #9
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca8:	4621      	mov	r1, r4
 8001caa:	024a      	lsls	r2, r1, #9
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cbc:	f7fe fae0 	bl	8000280 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc8:	e058      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce4:	4642      	mov	r2, r8
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0159      	lsls	r1, r3, #5
 8001cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf6:	0150      	lsls	r0, r2, #5
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d02:	4649      	mov	r1, r9
 8001d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d20:	eb63 050b 	sbc.w	r5, r3, fp
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	00eb      	lsls	r3, r5, #3
 8001d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d32:	00e2      	lsls	r2, r4, #3
 8001d34:	4614      	mov	r4, r2
 8001d36:	461d      	mov	r5, r3
 8001d38:	4643      	mov	r3, r8
 8001d3a:	18e3      	adds	r3, r4, r3
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	464b      	mov	r3, r9
 8001d40:	eb45 0303 	adc.w	r3, r5, r3
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d52:	4629      	mov	r1, r5
 8001d54:	028b      	lsls	r3, r1, #10
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	028a      	lsls	r2, r1, #10
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d66:	2200      	movs	r2, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	61fa      	str	r2, [r7, #28]
 8001d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d70:	f7fe fa86 	bl	8000280 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3750      	adds	r7, #80	@ 0x50
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	0800417c 	.word	0x0800417c

08001df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dfc:	f7ff ffdc 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0b5b      	lsrs	r3, r3, #13
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	@ (8001e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	0800417c 	.word	0x0800417c

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e041      	b.n	8001eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe ff4e 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 fbea 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d001      	beq.n	8001ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e03c      	b.n	8001f52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f60 <HAL_TIM_Base_Start+0xa0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d018      	beq.n	8001f1c <HAL_TIM_Base_Start+0x5c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef2:	d013      	beq.n	8001f1c <HAL_TIM_Base_Start+0x5c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_TIM_Base_Start+0xa4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00e      	beq.n	8001f1c <HAL_TIM_Base_Start+0x5c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_TIM_Base_Start+0xa8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_TIM_Base_Start+0x5c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <HAL_TIM_Base_Start+0xac>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_TIM_Base_Start+0x5c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a16      	ldr	r2, [pc, #88]	@ (8001f70 <HAL_TIM_Base_Start+0xb0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d111      	bne.n	8001f40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d010      	beq.n	8001f50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	e007      	b.n	8001f50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40014000 	.word	0x40014000

08001f74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fe54 	bl	8000c48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fb40 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_TIM_IC_Start_IT+0x1e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e013      	b.n	800205a <HAL_TIM_IC_Start_IT+0x46>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d104      	bne.n	8002042 <HAL_TIM_IC_Start_IT+0x2e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e00b      	b.n	800205a <HAL_TIM_IC_Start_IT+0x46>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d104      	bne.n	8002052 <HAL_TIM_IC_Start_IT+0x3e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e003      	b.n	800205a <HAL_TIM_IC_Start_IT+0x46>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_TIM_IC_Start_IT+0x58>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e013      	b.n	8002094 <HAL_TIM_IC_Start_IT+0x80>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d104      	bne.n	800207c <HAL_TIM_IC_Start_IT+0x68>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e00b      	b.n	8002094 <HAL_TIM_IC_Start_IT+0x80>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d104      	bne.n	800208c <HAL_TIM_IC_Start_IT+0x78>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e003      	b.n	8002094 <HAL_TIM_IC_Start_IT+0x80>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002092:	b2db      	uxtb	r3, r3
 8002094:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0c2      	b.n	800222c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_IC_Start_IT+0xa2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b4:	e013      	b.n	80020de <HAL_TIM_IC_Start_IT+0xca>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_IC_Start_IT+0xb2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c4:	e00b      	b.n	80020de <HAL_TIM_IC_Start_IT+0xca>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_IC_Start_IT+0xc2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d4:	e003      	b.n	80020de <HAL_TIM_IC_Start_IT+0xca>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_IC_Start_IT+0xda>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020ec:	e013      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x102>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d104      	bne.n	80020fe <HAL_TIM_IC_Start_IT+0xea>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020fc:	e00b      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x102>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d104      	bne.n	800210e <HAL_TIM_IC_Start_IT+0xfa>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800210c:	e003      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x102>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d841      	bhi.n	80021a0 <HAL_TIM_IC_Start_IT+0x18c>
 800211c:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <HAL_TIM_IC_Start_IT+0x110>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002159 	.word	0x08002159
 8002128:	080021a1 	.word	0x080021a1
 800212c:	080021a1 	.word	0x080021a1
 8002130:	080021a1 	.word	0x080021a1
 8002134:	0800216b 	.word	0x0800216b
 8002138:	080021a1 	.word	0x080021a1
 800213c:	080021a1 	.word	0x080021a1
 8002140:	080021a1 	.word	0x080021a1
 8002144:	0800217d 	.word	0x0800217d
 8002148:	080021a1 	.word	0x080021a1
 800214c:	080021a1 	.word	0x080021a1
 8002150:	080021a1 	.word	0x080021a1
 8002154:	0800218f 	.word	0x0800218f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0202 	orr.w	r2, r2, #2
 8002166:	60da      	str	r2, [r3, #12]
      break;
 8002168:	e01d      	b.n	80021a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0204 	orr.w	r2, r2, #4
 8002178:	60da      	str	r2, [r3, #12]
      break;
 800217a:	e014      	b.n	80021a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	60da      	str	r2, [r3, #12]
      break;
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0210 	orr.w	r2, r2, #16
 800219c:	60da      	str	r2, [r3, #12]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      break;
 80021a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13e      	bne.n	800222a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fbe3 	bl	8002980 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_TIM_IC_Start_IT+0x220>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d018      	beq.n	80021f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021cc:	d013      	beq.n	80021f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <HAL_TIM_IC_Start_IT+0x224>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00e      	beq.n	80021f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_TIM_IC_Start_IT+0x228>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a16      	ldr	r2, [pc, #88]	@ (8002240 <HAL_TIM_IC_Start_IT+0x22c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <HAL_TIM_IC_Start_IT+0x230>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d010      	beq.n	800222a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e007      	b.n	800222a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40010000 	.word	0x40010000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40014000 	.word	0x40014000

08002248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0202 	mvn.w	r2, #2
 800227c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fa22 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f9ae 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9b5 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d020      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0204 	mvn.w	r2, #4
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe f9fc 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f988 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f98f 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d020      	beq.n	8002344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0208 	mvn.w	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe f9d6 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f962 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f969 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d020      	beq.n	8002390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0210 	mvn.w	r2, #16
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2208      	movs	r2, #8
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe f9b0 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f93c 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f943 	bl	8002610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0201 	mvn.w	r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f91a 	bl	80025e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fb72 	bl	8002abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00c      	beq.n	80023fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f914 	bl	8002624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fb44 	bl	8002aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e088      	b.n	8002558 <HAL_TIM_IC_ConfigChannel+0x130>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11b      	bne.n	800248c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002464:	f000 f96e 	bl	8002744 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 020c 	bic.w	r2, r2, #12
 8002476:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6999      	ldr	r1, [r3, #24]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	e060      	b.n	800254e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d11c      	bne.n	80024cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80024a2:	f000 f9b7 	bl	8002814 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80024b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6999      	ldr	r1, [r3, #24]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	619a      	str	r2, [r3, #24]
 80024ca:	e040      	b.n	800254e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11b      	bne.n	800250a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80024e2:	f000 f9d4 	bl	800288e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 020c 	bic.w	r2, r2, #12
 80024f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69d9      	ldr	r1, [r3, #28]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	61da      	str	r2, [r3, #28]
 8002508:	e021      	b.n	800254e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d11c      	bne.n	800254a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002520:	f000 f9f1 	bl	8002906 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002532:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69d9      	ldr	r1, [r3, #28]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	61da      	str	r2, [r3, #28]
 8002548:	e001      	b.n	800254e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d831      	bhi.n	80025d8 <HAL_TIM_ReadCapturedValue+0x78>
 8002574:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080025d9 	.word	0x080025d9
 8002584:	080025d9 	.word	0x080025d9
 8002588:	080025d9 	.word	0x080025d9
 800258c:	080025bb 	.word	0x080025bb
 8002590:	080025d9 	.word	0x080025d9
 8002594:	080025d9 	.word	0x080025d9
 8002598:	080025d9 	.word	0x080025d9
 800259c:	080025c5 	.word	0x080025c5
 80025a0:	080025d9 	.word	0x080025d9
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080025cf 	.word	0x080025cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	60fb      	str	r3, [r7, #12]

      break;
 80025b8:	e00f      	b.n	80025da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	60fb      	str	r3, [r7, #12]

      break;
 80025c2:	e00a      	b.n	80025da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	60fb      	str	r3, [r7, #12]

      break;
 80025cc:	e005      	b.n	80025da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	60fb      	str	r3, [r7, #12]

      break;
 80025d6:	e000      	b.n	80025da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80025d8:	bf00      	nop
  }

  return tmpreg;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a37      	ldr	r2, [pc, #220]	@ (8002728 <TIM_Base_SetConfig+0xf0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00f      	beq.n	8002670 <TIM_Base_SetConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002656:	d00b      	beq.n	8002670 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a34      	ldr	r2, [pc, #208]	@ (800272c <TIM_Base_SetConfig+0xf4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a33      	ldr	r2, [pc, #204]	@ (8002730 <TIM_Base_SetConfig+0xf8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_Base_SetConfig+0x38>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a32      	ldr	r2, [pc, #200]	@ (8002734 <TIM_Base_SetConfig+0xfc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <TIM_Base_SetConfig+0xf0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01b      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002690:	d017      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a25      	ldr	r2, [pc, #148]	@ (800272c <TIM_Base_SetConfig+0xf4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <TIM_Base_SetConfig+0xf8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00f      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <TIM_Base_SetConfig+0xfc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <TIM_Base_SetConfig+0x100>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a21      	ldr	r2, [pc, #132]	@ (800273c <TIM_Base_SetConfig+0x104>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0x8a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a20      	ldr	r2, [pc, #128]	@ (8002740 <TIM_Base_SetConfig+0x108>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <TIM_Base_SetConfig+0xf0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d103      	bne.n	8002702 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	601a      	str	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800

08002744 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 0201 	bic.w	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a24      	ldr	r2, [pc, #144]	@ (8002800 <TIM_TI1_SetConfig+0xbc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <TIM_TI1_SetConfig+0x56>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002778:	d00f      	beq.n	800279a <TIM_TI1_SetConfig+0x56>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <TIM_TI1_SetConfig+0xc0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00b      	beq.n	800279a <TIM_TI1_SetConfig+0x56>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <TIM_TI1_SetConfig+0xc4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_TI1_SetConfig+0x56>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <TIM_TI1_SetConfig+0xc8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_TI1_SetConfig+0x56>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a1e      	ldr	r2, [pc, #120]	@ (8002810 <TIM_TI1_SetConfig+0xcc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <TIM_TI1_SetConfig+0x5a>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <TIM_TI1_SetConfig+0x5c>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e003      	b.n	80027be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f023 030a 	bic.w	r3, r3, #10
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 030a 	and.w	r3, r3, #10
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40014000 	.word	0x40014000

08002814 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f023 0210 	bic.w	r2, r3, #16
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	b29b      	uxth	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002866:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80028de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002932:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002944:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	031b      	lsls	r3, r3, #12
 800294a:	b29b      	uxth	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	031b      	lsls	r3, r3, #12
 800295e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2201      	movs	r2, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e050      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a30:	d013      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40014000 	.word	0x40014000

08002aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e042      	b.n	8002b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe f942 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f973 	bl	8002e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d175      	bne.n	8002c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Transmit+0x2c>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06e      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	@ 0x21
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bae:	f7fe f9bf 	bl	8000f30 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d108      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e003      	b.n	8002be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002be4:	e02e      	b.n	8002c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f848 	bl	8002c86 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e03a      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e007      	b.n	8002c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1cb      	bne.n	8002be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2140      	movs	r1, #64	@ 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f814 	bl	8002c86 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c96:	e03b      	b.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c9e:	d037      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fe f946 	bl	8000f30 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	6a3a      	ldr	r2, [r7, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e03a      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b80      	cmp	r3, #128	@ 0x80
 8002ccc:	d020      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	d01d      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d116      	bne.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f81d 	bl	8002d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2208      	movs	r2, #8
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e00f      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d0b4      	beq.n	8002c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b095      	sub	sp, #84	@ 0x54
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d60:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e5      	bne.n	8002d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d119      	bne.n	8002de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f023 0310 	bic.w	r3, r3, #16
 8002dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dd0:	61ba      	str	r2, [r7, #24]
 8002dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6979      	ldr	r1, [r7, #20]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002df2:	bf00      	nop
 8002df4:	3754      	adds	r7, #84	@ 0x54
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b0c0      	sub	sp, #256	@ 0x100
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	68d9      	ldr	r1, [r3, #12]
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	ea40 0301 	orr.w	r3, r0, r1
 8002e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e58:	f021 010c 	bic.w	r1, r1, #12
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e66:	430b      	orrs	r3, r1
 8002e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7a:	6999      	ldr	r1, [r3, #24]
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	ea40 0301 	orr.w	r3, r0, r1
 8002e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80030cc <UART_SetConfig+0x2cc>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d005      	beq.n	8002ea0 <UART_SetConfig+0xa0>
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80030d0 <UART_SetConfig+0x2d0>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d104      	bne.n	8002eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f7fe ffaa 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ea8:	e003      	b.n	8002eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eaa:	f7fe ff91 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ebc:	f040 810c 	bne.w	80030d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	1891      	adds	r1, r2, r2
 8002ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eda:	415b      	adcs	r3, r3
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	eb12 0801 	adds.w	r8, r2, r1
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb43 0901 	adc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f10:	462b      	mov	r3, r5
 8002f12:	eb49 0303 	adc.w	r3, r9, r3
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f2e:	460b      	mov	r3, r1
 8002f30:	18db      	adds	r3, r3, r3
 8002f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f34:	4613      	mov	r3, r2
 8002f36:	eb42 0303 	adc.w	r3, r2, r3
 8002f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f44:	f7fd f99c 	bl	8000280 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b61      	ldr	r3, [pc, #388]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011c      	lsls	r4, r3, #4
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f70:	415b      	adcs	r3, r3
 8002f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f78:	4641      	mov	r1, r8
 8002f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb43 0b01 	adc.w	fp, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f98:	4692      	mov	sl, r2
 8002f9a:	469b      	mov	fp, r3
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8002fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fca:	4613      	mov	r3, r2
 8002fcc:	eb42 0303 	adc.w	r3, r2, r3
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fda:	f7fd f951 	bl	8000280 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2264      	movs	r2, #100	@ 0x64
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	1acb      	subs	r3, r1, r3
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ffa:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <UART_SetConfig+0x2d4>)
 8002ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003008:	441c      	add	r4, r3
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003024:	415b      	adcs	r3, r3
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800302c:	4641      	mov	r1, r8
 800302e:	1851      	adds	r1, r2, r1
 8003030:	6339      	str	r1, [r7, #48]	@ 0x30
 8003032:	4649      	mov	r1, r9
 8003034:	414b      	adcs	r3, r1
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003044:	4659      	mov	r1, fp
 8003046:	00cb      	lsls	r3, r1, #3
 8003048:	4651      	mov	r1, sl
 800304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304e:	4651      	mov	r1, sl
 8003050:	00ca      	lsls	r2, r1, #3
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	4603      	mov	r3, r0
 8003058:	4642      	mov	r2, r8
 800305a:	189b      	adds	r3, r3, r2
 800305c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003060:	464b      	mov	r3, r9
 8003062:	460a      	mov	r2, r1
 8003064:	eb42 0303 	adc.w	r3, r2, r3
 8003068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800307c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003080:	460b      	mov	r3, r1
 8003082:	18db      	adds	r3, r3, r3
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003086:	4613      	mov	r3, r2
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003096:	f7fd f8f3 	bl	8000280 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <UART_SetConfig+0x2d4>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	@ 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	@ 0x32
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <UART_SetConfig+0x2d4>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 0207 	and.w	r2, r3, #7
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4422      	add	r2, r4
 80030c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c8:	e106      	b.n	80032d8 <UART_SetConfig+0x4d8>
 80030ca:	bf00      	nop
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030ea:	4642      	mov	r2, r8
 80030ec:	464b      	mov	r3, r9
 80030ee:	1891      	adds	r1, r2, r2
 80030f0:	6239      	str	r1, [r7, #32]
 80030f2:	415b      	adcs	r3, r3
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030fa:	4641      	mov	r1, r8
 80030fc:	1854      	adds	r4, r2, r1
 80030fe:	4649      	mov	r1, r9
 8003100:	eb43 0501 	adc.w	r5, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	00eb      	lsls	r3, r5, #3
 800310e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003112:	00e2      	lsls	r2, r4, #3
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	4643      	mov	r3, r8
 800311a:	18e3      	adds	r3, r4, r3
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003120:	464b      	mov	r3, r9
 8003122:	eb45 0303 	adc.w	r3, r5, r3
 8003126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003146:	4629      	mov	r1, r5
 8003148:	008b      	lsls	r3, r1, #2
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003150:	4621      	mov	r1, r4
 8003152:	008a      	lsls	r2, r1, #2
 8003154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003158:	f7fd f892 	bl	8000280 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4b60      	ldr	r3, [pc, #384]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011c      	lsls	r4, r3, #4
 800316a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	61b9      	str	r1, [r7, #24]
 8003184:	415b      	adcs	r3, r3
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318c:	4641      	mov	r1, r8
 800318e:	1851      	adds	r1, r2, r1
 8003190:	6139      	str	r1, [r7, #16]
 8003192:	4649      	mov	r1, r9
 8003194:	414b      	adcs	r3, r1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a4:	4659      	mov	r1, fp
 80031a6:	00cb      	lsls	r3, r1, #3
 80031a8:	4651      	mov	r1, sl
 80031aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ae:	4651      	mov	r1, sl
 80031b0:	00ca      	lsls	r2, r1, #3
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	4642      	mov	r2, r8
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031c0:	464b      	mov	r3, r9
 80031c2:	460a      	mov	r2, r1
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031e4:	4649      	mov	r1, r9
 80031e6:	008b      	lsls	r3, r1, #2
 80031e8:	4641      	mov	r1, r8
 80031ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ee:	4641      	mov	r1, r8
 80031f0:	008a      	lsls	r2, r1, #2
 80031f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031f6:	f7fd f843 	bl	8000280 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003202:	fba3 2301 	umull	r2, r3, r3, r1
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	@ 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1acb      	subs	r3, r1, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	3332      	adds	r3, #50	@ 0x32
 8003214:	4a33      	ldr	r2, [pc, #204]	@ (80032e4 <UART_SetConfig+0x4e4>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003220:	441c      	add	r4, r3
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	673b      	str	r3, [r7, #112]	@ 0x70
 800322a:	677a      	str	r2, [r7, #116]	@ 0x74
 800322c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	415b      	adcs	r3, r3
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003272:	464b      	mov	r3, r9
 8003274:	460a      	mov	r2, r1
 8003276:	eb42 0303 	adc.w	r3, r2, r3
 800327a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	663b      	str	r3, [r7, #96]	@ 0x60
 8003286:	667a      	str	r2, [r7, #100]	@ 0x64
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032a6:	f7fc ffeb 	bl	8000280 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <UART_SetConfig+0x4e4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	@ 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	@ 0x32
 80032c2:	4a08      	ldr	r2, [pc, #32]	@ (80032e4 <UART_SetConfig+0x4e4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4422      	add	r2, r4
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032de:	46bd      	mov	sp, r7
 80032e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e4:	51eb851f 	.word	0x51eb851f

080032e8 <std>:
 80032e8:	2300      	movs	r3, #0
 80032ea:	b510      	push	{r4, lr}
 80032ec:	4604      	mov	r4, r0
 80032ee:	e9c0 3300 	strd	r3, r3, [r0]
 80032f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032f6:	6083      	str	r3, [r0, #8]
 80032f8:	8181      	strh	r1, [r0, #12]
 80032fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80032fc:	81c2      	strh	r2, [r0, #14]
 80032fe:	6183      	str	r3, [r0, #24]
 8003300:	4619      	mov	r1, r3
 8003302:	2208      	movs	r2, #8
 8003304:	305c      	adds	r0, #92	@ 0x5c
 8003306:	f000 f906 	bl	8003516 <memset>
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <std+0x58>)
 800330c:	6263      	str	r3, [r4, #36]	@ 0x24
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <std+0x5c>)
 8003310:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <std+0x60>)
 8003314:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <std+0x64>)
 8003318:	6323      	str	r3, [r4, #48]	@ 0x30
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <std+0x68>)
 800331c:	6224      	str	r4, [r4, #32]
 800331e:	429c      	cmp	r4, r3
 8003320:	d006      	beq.n	8003330 <std+0x48>
 8003322:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003326:	4294      	cmp	r4, r2
 8003328:	d002      	beq.n	8003330 <std+0x48>
 800332a:	33d0      	adds	r3, #208	@ 0xd0
 800332c:	429c      	cmp	r4, r3
 800332e:	d105      	bne.n	800333c <std+0x54>
 8003330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003338:	f000 b966 	b.w	8003608 <__retarget_lock_init_recursive>
 800333c:	bd10      	pop	{r4, pc}
 800333e:	bf00      	nop
 8003340:	08003491 	.word	0x08003491
 8003344:	080034b3 	.word	0x080034b3
 8003348:	080034eb 	.word	0x080034eb
 800334c:	0800350f 	.word	0x0800350f
 8003350:	2000016c 	.word	0x2000016c

08003354 <stdio_exit_handler>:
 8003354:	4a02      	ldr	r2, [pc, #8]	@ (8003360 <stdio_exit_handler+0xc>)
 8003356:	4903      	ldr	r1, [pc, #12]	@ (8003364 <stdio_exit_handler+0x10>)
 8003358:	4803      	ldr	r0, [pc, #12]	@ (8003368 <stdio_exit_handler+0x14>)
 800335a:	f000 b869 	b.w	8003430 <_fwalk_sglue>
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c
 8003364:	08003ea5 	.word	0x08003ea5
 8003368:	2000001c 	.word	0x2000001c

0800336c <cleanup_stdio>:
 800336c:	6841      	ldr	r1, [r0, #4]
 800336e:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <cleanup_stdio+0x34>)
 8003370:	4299      	cmp	r1, r3
 8003372:	b510      	push	{r4, lr}
 8003374:	4604      	mov	r4, r0
 8003376:	d001      	beq.n	800337c <cleanup_stdio+0x10>
 8003378:	f000 fd94 	bl	8003ea4 <_fflush_r>
 800337c:	68a1      	ldr	r1, [r4, #8]
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <cleanup_stdio+0x38>)
 8003380:	4299      	cmp	r1, r3
 8003382:	d002      	beq.n	800338a <cleanup_stdio+0x1e>
 8003384:	4620      	mov	r0, r4
 8003386:	f000 fd8d 	bl	8003ea4 <_fflush_r>
 800338a:	68e1      	ldr	r1, [r4, #12]
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <cleanup_stdio+0x3c>)
 800338e:	4299      	cmp	r1, r3
 8003390:	d004      	beq.n	800339c <cleanup_stdio+0x30>
 8003392:	4620      	mov	r0, r4
 8003394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003398:	f000 bd84 	b.w	8003ea4 <_fflush_r>
 800339c:	bd10      	pop	{r4, pc}
 800339e:	bf00      	nop
 80033a0:	2000016c 	.word	0x2000016c
 80033a4:	200001d4 	.word	0x200001d4
 80033a8:	2000023c 	.word	0x2000023c

080033ac <global_stdio_init.part.0>:
 80033ac:	b510      	push	{r4, lr}
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <global_stdio_init.part.0+0x30>)
 80033b0:	4c0b      	ldr	r4, [pc, #44]	@ (80033e0 <global_stdio_init.part.0+0x34>)
 80033b2:	4a0c      	ldr	r2, [pc, #48]	@ (80033e4 <global_stdio_init.part.0+0x38>)
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	4620      	mov	r0, r4
 80033b8:	2200      	movs	r2, #0
 80033ba:	2104      	movs	r1, #4
 80033bc:	f7ff ff94 	bl	80032e8 <std>
 80033c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033c4:	2201      	movs	r2, #1
 80033c6:	2109      	movs	r1, #9
 80033c8:	f7ff ff8e 	bl	80032e8 <std>
 80033cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033d0:	2202      	movs	r2, #2
 80033d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d6:	2112      	movs	r1, #18
 80033d8:	f7ff bf86 	b.w	80032e8 <std>
 80033dc:	200002a4 	.word	0x200002a4
 80033e0:	2000016c 	.word	0x2000016c
 80033e4:	08003355 	.word	0x08003355

080033e8 <__sfp_lock_acquire>:
 80033e8:	4801      	ldr	r0, [pc, #4]	@ (80033f0 <__sfp_lock_acquire+0x8>)
 80033ea:	f000 b90e 	b.w	800360a <__retarget_lock_acquire_recursive>
 80033ee:	bf00      	nop
 80033f0:	200002ad 	.word	0x200002ad

080033f4 <__sfp_lock_release>:
 80033f4:	4801      	ldr	r0, [pc, #4]	@ (80033fc <__sfp_lock_release+0x8>)
 80033f6:	f000 b909 	b.w	800360c <__retarget_lock_release_recursive>
 80033fa:	bf00      	nop
 80033fc:	200002ad 	.word	0x200002ad

08003400 <__sinit>:
 8003400:	b510      	push	{r4, lr}
 8003402:	4604      	mov	r4, r0
 8003404:	f7ff fff0 	bl	80033e8 <__sfp_lock_acquire>
 8003408:	6a23      	ldr	r3, [r4, #32]
 800340a:	b11b      	cbz	r3, 8003414 <__sinit+0x14>
 800340c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003410:	f7ff bff0 	b.w	80033f4 <__sfp_lock_release>
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <__sinit+0x28>)
 8003416:	6223      	str	r3, [r4, #32]
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <__sinit+0x2c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f5      	bne.n	800340c <__sinit+0xc>
 8003420:	f7ff ffc4 	bl	80033ac <global_stdio_init.part.0>
 8003424:	e7f2      	b.n	800340c <__sinit+0xc>
 8003426:	bf00      	nop
 8003428:	0800336d 	.word	0x0800336d
 800342c:	200002a4 	.word	0x200002a4

08003430 <_fwalk_sglue>:
 8003430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003434:	4607      	mov	r7, r0
 8003436:	4688      	mov	r8, r1
 8003438:	4614      	mov	r4, r2
 800343a:	2600      	movs	r6, #0
 800343c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003440:	f1b9 0901 	subs.w	r9, r9, #1
 8003444:	d505      	bpl.n	8003452 <_fwalk_sglue+0x22>
 8003446:	6824      	ldr	r4, [r4, #0]
 8003448:	2c00      	cmp	r4, #0
 800344a:	d1f7      	bne.n	800343c <_fwalk_sglue+0xc>
 800344c:	4630      	mov	r0, r6
 800344e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d907      	bls.n	8003468 <_fwalk_sglue+0x38>
 8003458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800345c:	3301      	adds	r3, #1
 800345e:	d003      	beq.n	8003468 <_fwalk_sglue+0x38>
 8003460:	4629      	mov	r1, r5
 8003462:	4638      	mov	r0, r7
 8003464:	47c0      	blx	r8
 8003466:	4306      	orrs	r6, r0
 8003468:	3568      	adds	r5, #104	@ 0x68
 800346a:	e7e9      	b.n	8003440 <_fwalk_sglue+0x10>

0800346c <iprintf>:
 800346c:	b40f      	push	{r0, r1, r2, r3}
 800346e:	b507      	push	{r0, r1, r2, lr}
 8003470:	4906      	ldr	r1, [pc, #24]	@ (800348c <iprintf+0x20>)
 8003472:	ab04      	add	r3, sp, #16
 8003474:	6808      	ldr	r0, [r1, #0]
 8003476:	f853 2b04 	ldr.w	r2, [r3], #4
 800347a:	6881      	ldr	r1, [r0, #8]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	f000 f9e9 	bl	8003854 <_vfiprintf_r>
 8003482:	b003      	add	sp, #12
 8003484:	f85d eb04 	ldr.w	lr, [sp], #4
 8003488:	b004      	add	sp, #16
 800348a:	4770      	bx	lr
 800348c:	20000018 	.word	0x20000018

08003490 <__sread>:
 8003490:	b510      	push	{r4, lr}
 8003492:	460c      	mov	r4, r1
 8003494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003498:	f000 f868 	bl	800356c <_read_r>
 800349c:	2800      	cmp	r0, #0
 800349e:	bfab      	itete	ge
 80034a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034a2:	89a3      	ldrhlt	r3, [r4, #12]
 80034a4:	181b      	addge	r3, r3, r0
 80034a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034aa:	bfac      	ite	ge
 80034ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034ae:	81a3      	strhlt	r3, [r4, #12]
 80034b0:	bd10      	pop	{r4, pc}

080034b2 <__swrite>:
 80034b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b6:	461f      	mov	r7, r3
 80034b8:	898b      	ldrh	r3, [r1, #12]
 80034ba:	05db      	lsls	r3, r3, #23
 80034bc:	4605      	mov	r5, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	4616      	mov	r6, r2
 80034c2:	d505      	bpl.n	80034d0 <__swrite+0x1e>
 80034c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c8:	2302      	movs	r3, #2
 80034ca:	2200      	movs	r2, #0
 80034cc:	f000 f83c 	bl	8003548 <_lseek_r>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034da:	81a3      	strh	r3, [r4, #12]
 80034dc:	4632      	mov	r2, r6
 80034de:	463b      	mov	r3, r7
 80034e0:	4628      	mov	r0, r5
 80034e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e6:	f000 b853 	b.w	8003590 <_write_r>

080034ea <__sseek>:
 80034ea:	b510      	push	{r4, lr}
 80034ec:	460c      	mov	r4, r1
 80034ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f2:	f000 f829 	bl	8003548 <_lseek_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	bf15      	itete	ne
 80034fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003506:	81a3      	strheq	r3, [r4, #12]
 8003508:	bf18      	it	ne
 800350a:	81a3      	strhne	r3, [r4, #12]
 800350c:	bd10      	pop	{r4, pc}

0800350e <__sclose>:
 800350e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003512:	f000 b809 	b.w	8003528 <_close_r>

08003516 <memset>:
 8003516:	4402      	add	r2, r0
 8003518:	4603      	mov	r3, r0
 800351a:	4293      	cmp	r3, r2
 800351c:	d100      	bne.n	8003520 <memset+0xa>
 800351e:	4770      	bx	lr
 8003520:	f803 1b01 	strb.w	r1, [r3], #1
 8003524:	e7f9      	b.n	800351a <memset+0x4>
	...

08003528 <_close_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d06      	ldr	r5, [pc, #24]	@ (8003544 <_close_r+0x1c>)
 800352c:	2300      	movs	r3, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	f7fd fa93 	bl	8000a5e <_close>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_close_r+0x1a>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_close_r+0x1a>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200002a8 	.word	0x200002a8

08003548 <_lseek_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d07      	ldr	r5, [pc, #28]	@ (8003568 <_lseek_r+0x20>)
 800354c:	4604      	mov	r4, r0
 800354e:	4608      	mov	r0, r1
 8003550:	4611      	mov	r1, r2
 8003552:	2200      	movs	r2, #0
 8003554:	602a      	str	r2, [r5, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7fd faa8 	bl	8000aac <_lseek>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_lseek_r+0x1e>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_lseek_r+0x1e>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	200002a8 	.word	0x200002a8

0800356c <_read_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	4d07      	ldr	r5, [pc, #28]	@ (800358c <_read_r+0x20>)
 8003570:	4604      	mov	r4, r0
 8003572:	4608      	mov	r0, r1
 8003574:	4611      	mov	r1, r2
 8003576:	2200      	movs	r2, #0
 8003578:	602a      	str	r2, [r5, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f7fd fa36 	bl	80009ec <_read>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_read_r+0x1e>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_read_r+0x1e>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	200002a8 	.word	0x200002a8

08003590 <_write_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4d07      	ldr	r5, [pc, #28]	@ (80035b0 <_write_r+0x20>)
 8003594:	4604      	mov	r4, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	2200      	movs	r2, #0
 800359c:	602a      	str	r2, [r5, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7fd fa41 	bl	8000a26 <_write>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_write_r+0x1e>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_write_r+0x1e>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	200002a8 	.word	0x200002a8

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	@ (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000018 	.word	0x20000018

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4d0d      	ldr	r5, [pc, #52]	@ (80035f8 <__libc_init_array+0x38>)
 80035c4:	4c0d      	ldr	r4, [pc, #52]	@ (80035fc <__libc_init_array+0x3c>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	2600      	movs	r6, #0
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003600 <__libc_init_array+0x40>)
 80035d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003604 <__libc_init_array+0x44>)
 80035d4:	f000 fdb6 	bl	8004144 <_init>
 80035d8:	1b64      	subs	r4, r4, r5
 80035da:	10a4      	asrs	r4, r4, #2
 80035dc:	2600      	movs	r6, #0
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	080041c0 	.word	0x080041c0
 80035fc:	080041c0 	.word	0x080041c0
 8003600:	080041c0 	.word	0x080041c0
 8003604:	080041c4 	.word	0x080041c4

08003608 <__retarget_lock_init_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_acquire_recursive>:
 800360a:	4770      	bx	lr

0800360c <__retarget_lock_release_recursive>:
 800360c:	4770      	bx	lr
	...

08003610 <_free_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4605      	mov	r5, r0
 8003614:	2900      	cmp	r1, #0
 8003616:	d041      	beq.n	800369c <_free_r+0x8c>
 8003618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800361c:	1f0c      	subs	r4, r1, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfb8      	it	lt
 8003622:	18e4      	addlt	r4, r4, r3
 8003624:	f000 f8e0 	bl	80037e8 <__malloc_lock>
 8003628:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <_free_r+0x90>)
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	b933      	cbnz	r3, 800363c <_free_r+0x2c>
 800362e:	6063      	str	r3, [r4, #4]
 8003630:	6014      	str	r4, [r2, #0]
 8003632:	4628      	mov	r0, r5
 8003634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003638:	f000 b8dc 	b.w	80037f4 <__malloc_unlock>
 800363c:	42a3      	cmp	r3, r4
 800363e:	d908      	bls.n	8003652 <_free_r+0x42>
 8003640:	6820      	ldr	r0, [r4, #0]
 8003642:	1821      	adds	r1, r4, r0
 8003644:	428b      	cmp	r3, r1
 8003646:	bf01      	itttt	eq
 8003648:	6819      	ldreq	r1, [r3, #0]
 800364a:	685b      	ldreq	r3, [r3, #4]
 800364c:	1809      	addeq	r1, r1, r0
 800364e:	6021      	streq	r1, [r4, #0]
 8003650:	e7ed      	b.n	800362e <_free_r+0x1e>
 8003652:	461a      	mov	r2, r3
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b10b      	cbz	r3, 800365c <_free_r+0x4c>
 8003658:	42a3      	cmp	r3, r4
 800365a:	d9fa      	bls.n	8003652 <_free_r+0x42>
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	1850      	adds	r0, r2, r1
 8003660:	42a0      	cmp	r0, r4
 8003662:	d10b      	bne.n	800367c <_free_r+0x6c>
 8003664:	6820      	ldr	r0, [r4, #0]
 8003666:	4401      	add	r1, r0
 8003668:	1850      	adds	r0, r2, r1
 800366a:	4283      	cmp	r3, r0
 800366c:	6011      	str	r1, [r2, #0]
 800366e:	d1e0      	bne.n	8003632 <_free_r+0x22>
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	6053      	str	r3, [r2, #4]
 8003676:	4408      	add	r0, r1
 8003678:	6010      	str	r0, [r2, #0]
 800367a:	e7da      	b.n	8003632 <_free_r+0x22>
 800367c:	d902      	bls.n	8003684 <_free_r+0x74>
 800367e:	230c      	movs	r3, #12
 8003680:	602b      	str	r3, [r5, #0]
 8003682:	e7d6      	b.n	8003632 <_free_r+0x22>
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	1821      	adds	r1, r4, r0
 8003688:	428b      	cmp	r3, r1
 800368a:	bf04      	itt	eq
 800368c:	6819      	ldreq	r1, [r3, #0]
 800368e:	685b      	ldreq	r3, [r3, #4]
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	bf04      	itt	eq
 8003694:	1809      	addeq	r1, r1, r0
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	6054      	str	r4, [r2, #4]
 800369a:	e7ca      	b.n	8003632 <_free_r+0x22>
 800369c:	bd38      	pop	{r3, r4, r5, pc}
 800369e:	bf00      	nop
 80036a0:	200002b4 	.word	0x200002b4

080036a4 <sbrk_aligned>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4e0f      	ldr	r6, [pc, #60]	@ (80036e4 <sbrk_aligned+0x40>)
 80036a8:	460c      	mov	r4, r1
 80036aa:	6831      	ldr	r1, [r6, #0]
 80036ac:	4605      	mov	r5, r0
 80036ae:	b911      	cbnz	r1, 80036b6 <sbrk_aligned+0x12>
 80036b0:	f000 fcb4 	bl	800401c <_sbrk_r>
 80036b4:	6030      	str	r0, [r6, #0]
 80036b6:	4621      	mov	r1, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 fcaf 	bl	800401c <_sbrk_r>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d103      	bne.n	80036ca <sbrk_aligned+0x26>
 80036c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80036c6:	4620      	mov	r0, r4
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
 80036ca:	1cc4      	adds	r4, r0, #3
 80036cc:	f024 0403 	bic.w	r4, r4, #3
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d0f8      	beq.n	80036c6 <sbrk_aligned+0x22>
 80036d4:	1a21      	subs	r1, r4, r0
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 fca0 	bl	800401c <_sbrk_r>
 80036dc:	3001      	adds	r0, #1
 80036de:	d1f2      	bne.n	80036c6 <sbrk_aligned+0x22>
 80036e0:	e7ef      	b.n	80036c2 <sbrk_aligned+0x1e>
 80036e2:	bf00      	nop
 80036e4:	200002b0 	.word	0x200002b0

080036e8 <_malloc_r>:
 80036e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036ec:	1ccd      	adds	r5, r1, #3
 80036ee:	f025 0503 	bic.w	r5, r5, #3
 80036f2:	3508      	adds	r5, #8
 80036f4:	2d0c      	cmp	r5, #12
 80036f6:	bf38      	it	cc
 80036f8:	250c      	movcc	r5, #12
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	4606      	mov	r6, r0
 80036fe:	db01      	blt.n	8003704 <_malloc_r+0x1c>
 8003700:	42a9      	cmp	r1, r5
 8003702:	d904      	bls.n	800370e <_malloc_r+0x26>
 8003704:	230c      	movs	r3, #12
 8003706:	6033      	str	r3, [r6, #0]
 8003708:	2000      	movs	r0, #0
 800370a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800370e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037e4 <_malloc_r+0xfc>
 8003712:	f000 f869 	bl	80037e8 <__malloc_lock>
 8003716:	f8d8 3000 	ldr.w	r3, [r8]
 800371a:	461c      	mov	r4, r3
 800371c:	bb44      	cbnz	r4, 8003770 <_malloc_r+0x88>
 800371e:	4629      	mov	r1, r5
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff ffbf 	bl	80036a4 <sbrk_aligned>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	4604      	mov	r4, r0
 800372a:	d158      	bne.n	80037de <_malloc_r+0xf6>
 800372c:	f8d8 4000 	ldr.w	r4, [r8]
 8003730:	4627      	mov	r7, r4
 8003732:	2f00      	cmp	r7, #0
 8003734:	d143      	bne.n	80037be <_malloc_r+0xd6>
 8003736:	2c00      	cmp	r4, #0
 8003738:	d04b      	beq.n	80037d2 <_malloc_r+0xea>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	4639      	mov	r1, r7
 800373e:	4630      	mov	r0, r6
 8003740:	eb04 0903 	add.w	r9, r4, r3
 8003744:	f000 fc6a 	bl	800401c <_sbrk_r>
 8003748:	4581      	cmp	r9, r0
 800374a:	d142      	bne.n	80037d2 <_malloc_r+0xea>
 800374c:	6821      	ldr	r1, [r4, #0]
 800374e:	1a6d      	subs	r5, r5, r1
 8003750:	4629      	mov	r1, r5
 8003752:	4630      	mov	r0, r6
 8003754:	f7ff ffa6 	bl	80036a4 <sbrk_aligned>
 8003758:	3001      	adds	r0, #1
 800375a:	d03a      	beq.n	80037d2 <_malloc_r+0xea>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	442b      	add	r3, r5
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	f8d8 3000 	ldr.w	r3, [r8]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	bb62      	cbnz	r2, 80037c4 <_malloc_r+0xdc>
 800376a:	f8c8 7000 	str.w	r7, [r8]
 800376e:	e00f      	b.n	8003790 <_malloc_r+0xa8>
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	1b52      	subs	r2, r2, r5
 8003774:	d420      	bmi.n	80037b8 <_malloc_r+0xd0>
 8003776:	2a0b      	cmp	r2, #11
 8003778:	d917      	bls.n	80037aa <_malloc_r+0xc2>
 800377a:	1961      	adds	r1, r4, r5
 800377c:	42a3      	cmp	r3, r4
 800377e:	6025      	str	r5, [r4, #0]
 8003780:	bf18      	it	ne
 8003782:	6059      	strne	r1, [r3, #4]
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	bf08      	it	eq
 8003788:	f8c8 1000 	streq.w	r1, [r8]
 800378c:	5162      	str	r2, [r4, r5]
 800378e:	604b      	str	r3, [r1, #4]
 8003790:	4630      	mov	r0, r6
 8003792:	f000 f82f 	bl	80037f4 <__malloc_unlock>
 8003796:	f104 000b 	add.w	r0, r4, #11
 800379a:	1d23      	adds	r3, r4, #4
 800379c:	f020 0007 	bic.w	r0, r0, #7
 80037a0:	1ac2      	subs	r2, r0, r3
 80037a2:	bf1c      	itt	ne
 80037a4:	1a1b      	subne	r3, r3, r0
 80037a6:	50a3      	strne	r3, [r4, r2]
 80037a8:	e7af      	b.n	800370a <_malloc_r+0x22>
 80037aa:	6862      	ldr	r2, [r4, #4]
 80037ac:	42a3      	cmp	r3, r4
 80037ae:	bf0c      	ite	eq
 80037b0:	f8c8 2000 	streq.w	r2, [r8]
 80037b4:	605a      	strne	r2, [r3, #4]
 80037b6:	e7eb      	b.n	8003790 <_malloc_r+0xa8>
 80037b8:	4623      	mov	r3, r4
 80037ba:	6864      	ldr	r4, [r4, #4]
 80037bc:	e7ae      	b.n	800371c <_malloc_r+0x34>
 80037be:	463c      	mov	r4, r7
 80037c0:	687f      	ldr	r7, [r7, #4]
 80037c2:	e7b6      	b.n	8003732 <_malloc_r+0x4a>
 80037c4:	461a      	mov	r2, r3
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	d1fb      	bne.n	80037c4 <_malloc_r+0xdc>
 80037cc:	2300      	movs	r3, #0
 80037ce:	6053      	str	r3, [r2, #4]
 80037d0:	e7de      	b.n	8003790 <_malloc_r+0xa8>
 80037d2:	230c      	movs	r3, #12
 80037d4:	6033      	str	r3, [r6, #0]
 80037d6:	4630      	mov	r0, r6
 80037d8:	f000 f80c 	bl	80037f4 <__malloc_unlock>
 80037dc:	e794      	b.n	8003708 <_malloc_r+0x20>
 80037de:	6005      	str	r5, [r0, #0]
 80037e0:	e7d6      	b.n	8003790 <_malloc_r+0xa8>
 80037e2:	bf00      	nop
 80037e4:	200002b4 	.word	0x200002b4

080037e8 <__malloc_lock>:
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <__malloc_lock+0x8>)
 80037ea:	f7ff bf0e 	b.w	800360a <__retarget_lock_acquire_recursive>
 80037ee:	bf00      	nop
 80037f0:	200002ac 	.word	0x200002ac

080037f4 <__malloc_unlock>:
 80037f4:	4801      	ldr	r0, [pc, #4]	@ (80037fc <__malloc_unlock+0x8>)
 80037f6:	f7ff bf09 	b.w	800360c <__retarget_lock_release_recursive>
 80037fa:	bf00      	nop
 80037fc:	200002ac 	.word	0x200002ac

08003800 <__sfputc_r>:
 8003800:	6893      	ldr	r3, [r2, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	b410      	push	{r4}
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	da08      	bge.n	800381e <__sfputc_r+0x1e>
 800380c:	6994      	ldr	r4, [r2, #24]
 800380e:	42a3      	cmp	r3, r4
 8003810:	db01      	blt.n	8003816 <__sfputc_r+0x16>
 8003812:	290a      	cmp	r1, #10
 8003814:	d103      	bne.n	800381e <__sfputc_r+0x1e>
 8003816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800381a:	f000 bb6b 	b.w	8003ef4 <__swbuf_r>
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	1c58      	adds	r0, r3, #1
 8003822:	6010      	str	r0, [r2, #0]
 8003824:	7019      	strb	r1, [r3, #0]
 8003826:	4608      	mov	r0, r1
 8003828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800382c:	4770      	bx	lr

0800382e <__sfputs_r>:
 800382e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003830:	4606      	mov	r6, r0
 8003832:	460f      	mov	r7, r1
 8003834:	4614      	mov	r4, r2
 8003836:	18d5      	adds	r5, r2, r3
 8003838:	42ac      	cmp	r4, r5
 800383a:	d101      	bne.n	8003840 <__sfputs_r+0x12>
 800383c:	2000      	movs	r0, #0
 800383e:	e007      	b.n	8003850 <__sfputs_r+0x22>
 8003840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003844:	463a      	mov	r2, r7
 8003846:	4630      	mov	r0, r6
 8003848:	f7ff ffda 	bl	8003800 <__sfputc_r>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d1f3      	bne.n	8003838 <__sfputs_r+0xa>
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003854 <_vfiprintf_r>:
 8003854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003858:	460d      	mov	r5, r1
 800385a:	b09d      	sub	sp, #116	@ 0x74
 800385c:	4614      	mov	r4, r2
 800385e:	4698      	mov	r8, r3
 8003860:	4606      	mov	r6, r0
 8003862:	b118      	cbz	r0, 800386c <_vfiprintf_r+0x18>
 8003864:	6a03      	ldr	r3, [r0, #32]
 8003866:	b90b      	cbnz	r3, 800386c <_vfiprintf_r+0x18>
 8003868:	f7ff fdca 	bl	8003400 <__sinit>
 800386c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800386e:	07d9      	lsls	r1, r3, #31
 8003870:	d405      	bmi.n	800387e <_vfiprintf_r+0x2a>
 8003872:	89ab      	ldrh	r3, [r5, #12]
 8003874:	059a      	lsls	r2, r3, #22
 8003876:	d402      	bmi.n	800387e <_vfiprintf_r+0x2a>
 8003878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800387a:	f7ff fec6 	bl	800360a <__retarget_lock_acquire_recursive>
 800387e:	89ab      	ldrh	r3, [r5, #12]
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	d501      	bpl.n	8003888 <_vfiprintf_r+0x34>
 8003884:	692b      	ldr	r3, [r5, #16]
 8003886:	b99b      	cbnz	r3, 80038b0 <_vfiprintf_r+0x5c>
 8003888:	4629      	mov	r1, r5
 800388a:	4630      	mov	r0, r6
 800388c:	f000 fb70 	bl	8003f70 <__swsetup_r>
 8003890:	b170      	cbz	r0, 80038b0 <_vfiprintf_r+0x5c>
 8003892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003894:	07dc      	lsls	r4, r3, #31
 8003896:	d504      	bpl.n	80038a2 <_vfiprintf_r+0x4e>
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800389c:	b01d      	add	sp, #116	@ 0x74
 800389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a2:	89ab      	ldrh	r3, [r5, #12]
 80038a4:	0598      	lsls	r0, r3, #22
 80038a6:	d4f7      	bmi.n	8003898 <_vfiprintf_r+0x44>
 80038a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038aa:	f7ff feaf 	bl	800360c <__retarget_lock_release_recursive>
 80038ae:	e7f3      	b.n	8003898 <_vfiprintf_r+0x44>
 80038b0:	2300      	movs	r3, #0
 80038b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80038b4:	2320      	movs	r3, #32
 80038b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80038be:	2330      	movs	r3, #48	@ 0x30
 80038c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003a70 <_vfiprintf_r+0x21c>
 80038c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038c8:	f04f 0901 	mov.w	r9, #1
 80038cc:	4623      	mov	r3, r4
 80038ce:	469a      	mov	sl, r3
 80038d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d4:	b10a      	cbz	r2, 80038da <_vfiprintf_r+0x86>
 80038d6:	2a25      	cmp	r2, #37	@ 0x25
 80038d8:	d1f9      	bne.n	80038ce <_vfiprintf_r+0x7a>
 80038da:	ebba 0b04 	subs.w	fp, sl, r4
 80038de:	d00b      	beq.n	80038f8 <_vfiprintf_r+0xa4>
 80038e0:	465b      	mov	r3, fp
 80038e2:	4622      	mov	r2, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7ff ffa1 	bl	800382e <__sfputs_r>
 80038ec:	3001      	adds	r0, #1
 80038ee:	f000 80a7 	beq.w	8003a40 <_vfiprintf_r+0x1ec>
 80038f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038f4:	445a      	add	r2, fp
 80038f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80038f8:	f89a 3000 	ldrb.w	r3, [sl]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 809f 	beq.w	8003a40 <_vfiprintf_r+0x1ec>
 8003902:	2300      	movs	r3, #0
 8003904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800390c:	f10a 0a01 	add.w	sl, sl, #1
 8003910:	9304      	str	r3, [sp, #16]
 8003912:	9307      	str	r3, [sp, #28]
 8003914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003918:	931a      	str	r3, [sp, #104]	@ 0x68
 800391a:	4654      	mov	r4, sl
 800391c:	2205      	movs	r2, #5
 800391e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003922:	4853      	ldr	r0, [pc, #332]	@ (8003a70 <_vfiprintf_r+0x21c>)
 8003924:	f7fc fc5c 	bl	80001e0 <memchr>
 8003928:	9a04      	ldr	r2, [sp, #16]
 800392a:	b9d8      	cbnz	r0, 8003964 <_vfiprintf_r+0x110>
 800392c:	06d1      	lsls	r1, r2, #27
 800392e:	bf44      	itt	mi
 8003930:	2320      	movmi	r3, #32
 8003932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003936:	0713      	lsls	r3, r2, #28
 8003938:	bf44      	itt	mi
 800393a:	232b      	movmi	r3, #43	@ 0x2b
 800393c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003940:	f89a 3000 	ldrb.w	r3, [sl]
 8003944:	2b2a      	cmp	r3, #42	@ 0x2a
 8003946:	d015      	beq.n	8003974 <_vfiprintf_r+0x120>
 8003948:	9a07      	ldr	r2, [sp, #28]
 800394a:	4654      	mov	r4, sl
 800394c:	2000      	movs	r0, #0
 800394e:	f04f 0c0a 	mov.w	ip, #10
 8003952:	4621      	mov	r1, r4
 8003954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003958:	3b30      	subs	r3, #48	@ 0x30
 800395a:	2b09      	cmp	r3, #9
 800395c:	d94b      	bls.n	80039f6 <_vfiprintf_r+0x1a2>
 800395e:	b1b0      	cbz	r0, 800398e <_vfiprintf_r+0x13a>
 8003960:	9207      	str	r2, [sp, #28]
 8003962:	e014      	b.n	800398e <_vfiprintf_r+0x13a>
 8003964:	eba0 0308 	sub.w	r3, r0, r8
 8003968:	fa09 f303 	lsl.w	r3, r9, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	46a2      	mov	sl, r4
 8003972:	e7d2      	b.n	800391a <_vfiprintf_r+0xc6>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	1d19      	adds	r1, r3, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	9103      	str	r1, [sp, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfbb      	ittet	lt
 8003980:	425b      	neglt	r3, r3
 8003982:	f042 0202 	orrlt.w	r2, r2, #2
 8003986:	9307      	strge	r3, [sp, #28]
 8003988:	9307      	strlt	r3, [sp, #28]
 800398a:	bfb8      	it	lt
 800398c:	9204      	strlt	r2, [sp, #16]
 800398e:	7823      	ldrb	r3, [r4, #0]
 8003990:	2b2e      	cmp	r3, #46	@ 0x2e
 8003992:	d10a      	bne.n	80039aa <_vfiprintf_r+0x156>
 8003994:	7863      	ldrb	r3, [r4, #1]
 8003996:	2b2a      	cmp	r3, #42	@ 0x2a
 8003998:	d132      	bne.n	8003a00 <_vfiprintf_r+0x1ac>
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	1d1a      	adds	r2, r3, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	9203      	str	r2, [sp, #12]
 80039a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039a6:	3402      	adds	r4, #2
 80039a8:	9305      	str	r3, [sp, #20]
 80039aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003a80 <_vfiprintf_r+0x22c>
 80039ae:	7821      	ldrb	r1, [r4, #0]
 80039b0:	2203      	movs	r2, #3
 80039b2:	4650      	mov	r0, sl
 80039b4:	f7fc fc14 	bl	80001e0 <memchr>
 80039b8:	b138      	cbz	r0, 80039ca <_vfiprintf_r+0x176>
 80039ba:	9b04      	ldr	r3, [sp, #16]
 80039bc:	eba0 000a 	sub.w	r0, r0, sl
 80039c0:	2240      	movs	r2, #64	@ 0x40
 80039c2:	4082      	lsls	r2, r0
 80039c4:	4313      	orrs	r3, r2
 80039c6:	3401      	adds	r4, #1
 80039c8:	9304      	str	r3, [sp, #16]
 80039ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ce:	4829      	ldr	r0, [pc, #164]	@ (8003a74 <_vfiprintf_r+0x220>)
 80039d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039d4:	2206      	movs	r2, #6
 80039d6:	f7fc fc03 	bl	80001e0 <memchr>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d03f      	beq.n	8003a5e <_vfiprintf_r+0x20a>
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <_vfiprintf_r+0x224>)
 80039e0:	bb1b      	cbnz	r3, 8003a2a <_vfiprintf_r+0x1d6>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	3307      	adds	r3, #7
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	3308      	adds	r3, #8
 80039ec:	9303      	str	r3, [sp, #12]
 80039ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039f0:	443b      	add	r3, r7
 80039f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80039f4:	e76a      	b.n	80038cc <_vfiprintf_r+0x78>
 80039f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039fa:	460c      	mov	r4, r1
 80039fc:	2001      	movs	r0, #1
 80039fe:	e7a8      	b.n	8003952 <_vfiprintf_r+0xfe>
 8003a00:	2300      	movs	r3, #0
 8003a02:	3401      	adds	r4, #1
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	4619      	mov	r1, r3
 8003a08:	f04f 0c0a 	mov.w	ip, #10
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a12:	3a30      	subs	r2, #48	@ 0x30
 8003a14:	2a09      	cmp	r2, #9
 8003a16:	d903      	bls.n	8003a20 <_vfiprintf_r+0x1cc>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0c6      	beq.n	80039aa <_vfiprintf_r+0x156>
 8003a1c:	9105      	str	r1, [sp, #20]
 8003a1e:	e7c4      	b.n	80039aa <_vfiprintf_r+0x156>
 8003a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a24:	4604      	mov	r4, r0
 8003a26:	2301      	movs	r3, #1
 8003a28:	e7f0      	b.n	8003a0c <_vfiprintf_r+0x1b8>
 8003a2a:	ab03      	add	r3, sp, #12
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	462a      	mov	r2, r5
 8003a30:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <_vfiprintf_r+0x228>)
 8003a32:	a904      	add	r1, sp, #16
 8003a34:	4630      	mov	r0, r6
 8003a36:	f3af 8000 	nop.w
 8003a3a:	4607      	mov	r7, r0
 8003a3c:	1c78      	adds	r0, r7, #1
 8003a3e:	d1d6      	bne.n	80039ee <_vfiprintf_r+0x19a>
 8003a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a42:	07d9      	lsls	r1, r3, #31
 8003a44:	d405      	bmi.n	8003a52 <_vfiprintf_r+0x1fe>
 8003a46:	89ab      	ldrh	r3, [r5, #12]
 8003a48:	059a      	lsls	r2, r3, #22
 8003a4a:	d402      	bmi.n	8003a52 <_vfiprintf_r+0x1fe>
 8003a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a4e:	f7ff fddd 	bl	800360c <__retarget_lock_release_recursive>
 8003a52:	89ab      	ldrh	r3, [r5, #12]
 8003a54:	065b      	lsls	r3, r3, #25
 8003a56:	f53f af1f 	bmi.w	8003898 <_vfiprintf_r+0x44>
 8003a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a5c:	e71e      	b.n	800389c <_vfiprintf_r+0x48>
 8003a5e:	ab03      	add	r3, sp, #12
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	462a      	mov	r2, r5
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <_vfiprintf_r+0x228>)
 8003a66:	a904      	add	r1, sp, #16
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 f879 	bl	8003b60 <_printf_i>
 8003a6e:	e7e4      	b.n	8003a3a <_vfiprintf_r+0x1e6>
 8003a70:	08004184 	.word	0x08004184
 8003a74:	0800418e 	.word	0x0800418e
 8003a78:	00000000 	.word	0x00000000
 8003a7c:	0800382f 	.word	0x0800382f
 8003a80:	0800418a 	.word	0x0800418a

08003a84 <_printf_common>:
 8003a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	4616      	mov	r6, r2
 8003a8a:	4698      	mov	r8, r3
 8003a8c:	688a      	ldr	r2, [r1, #8]
 8003a8e:	690b      	ldr	r3, [r1, #16]
 8003a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bfb8      	it	lt
 8003a98:	4613      	movlt	r3, r2
 8003a9a:	6033      	str	r3, [r6, #0]
 8003a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	b10a      	cbz	r2, 8003aaa <_printf_common+0x26>
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	6033      	str	r3, [r6, #0]
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	0699      	lsls	r1, r3, #26
 8003aae:	bf42      	ittt	mi
 8003ab0:	6833      	ldrmi	r3, [r6, #0]
 8003ab2:	3302      	addmi	r3, #2
 8003ab4:	6033      	strmi	r3, [r6, #0]
 8003ab6:	6825      	ldr	r5, [r4, #0]
 8003ab8:	f015 0506 	ands.w	r5, r5, #6
 8003abc:	d106      	bne.n	8003acc <_printf_common+0x48>
 8003abe:	f104 0a19 	add.w	sl, r4, #25
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	6832      	ldr	r2, [r6, #0]
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	42ab      	cmp	r3, r5
 8003aca:	dc26      	bgt.n	8003b1a <_printf_common+0x96>
 8003acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	3b00      	subs	r3, #0
 8003ad4:	bf18      	it	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	0692      	lsls	r2, r2, #26
 8003ada:	d42b      	bmi.n	8003b34 <_printf_common+0xb0>
 8003adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	47c8      	blx	r9
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d01e      	beq.n	8003b28 <_printf_common+0xa4>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	6922      	ldr	r2, [r4, #16]
 8003aee:	f003 0306 	and.w	r3, r3, #6
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	bf02      	ittt	eq
 8003af6:	68e5      	ldreq	r5, [r4, #12]
 8003af8:	6833      	ldreq	r3, [r6, #0]
 8003afa:	1aed      	subeq	r5, r5, r3
 8003afc:	68a3      	ldr	r3, [r4, #8]
 8003afe:	bf0c      	ite	eq
 8003b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b04:	2500      	movne	r5, #0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfc4      	itt	gt
 8003b0a:	1a9b      	subgt	r3, r3, r2
 8003b0c:	18ed      	addgt	r5, r5, r3
 8003b0e:	2600      	movs	r6, #0
 8003b10:	341a      	adds	r4, #26
 8003b12:	42b5      	cmp	r5, r6
 8003b14:	d11a      	bne.n	8003b4c <_printf_common+0xc8>
 8003b16:	2000      	movs	r0, #0
 8003b18:	e008      	b.n	8003b2c <_printf_common+0xa8>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4652      	mov	r2, sl
 8003b1e:	4641      	mov	r1, r8
 8003b20:	4638      	mov	r0, r7
 8003b22:	47c8      	blx	r9
 8003b24:	3001      	adds	r0, #1
 8003b26:	d103      	bne.n	8003b30 <_printf_common+0xac>
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7c6      	b.n	8003ac2 <_printf_common+0x3e>
 8003b34:	18e1      	adds	r1, r4, r3
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	2030      	movs	r0, #48	@ 0x30
 8003b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b3e:	4422      	add	r2, r4
 8003b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b48:	3302      	adds	r3, #2
 8003b4a:	e7c7      	b.n	8003adc <_printf_common+0x58>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4622      	mov	r2, r4
 8003b50:	4641      	mov	r1, r8
 8003b52:	4638      	mov	r0, r7
 8003b54:	47c8      	blx	r9
 8003b56:	3001      	adds	r0, #1
 8003b58:	d0e6      	beq.n	8003b28 <_printf_common+0xa4>
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	e7d9      	b.n	8003b12 <_printf_common+0x8e>
	...

08003b60 <_printf_i>:
 8003b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	7e0f      	ldrb	r7, [r1, #24]
 8003b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b68:	2f78      	cmp	r7, #120	@ 0x78
 8003b6a:	4691      	mov	r9, r2
 8003b6c:	4680      	mov	r8, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	469a      	mov	sl, r3
 8003b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b76:	d807      	bhi.n	8003b88 <_printf_i+0x28>
 8003b78:	2f62      	cmp	r7, #98	@ 0x62
 8003b7a:	d80a      	bhi.n	8003b92 <_printf_i+0x32>
 8003b7c:	2f00      	cmp	r7, #0
 8003b7e:	f000 80d1 	beq.w	8003d24 <_printf_i+0x1c4>
 8003b82:	2f58      	cmp	r7, #88	@ 0x58
 8003b84:	f000 80b8 	beq.w	8003cf8 <_printf_i+0x198>
 8003b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b90:	e03a      	b.n	8003c08 <_printf_i+0xa8>
 8003b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b96:	2b15      	cmp	r3, #21
 8003b98:	d8f6      	bhi.n	8003b88 <_printf_i+0x28>
 8003b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8003ba0 <_printf_i+0x40>)
 8003b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003c0d 	.word	0x08003c0d
 8003ba8:	08003b89 	.word	0x08003b89
 8003bac:	08003b89 	.word	0x08003b89
 8003bb0:	08003b89 	.word	0x08003b89
 8003bb4:	08003b89 	.word	0x08003b89
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003b89 	.word	0x08003b89
 8003bc0:	08003b89 	.word	0x08003b89
 8003bc4:	08003b89 	.word	0x08003b89
 8003bc8:	08003b89 	.word	0x08003b89
 8003bcc:	08003d0b 	.word	0x08003d0b
 8003bd0:	08003c37 	.word	0x08003c37
 8003bd4:	08003cc5 	.word	0x08003cc5
 8003bd8:	08003b89 	.word	0x08003b89
 8003bdc:	08003b89 	.word	0x08003b89
 8003be0:	08003d2d 	.word	0x08003d2d
 8003be4:	08003b89 	.word	0x08003b89
 8003be8:	08003c37 	.word	0x08003c37
 8003bec:	08003b89 	.word	0x08003b89
 8003bf0:	08003b89 	.word	0x08003b89
 8003bf4:	08003ccd 	.word	0x08003ccd
 8003bf8:	6833      	ldr	r3, [r6, #0]
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6032      	str	r2, [r6, #0]
 8003c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e09c      	b.n	8003d46 <_printf_i+0x1e6>
 8003c0c:	6833      	ldr	r3, [r6, #0]
 8003c0e:	6820      	ldr	r0, [r4, #0]
 8003c10:	1d19      	adds	r1, r3, #4
 8003c12:	6031      	str	r1, [r6, #0]
 8003c14:	0606      	lsls	r6, r0, #24
 8003c16:	d501      	bpl.n	8003c1c <_printf_i+0xbc>
 8003c18:	681d      	ldr	r5, [r3, #0]
 8003c1a:	e003      	b.n	8003c24 <_printf_i+0xc4>
 8003c1c:	0645      	lsls	r5, r0, #25
 8003c1e:	d5fb      	bpl.n	8003c18 <_printf_i+0xb8>
 8003c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	da03      	bge.n	8003c30 <_printf_i+0xd0>
 8003c28:	232d      	movs	r3, #45	@ 0x2d
 8003c2a:	426d      	negs	r5, r5
 8003c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c30:	4858      	ldr	r0, [pc, #352]	@ (8003d94 <_printf_i+0x234>)
 8003c32:	230a      	movs	r3, #10
 8003c34:	e011      	b.n	8003c5a <_printf_i+0xfa>
 8003c36:	6821      	ldr	r1, [r4, #0]
 8003c38:	6833      	ldr	r3, [r6, #0]
 8003c3a:	0608      	lsls	r0, r1, #24
 8003c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c40:	d402      	bmi.n	8003c48 <_printf_i+0xe8>
 8003c42:	0649      	lsls	r1, r1, #25
 8003c44:	bf48      	it	mi
 8003c46:	b2ad      	uxthmi	r5, r5
 8003c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c4a:	4852      	ldr	r0, [pc, #328]	@ (8003d94 <_printf_i+0x234>)
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	bf14      	ite	ne
 8003c50:	230a      	movne	r3, #10
 8003c52:	2308      	moveq	r3, #8
 8003c54:	2100      	movs	r1, #0
 8003c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c5a:	6866      	ldr	r6, [r4, #4]
 8003c5c:	60a6      	str	r6, [r4, #8]
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	db05      	blt.n	8003c6e <_printf_i+0x10e>
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	432e      	orrs	r6, r5
 8003c66:	f021 0104 	bic.w	r1, r1, #4
 8003c6a:	6021      	str	r1, [r4, #0]
 8003c6c:	d04b      	beq.n	8003d06 <_printf_i+0x1a6>
 8003c6e:	4616      	mov	r6, r2
 8003c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c74:	fb03 5711 	mls	r7, r3, r1, r5
 8003c78:	5dc7      	ldrb	r7, [r0, r7]
 8003c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c7e:	462f      	mov	r7, r5
 8003c80:	42bb      	cmp	r3, r7
 8003c82:	460d      	mov	r5, r1
 8003c84:	d9f4      	bls.n	8003c70 <_printf_i+0x110>
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d10b      	bne.n	8003ca2 <_printf_i+0x142>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	07df      	lsls	r7, r3, #31
 8003c8e:	d508      	bpl.n	8003ca2 <_printf_i+0x142>
 8003c90:	6923      	ldr	r3, [r4, #16]
 8003c92:	6861      	ldr	r1, [r4, #4]
 8003c94:	4299      	cmp	r1, r3
 8003c96:	bfde      	ittt	le
 8003c98:	2330      	movle	r3, #48	@ 0x30
 8003c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ca2:	1b92      	subs	r2, r2, r6
 8003ca4:	6122      	str	r2, [r4, #16]
 8003ca6:	f8cd a000 	str.w	sl, [sp]
 8003caa:	464b      	mov	r3, r9
 8003cac:	aa03      	add	r2, sp, #12
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	f7ff fee7 	bl	8003a84 <_printf_common>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d14a      	bne.n	8003d50 <_printf_i+0x1f0>
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cbe:	b004      	add	sp, #16
 8003cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	4832      	ldr	r0, [pc, #200]	@ (8003d98 <_printf_i+0x238>)
 8003cce:	2778      	movs	r7, #120	@ 0x78
 8003cd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	6831      	ldr	r1, [r6, #0]
 8003cd8:	061f      	lsls	r7, r3, #24
 8003cda:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cde:	d402      	bmi.n	8003ce6 <_printf_i+0x186>
 8003ce0:	065f      	lsls	r7, r3, #25
 8003ce2:	bf48      	it	mi
 8003ce4:	b2ad      	uxthmi	r5, r5
 8003ce6:	6031      	str	r1, [r6, #0]
 8003ce8:	07d9      	lsls	r1, r3, #31
 8003cea:	bf44      	itt	mi
 8003cec:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf0:	6023      	strmi	r3, [r4, #0]
 8003cf2:	b11d      	cbz	r5, 8003cfc <_printf_i+0x19c>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	e7ad      	b.n	8003c54 <_printf_i+0xf4>
 8003cf8:	4826      	ldr	r0, [pc, #152]	@ (8003d94 <_printf_i+0x234>)
 8003cfa:	e7e9      	b.n	8003cd0 <_printf_i+0x170>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	e7f6      	b.n	8003cf4 <_printf_i+0x194>
 8003d06:	4616      	mov	r6, r2
 8003d08:	e7bd      	b.n	8003c86 <_printf_i+0x126>
 8003d0a:	6833      	ldr	r3, [r6, #0]
 8003d0c:	6825      	ldr	r5, [r4, #0]
 8003d0e:	6961      	ldr	r1, [r4, #20]
 8003d10:	1d18      	adds	r0, r3, #4
 8003d12:	6030      	str	r0, [r6, #0]
 8003d14:	062e      	lsls	r6, r5, #24
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	d501      	bpl.n	8003d1e <_printf_i+0x1be>
 8003d1a:	6019      	str	r1, [r3, #0]
 8003d1c:	e002      	b.n	8003d24 <_printf_i+0x1c4>
 8003d1e:	0668      	lsls	r0, r5, #25
 8003d20:	d5fb      	bpl.n	8003d1a <_printf_i+0x1ba>
 8003d22:	8019      	strh	r1, [r3, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	4616      	mov	r6, r2
 8003d2a:	e7bc      	b.n	8003ca6 <_printf_i+0x146>
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	6032      	str	r2, [r6, #0]
 8003d32:	681e      	ldr	r6, [r3, #0]
 8003d34:	6862      	ldr	r2, [r4, #4]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f7fc fa51 	bl	80001e0 <memchr>
 8003d3e:	b108      	cbz	r0, 8003d44 <_printf_i+0x1e4>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	6060      	str	r0, [r4, #4]
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d4e:	e7aa      	b.n	8003ca6 <_printf_i+0x146>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	4632      	mov	r2, r6
 8003d54:	4649      	mov	r1, r9
 8003d56:	4640      	mov	r0, r8
 8003d58:	47d0      	blx	sl
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d0ad      	beq.n	8003cba <_printf_i+0x15a>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	079b      	lsls	r3, r3, #30
 8003d62:	d413      	bmi.n	8003d8c <_printf_i+0x22c>
 8003d64:	68e0      	ldr	r0, [r4, #12]
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	bfb8      	it	lt
 8003d6c:	4618      	movlt	r0, r3
 8003d6e:	e7a6      	b.n	8003cbe <_printf_i+0x15e>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4632      	mov	r2, r6
 8003d74:	4649      	mov	r1, r9
 8003d76:	4640      	mov	r0, r8
 8003d78:	47d0      	blx	sl
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d09d      	beq.n	8003cba <_printf_i+0x15a>
 8003d7e:	3501      	adds	r5, #1
 8003d80:	68e3      	ldr	r3, [r4, #12]
 8003d82:	9903      	ldr	r1, [sp, #12]
 8003d84:	1a5b      	subs	r3, r3, r1
 8003d86:	42ab      	cmp	r3, r5
 8003d88:	dcf2      	bgt.n	8003d70 <_printf_i+0x210>
 8003d8a:	e7eb      	b.n	8003d64 <_printf_i+0x204>
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	f104 0619 	add.w	r6, r4, #25
 8003d92:	e7f5      	b.n	8003d80 <_printf_i+0x220>
 8003d94:	08004195 	.word	0x08004195
 8003d98:	080041a6 	.word	0x080041a6

08003d9c <__sflush_r>:
 8003d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	0716      	lsls	r6, r2, #28
 8003da6:	4605      	mov	r5, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	d454      	bmi.n	8003e56 <__sflush_r+0xba>
 8003dac:	684b      	ldr	r3, [r1, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	dc02      	bgt.n	8003db8 <__sflush_r+0x1c>
 8003db2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dd48      	ble.n	8003e4a <__sflush_r+0xae>
 8003db8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d045      	beq.n	8003e4a <__sflush_r+0xae>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003dc4:	682f      	ldr	r7, [r5, #0]
 8003dc6:	6a21      	ldr	r1, [r4, #32]
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	d030      	beq.n	8003e2e <__sflush_r+0x92>
 8003dcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	0759      	lsls	r1, r3, #29
 8003dd2:	d505      	bpl.n	8003de0 <__sflush_r+0x44>
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dda:	b10b      	cbz	r3, 8003de0 <__sflush_r+0x44>
 8003ddc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	2300      	movs	r3, #0
 8003de2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003de4:	6a21      	ldr	r1, [r4, #32]
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b0      	blx	r6
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	d106      	bne.n	8003dfe <__sflush_r+0x62>
 8003df0:	6829      	ldr	r1, [r5, #0]
 8003df2:	291d      	cmp	r1, #29
 8003df4:	d82b      	bhi.n	8003e4e <__sflush_r+0xb2>
 8003df6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <__sflush_r+0x104>)
 8003df8:	40ca      	lsrs	r2, r1
 8003dfa:	07d6      	lsls	r6, r2, #31
 8003dfc:	d527      	bpl.n	8003e4e <__sflush_r+0xb2>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	6062      	str	r2, [r4, #4]
 8003e02:	04d9      	lsls	r1, r3, #19
 8003e04:	6922      	ldr	r2, [r4, #16]
 8003e06:	6022      	str	r2, [r4, #0]
 8003e08:	d504      	bpl.n	8003e14 <__sflush_r+0x78>
 8003e0a:	1c42      	adds	r2, r0, #1
 8003e0c:	d101      	bne.n	8003e12 <__sflush_r+0x76>
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	b903      	cbnz	r3, 8003e14 <__sflush_r+0x78>
 8003e12:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e16:	602f      	str	r7, [r5, #0]
 8003e18:	b1b9      	cbz	r1, 8003e4a <__sflush_r+0xae>
 8003e1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	d002      	beq.n	8003e28 <__sflush_r+0x8c>
 8003e22:	4628      	mov	r0, r5
 8003e24:	f7ff fbf4 	bl	8003610 <_free_r>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e2c:	e00d      	b.n	8003e4a <__sflush_r+0xae>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	4602      	mov	r2, r0
 8003e36:	1c50      	adds	r0, r2, #1
 8003e38:	d1c9      	bne.n	8003dce <__sflush_r+0x32>
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0c6      	beq.n	8003dce <__sflush_r+0x32>
 8003e40:	2b1d      	cmp	r3, #29
 8003e42:	d001      	beq.n	8003e48 <__sflush_r+0xac>
 8003e44:	2b16      	cmp	r3, #22
 8003e46:	d11e      	bne.n	8003e86 <__sflush_r+0xea>
 8003e48:	602f      	str	r7, [r5, #0]
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e022      	b.n	8003e94 <__sflush_r+0xf8>
 8003e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	e01b      	b.n	8003e8e <__sflush_r+0xf2>
 8003e56:	690f      	ldr	r7, [r1, #16]
 8003e58:	2f00      	cmp	r7, #0
 8003e5a:	d0f6      	beq.n	8003e4a <__sflush_r+0xae>
 8003e5c:	0793      	lsls	r3, r2, #30
 8003e5e:	680e      	ldr	r6, [r1, #0]
 8003e60:	bf08      	it	eq
 8003e62:	694b      	ldreq	r3, [r1, #20]
 8003e64:	600f      	str	r7, [r1, #0]
 8003e66:	bf18      	it	ne
 8003e68:	2300      	movne	r3, #0
 8003e6a:	eba6 0807 	sub.w	r8, r6, r7
 8003e6e:	608b      	str	r3, [r1, #8]
 8003e70:	f1b8 0f00 	cmp.w	r8, #0
 8003e74:	dde9      	ble.n	8003e4a <__sflush_r+0xae>
 8003e76:	6a21      	ldr	r1, [r4, #32]
 8003e78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003e7a:	4643      	mov	r3, r8
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b0      	blx	r6
 8003e82:	2800      	cmp	r0, #0
 8003e84:	dc08      	bgt.n	8003e98 <__sflush_r+0xfc>
 8003e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e98:	4407      	add	r7, r0
 8003e9a:	eba8 0800 	sub.w	r8, r8, r0
 8003e9e:	e7e7      	b.n	8003e70 <__sflush_r+0xd4>
 8003ea0:	20400001 	.word	0x20400001

08003ea4 <_fflush_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	b913      	cbnz	r3, 8003eb4 <_fflush_r+0x10>
 8003eae:	2500      	movs	r5, #0
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	b118      	cbz	r0, 8003ebe <_fflush_r+0x1a>
 8003eb6:	6a03      	ldr	r3, [r0, #32]
 8003eb8:	b90b      	cbnz	r3, 8003ebe <_fflush_r+0x1a>
 8003eba:	f7ff faa1 	bl	8003400 <__sinit>
 8003ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f3      	beq.n	8003eae <_fflush_r+0xa>
 8003ec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ec8:	07d0      	lsls	r0, r2, #31
 8003eca:	d404      	bmi.n	8003ed6 <_fflush_r+0x32>
 8003ecc:	0599      	lsls	r1, r3, #22
 8003ece:	d402      	bmi.n	8003ed6 <_fflush_r+0x32>
 8003ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ed2:	f7ff fb9a 	bl	800360a <__retarget_lock_acquire_recursive>
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7ff ff5f 	bl	8003d9c <__sflush_r>
 8003ede:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ee0:	07da      	lsls	r2, r3, #31
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	d4e4      	bmi.n	8003eb0 <_fflush_r+0xc>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	d4e1      	bmi.n	8003eb0 <_fflush_r+0xc>
 8003eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eee:	f7ff fb8d 	bl	800360c <__retarget_lock_release_recursive>
 8003ef2:	e7dd      	b.n	8003eb0 <_fflush_r+0xc>

08003ef4 <__swbuf_r>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	460e      	mov	r6, r1
 8003ef8:	4614      	mov	r4, r2
 8003efa:	4605      	mov	r5, r0
 8003efc:	b118      	cbz	r0, 8003f06 <__swbuf_r+0x12>
 8003efe:	6a03      	ldr	r3, [r0, #32]
 8003f00:	b90b      	cbnz	r3, 8003f06 <__swbuf_r+0x12>
 8003f02:	f7ff fa7d 	bl	8003400 <__sinit>
 8003f06:	69a3      	ldr	r3, [r4, #24]
 8003f08:	60a3      	str	r3, [r4, #8]
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	071a      	lsls	r2, r3, #28
 8003f0e:	d501      	bpl.n	8003f14 <__swbuf_r+0x20>
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	b943      	cbnz	r3, 8003f26 <__swbuf_r+0x32>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f82a 	bl	8003f70 <__swsetup_r>
 8003f1c:	b118      	cbz	r0, 8003f26 <__swbuf_r+0x32>
 8003f1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003f22:	4638      	mov	r0, r7
 8003f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	1a98      	subs	r0, r3, r2
 8003f2c:	6963      	ldr	r3, [r4, #20]
 8003f2e:	b2f6      	uxtb	r6, r6
 8003f30:	4283      	cmp	r3, r0
 8003f32:	4637      	mov	r7, r6
 8003f34:	dc05      	bgt.n	8003f42 <__swbuf_r+0x4e>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f7ff ffb3 	bl	8003ea4 <_fflush_r>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d1ed      	bne.n	8003f1e <__swbuf_r+0x2a>
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	60a3      	str	r3, [r4, #8]
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	701e      	strb	r6, [r3, #0]
 8003f50:	6962      	ldr	r2, [r4, #20]
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d004      	beq.n	8003f62 <__swbuf_r+0x6e>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	07db      	lsls	r3, r3, #31
 8003f5c:	d5e1      	bpl.n	8003f22 <__swbuf_r+0x2e>
 8003f5e:	2e0a      	cmp	r6, #10
 8003f60:	d1df      	bne.n	8003f22 <__swbuf_r+0x2e>
 8003f62:	4621      	mov	r1, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	f7ff ff9d 	bl	8003ea4 <_fflush_r>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0d9      	beq.n	8003f22 <__swbuf_r+0x2e>
 8003f6e:	e7d6      	b.n	8003f1e <__swbuf_r+0x2a>

08003f70 <__swsetup_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4b29      	ldr	r3, [pc, #164]	@ (8004018 <__swsetup_r+0xa8>)
 8003f74:	4605      	mov	r5, r0
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	460c      	mov	r4, r1
 8003f7a:	b118      	cbz	r0, 8003f84 <__swsetup_r+0x14>
 8003f7c:	6a03      	ldr	r3, [r0, #32]
 8003f7e:	b90b      	cbnz	r3, 8003f84 <__swsetup_r+0x14>
 8003f80:	f7ff fa3e 	bl	8003400 <__sinit>
 8003f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f88:	0719      	lsls	r1, r3, #28
 8003f8a:	d422      	bmi.n	8003fd2 <__swsetup_r+0x62>
 8003f8c:	06da      	lsls	r2, r3, #27
 8003f8e:	d407      	bmi.n	8003fa0 <__swsetup_r+0x30>
 8003f90:	2209      	movs	r2, #9
 8003f92:	602a      	str	r2, [r5, #0]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f9e:	e033      	b.n	8004008 <__swsetup_r+0x98>
 8003fa0:	0758      	lsls	r0, r3, #29
 8003fa2:	d512      	bpl.n	8003fca <__swsetup_r+0x5a>
 8003fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fa6:	b141      	cbz	r1, 8003fba <__swsetup_r+0x4a>
 8003fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fac:	4299      	cmp	r1, r3
 8003fae:	d002      	beq.n	8003fb6 <__swsetup_r+0x46>
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f7ff fb2d 	bl	8003610 <_free_r>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	b94b      	cbnz	r3, 8003fea <__swsetup_r+0x7a>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe0:	d003      	beq.n	8003fea <__swsetup_r+0x7a>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f84f 	bl	8004088 <__smakebuf_r>
 8003fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fee:	f013 0201 	ands.w	r2, r3, #1
 8003ff2:	d00a      	beq.n	800400a <__swsetup_r+0x9a>
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60a2      	str	r2, [r4, #8]
 8003ff8:	6962      	ldr	r2, [r4, #20]
 8003ffa:	4252      	negs	r2, r2
 8003ffc:	61a2      	str	r2, [r4, #24]
 8003ffe:	6922      	ldr	r2, [r4, #16]
 8004000:	b942      	cbnz	r2, 8004014 <__swsetup_r+0xa4>
 8004002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004006:	d1c5      	bne.n	8003f94 <__swsetup_r+0x24>
 8004008:	bd38      	pop	{r3, r4, r5, pc}
 800400a:	0799      	lsls	r1, r3, #30
 800400c:	bf58      	it	pl
 800400e:	6962      	ldrpl	r2, [r4, #20]
 8004010:	60a2      	str	r2, [r4, #8]
 8004012:	e7f4      	b.n	8003ffe <__swsetup_r+0x8e>
 8004014:	2000      	movs	r0, #0
 8004016:	e7f7      	b.n	8004008 <__swsetup_r+0x98>
 8004018:	20000018 	.word	0x20000018

0800401c <_sbrk_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d06      	ldr	r5, [pc, #24]	@ (8004038 <_sbrk_r+0x1c>)
 8004020:	2300      	movs	r3, #0
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc fd4e 	bl	8000ac8 <_sbrk>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_sbrk_r+0x1a>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_sbrk_r+0x1a>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	200002a8 	.word	0x200002a8

0800403c <__swhatbuf_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	460c      	mov	r4, r1
 8004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004044:	2900      	cmp	r1, #0
 8004046:	b096      	sub	sp, #88	@ 0x58
 8004048:	4615      	mov	r5, r2
 800404a:	461e      	mov	r6, r3
 800404c:	da0d      	bge.n	800406a <__swhatbuf_r+0x2e>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	bf14      	ite	ne
 800405a:	2340      	movne	r3, #64	@ 0x40
 800405c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004060:	2000      	movs	r0, #0
 8004062:	6031      	str	r1, [r6, #0]
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	b016      	add	sp, #88	@ 0x58
 8004068:	bd70      	pop	{r4, r5, r6, pc}
 800406a:	466a      	mov	r2, sp
 800406c:	f000 f848 	bl	8004100 <_fstat_r>
 8004070:	2800      	cmp	r0, #0
 8004072:	dbec      	blt.n	800404e <__swhatbuf_r+0x12>
 8004074:	9901      	ldr	r1, [sp, #4]
 8004076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800407a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800407e:	4259      	negs	r1, r3
 8004080:	4159      	adcs	r1, r3
 8004082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004086:	e7eb      	b.n	8004060 <__swhatbuf_r+0x24>

08004088 <__smakebuf_r>:
 8004088:	898b      	ldrh	r3, [r1, #12]
 800408a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800408c:	079d      	lsls	r5, r3, #30
 800408e:	4606      	mov	r6, r0
 8004090:	460c      	mov	r4, r1
 8004092:	d507      	bpl.n	80040a4 <__smakebuf_r+0x1c>
 8004094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	2301      	movs	r3, #1
 800409e:	6163      	str	r3, [r4, #20]
 80040a0:	b003      	add	sp, #12
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a4:	ab01      	add	r3, sp, #4
 80040a6:	466a      	mov	r2, sp
 80040a8:	f7ff ffc8 	bl	800403c <__swhatbuf_r>
 80040ac:	9f00      	ldr	r7, [sp, #0]
 80040ae:	4605      	mov	r5, r0
 80040b0:	4639      	mov	r1, r7
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff fb18 	bl	80036e8 <_malloc_r>
 80040b8:	b948      	cbnz	r0, 80040ce <__smakebuf_r+0x46>
 80040ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040be:	059a      	lsls	r2, r3, #22
 80040c0:	d4ee      	bmi.n	80040a0 <__smakebuf_r+0x18>
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	e7e2      	b.n	8004094 <__smakebuf_r+0xc>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	6020      	str	r0, [r4, #0]
 80040d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d6:	81a3      	strh	r3, [r4, #12]
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80040de:	b15b      	cbz	r3, 80040f8 <__smakebuf_r+0x70>
 80040e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f81d 	bl	8004124 <_isatty_r>
 80040ea:	b128      	cbz	r0, 80040f8 <__smakebuf_r+0x70>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	431d      	orrs	r5, r3
 80040fc:	81a5      	strh	r5, [r4, #12]
 80040fe:	e7cf      	b.n	80040a0 <__smakebuf_r+0x18>

08004100 <_fstat_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_fstat_r+0x20>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	f7fc fcb2 	bl	8000a76 <_fstat>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d102      	bne.n	800411c <_fstat_r+0x1c>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	b103      	cbz	r3, 800411c <_fstat_r+0x1c>
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	200002a8 	.word	0x200002a8

08004124 <_isatty_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d06      	ldr	r5, [pc, #24]	@ (8004140 <_isatty_r+0x1c>)
 8004128:	2300      	movs	r3, #0
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fcb1 	bl	8000a96 <_isatty>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_isatty_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_isatty_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200002a8 	.word	0x200002a8

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
