
02_UART_Tx_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fe0  08002fe0  00003fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff8  08002ff8  0000504c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003000  08003000  0000504c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08003008  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000004c  08003054  0000504c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003054  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a9c  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fb  00000000  00000000  0000db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058c  00000000  00000000  0000fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014fb4  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009285  00000000  00000000  000251a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d2  00000000  00000000  0002e42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c20  00000000  00000000  000b0644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b2264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fc8 	.word	0x08002fc8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08002fc8 	.word	0x08002fc8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b3b      	ldr	r3, [pc, #236]	@ (800060c <MX_GPIO_Init+0x108>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a3a      	ldr	r2, [pc, #232]	@ (800060c <MX_GPIO_Init+0x108>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b38      	ldr	r3, [pc, #224]	@ (800060c <MX_GPIO_Init+0x108>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <MX_GPIO_Init+0x108>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a33      	ldr	r2, [pc, #204]	@ (800060c <MX_GPIO_Init+0x108>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <MX_GPIO_Init+0x108>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <MX_GPIO_Init+0x108>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a2c      	ldr	r2, [pc, #176]	@ (800060c <MX_GPIO_Init+0x108>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <MX_GPIO_Init+0x108>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_GPIO_Init+0x108>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a25      	ldr	r2, [pc, #148]	@ (800060c <MX_GPIO_Init+0x108>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_GPIO_Init+0x108>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	21e0      	movs	r1, #224	@ 0xe0
 800058e:	4820      	ldr	r0, [pc, #128]	@ (8000610 <MX_GPIO_Init+0x10c>)
 8000590:	f001 f87e 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800059a:	481e      	ldr	r0, [pc, #120]	@ (8000614 <MX_GPIO_Init+0x110>)
 800059c:	f001 f878 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80005a6:	481c      	ldr	r0, [pc, #112]	@ (8000618 <MX_GPIO_Init+0x114>)
 80005a8:	f001 f872 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005ac:	23e0      	movs	r3, #224	@ 0xe0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4813      	ldr	r0, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x10c>)
 80005c4:	f000 fee0 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80005c8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_GPIO_Init+0x110>)
 80005e2:	f000 fed1 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80005e6:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x114>)
 8000600:	f000 fec2 	bl	8001388 <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020800 	.word	0x40020800
 8000618:	40020400 	.word	0x40020400

0800061c <ledOn>:
        {GPIOC, GPIO_PIN_7, 1, 0,}
    };


void ledOn(uint8_t num)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0; i < num; i++)
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	e013      	b.n	8000654 <ledOn+0x38>
  {
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <ledOn+0x4c>)
 8000630:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <ledOn+0x4c>)
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	4413      	add	r3, r2
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <ledOn+0x4c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	461a      	mov	r2, r3
 800064a:	f001 f821 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < num; i++)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3301      	adds	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	7bfa      	ldrb	r2, [r7, #15]
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3e7      	bcc.n	800062c <ledOn+0x10>
  }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000

0800066c <ledOff>:

void ledOff(uint8_t num)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0; i < num; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e013      	b.n	80006a4 <ledOff+0x38>
  {
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <ledOff+0x4c>)
 8000680:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <ledOff+0x4c>)
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	8899      	ldrh	r1, [r3, #4]
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <ledOff+0x4c>)
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	79db      	ldrb	r3, [r3, #7]
 8000698:	461a      	mov	r2, r3
 800069a:	f000 fff9 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < num; i++)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	3301      	adds	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	7bfa      	ldrb	r2, [r7, #15]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3e7      	bcc.n	800067c <ledOff+0x10>
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000

080006bc <ledLeftShift>:
    HAL_GPIO_TogglePin(led[i].port, led[i].pinNumber);
  }
}

void ledLeftShift(uint8_t num)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0; i < num; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e027      	b.n	800071c <ledLeftShift+0x60>
  {
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <ledLeftShift+0x74>)
 80006d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <ledLeftShift+0x74>)
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	4413      	add	r3, r2
 80006dc:	8899      	ldrh	r1, [r3, #4]
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <ledLeftShift+0x74>)
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	799b      	ldrb	r3, [r3, #6]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f000 ffd1 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 80006ee:	20c8      	movs	r0, #200	@ 0xc8
 80006f0:	f000 fc82 	bl	8000ff8 <HAL_Delay>
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <ledLeftShift+0x74>)
 80006f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <ledLeftShift+0x74>)
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	8899      	ldrh	r1, [r3, #4]
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	4a09      	ldr	r2, [pc, #36]	@ (8000730 <ledLeftShift+0x74>)
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	4413      	add	r3, r2
 800070e:	79db      	ldrb	r3, [r3, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	f000 ffbd 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < num; i++)
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	3301      	adds	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3d3      	bcc.n	80006cc <ledLeftShift+0x10>
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <ledRightShift>:


void ledRightShift(uint8_t num)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = num; i > 0; i--)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e02d      	b.n	80007a0 <ledRightShift+0x6c>
  {
    HAL_GPIO_WritePin(led[i-1].port, led[i-1].pinNumber, led[i-1].onState);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	3b01      	subs	r3, #1
 8000748:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <ledRightShift+0x7c>)
 800074a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	3b01      	subs	r3, #1
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <ledRightShift+0x7c>)
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	8899      	ldrh	r1, [r3, #4]
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3b01      	subs	r3, #1
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <ledRightShift+0x7c>)
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	461a      	mov	r2, r3
 8000768:	f000 ff92 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	@ 0xc8
 800076e:	f000 fc43 	bl	8000ff8 <HAL_Delay>
    HAL_GPIO_WritePin(led[i-1].port, led[i-1].pinNumber, led[i-1].offState);
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3b01      	subs	r3, #1
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <ledRightShift+0x7c>)
 8000778:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <ledRightShift+0x7c>)
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	4413      	add	r3, r2
 8000786:	8899      	ldrh	r1, [r3, #4]
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <ledRightShift+0x7c>)
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4413      	add	r3, r2
 8000792:	79db      	ldrb	r3, [r3, #7]
 8000794:	461a      	mov	r2, r3
 8000796:	f000 ff7b 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = num; i > 0; i--)
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	3b01      	subs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1ce      	bne.n	8000744 <ledRightShift+0x10>
  }
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000

080007b4 <ledFlower>:


void ledFlower(uint8_t num)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  for(int8_t i = 0; i < num / 2; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e06a      	b.n	800089a <ledFlower+0xe6>
  {
    // 양쪽 LED ON
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 80007c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c8:	4a75      	ldr	r2, [pc, #468]	@ (80009a0 <ledFlower+0x1ec>)
 80007ca:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4a73      	ldr	r2, [pc, #460]	@ (80009a0 <ledFlower+0x1ec>)
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	8899      	ldrh	r1, [r3, #4]
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4a70      	ldr	r2, [pc, #448]	@ (80009a0 <ledFlower+0x1ec>)
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4413      	add	r3, r2
 80007e4:	799b      	ldrb	r3, [r3, #6]
 80007e6:	461a      	mov	r2, r3
 80007e8:	f000 ff52 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[num - 1 - i].port, led[num - 1 - i].pinNumber, led[num - 1 - i].onState);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a6a      	ldr	r2, [pc, #424]	@ (80009a0 <ledFlower+0x1ec>)
 80007f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	4a66      	ldr	r2, [pc, #408]	@ (80009a0 <ledFlower+0x1ec>)
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	8899      	ldrh	r1, [r3, #4]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	4a61      	ldr	r2, [pc, #388]	@ (80009a0 <ledFlower+0x1ec>)
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	461a      	mov	r2, r3
 8000822:	f000 ff35 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000826:	20c8      	movs	r0, #200	@ 0xc8
 8000828:	f000 fbe6 	bl	8000ff8 <HAL_Delay>
    // 양쪽 LED OFF
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	4a5b      	ldr	r2, [pc, #364]	@ (80009a0 <ledFlower+0x1ec>)
 8000832:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4a59      	ldr	r2, [pc, #356]	@ (80009a0 <ledFlower+0x1ec>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	8899      	ldrh	r1, [r3, #4]
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4a56      	ldr	r2, [pc, #344]	@ (80009a0 <ledFlower+0x1ec>)
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4413      	add	r3, r2
 800084c:	79db      	ldrb	r3, [r3, #7]
 800084e:	461a      	mov	r2, r3
 8000850:	f000 ff1e 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[num - 1 - i].port, led[num - 1 - i].pinNumber, led[num - 1 - i].offState);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a50      	ldr	r2, [pc, #320]	@ (80009a0 <ledFlower+0x1ec>)
 8000860:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	4a4c      	ldr	r2, [pc, #304]	@ (80009a0 <ledFlower+0x1ec>)
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	4413      	add	r3, r2
 8000874:	8899      	ldrh	r1, [r3, #4]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a47      	ldr	r2, [pc, #284]	@ (80009a0 <ledFlower+0x1ec>)
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	4413      	add	r3, r2
 8000886:	79db      	ldrb	r3, [r3, #7]
 8000888:	461a      	mov	r2, r3
 800088a:	f000 ff01 	bl	8001690 <HAL_GPIO_WritePin>
  for(int8_t i = 0; i < num / 2; i++)
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	0852      	lsrs	r2, r2, #1
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	4293      	cmp	r3, r2
 80008a6:	db8d      	blt.n	80007c4 <ledFlower+0x10>
  }

  // 양쪽 가운데로
  for(int8_t i = num / 2 - 1;i >= 0;i--)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	73bb      	strb	r3, [r7, #14]
 80008b4:	e06a      	b.n	800098c <ledFlower+0x1d8>
  {
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 80008b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008ba:	4a39      	ldr	r2, [pc, #228]	@ (80009a0 <ledFlower+0x1ec>)
 80008bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008c4:	4a36      	ldr	r2, [pc, #216]	@ (80009a0 <ledFlower+0x1ec>)
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	4413      	add	r3, r2
 80008ca:	8899      	ldrh	r1, [r3, #4]
 80008cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008d0:	4a33      	ldr	r2, [pc, #204]	@ (80009a0 <ledFlower+0x1ec>)
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4413      	add	r3, r2
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	461a      	mov	r2, r3
 80008da:	f000 fed9 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[num - 1 - i].port, led[num - 1 - i].pinNumber, led[num - 1 - i].onState);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4a2d      	ldr	r2, [pc, #180]	@ (80009a0 <ledFlower+0x1ec>)
 80008ea:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	4a29      	ldr	r2, [pc, #164]	@ (80009a0 <ledFlower+0x1ec>)
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4413      	add	r3, r2
 80008fe:	8899      	ldrh	r1, [r3, #4]
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <ledFlower+0x1ec>)
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4413      	add	r3, r2
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	461a      	mov	r2, r3
 8000914:	f000 febc 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000918:	20c8      	movs	r0, #200	@ 0xc8
 800091a:	f000 fb6d 	bl	8000ff8 <HAL_Delay>
    HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 800091e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <ledFlower+0x1ec>)
 8000924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800092c:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <ledFlower+0x1ec>)
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4413      	add	r3, r2
 8000932:	8899      	ldrh	r1, [r3, #4]
 8000934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <ledFlower+0x1ec>)
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	4413      	add	r3, r2
 800093e:	79db      	ldrb	r3, [r3, #7]
 8000940:	461a      	mov	r2, r3
 8000942:	f000 fea5 	bl	8001690 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[num - 1 - i].port, led[num - 1 - i].pinNumber, led[num - 1 - i].offState);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <ledFlower+0x1ec>)
 8000952:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <ledFlower+0x1ec>)
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	8899      	ldrh	r1, [r3, #4]
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <ledFlower+0x1ec>)
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4413      	add	r3, r2
 8000978:	79db      	ldrb	r3, [r3, #7]
 800097a:	461a      	mov	r2, r3
 800097c:	f000 fe88 	bl	8001690 <HAL_GPIO_WritePin>
  for(int8_t i = num / 2 - 1;i >= 0;i--)
 8000980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3b01      	subs	r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
 800098c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da90      	bge.n	80008b6 <ledFlower+0x102>
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <ledEven>:

void ledEven(uint8_t num)   // 짝수 LED ON
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0;i < num;i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e02d      	b.n	8000a10 <ledEven+0x6c>
  {
    if(i % 2 == 0)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d124      	bne.n	8000a0a <ledEven+0x66>
    {
      HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <ledEven+0x80>)
 80009c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	4a16      	ldr	r2, [pc, #88]	@ (8000a24 <ledEven+0x80>)
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	4413      	add	r3, r2
 80009d0:	8899      	ldrh	r1, [r3, #4]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <ledEven+0x80>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	799b      	ldrb	r3, [r3, #6]
 80009dc:	461a      	mov	r2, r3
 80009de:	f000 fe57 	bl	8001690 <HAL_GPIO_WritePin>
      HAL_Delay(200);
 80009e2:	20c8      	movs	r0, #200	@ 0xc8
 80009e4:	f000 fb08 	bl	8000ff8 <HAL_Delay>
      HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <ledEven+0x80>)
 80009ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a24 <ledEven+0x80>)
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	4413      	add	r3, r2
 80009f8:	8899      	ldrh	r1, [r3, #4]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <ledEven+0x80>)
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4413      	add	r3, r2
 8000a02:	79db      	ldrb	r3, [r3, #7]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f000 fe43 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = 0;i < num;i++)
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3cd      	bcc.n	80009b4 <ledEven+0x10>
    }
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000000 	.word	0x20000000

08000a28 <ledOdd>:


void ledOdd(uint8_t num)    // 홀수 LED OFF
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0;i < num;i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e02d      	b.n	8000a94 <ledOdd+0x6c>
  {
    if(i % 2 == 1)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d024      	beq.n	8000a8e <ledOdd+0x66>
    {
      HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	4a18      	ldr	r2, [pc, #96]	@ (8000aa8 <ledOdd+0x80>)
 8000a48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	4a16      	ldr	r2, [pc, #88]	@ (8000aa8 <ledOdd+0x80>)
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4413      	add	r3, r2
 8000a54:	8899      	ldrh	r1, [r3, #4]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <ledOdd+0x80>)
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	799b      	ldrb	r3, [r3, #6]
 8000a60:	461a      	mov	r2, r3
 8000a62:	f000 fe15 	bl	8001690 <HAL_GPIO_WritePin>
      HAL_Delay(200);
 8000a66:	20c8      	movs	r0, #200	@ 0xc8
 8000a68:	f000 fac6 	bl	8000ff8 <HAL_Delay>
      HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <ledOdd+0x80>)
 8000a70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <ledOdd+0x80>)
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	8899      	ldrh	r1, [r3, #4]
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <ledOdd+0x80>)
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4413      	add	r3, r2
 8000a86:	79db      	ldrb	r3, [r3, #7]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f000 fe01 	bl	8001690 <HAL_GPIO_WritePin>
  for(uint8_t i = 0;i < num;i++)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	3301      	adds	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3cd      	bcc.n	8000a38 <ledOdd+0x10>
    }
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a23      	ldr	r2, [pc, #140]	@ (8000b48 <HAL_UART_RxCpltCallback+0x9c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d140      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0x94>
  {
    HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4922      	ldr	r1, [pc, #136]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000ac2:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <HAL_UART_RxCpltCallback+0xa4>)
 8000ac4:	f001 fb1c 	bl	8002100 <HAL_UART_Receive_IT>

    HAL_UART_Transmit_IT(&huart2, &rxData, sizeof(rxData));
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4920      	ldr	r1, [pc, #128]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000acc:	4820      	ldr	r0, [pc, #128]	@ (8000b50 <HAL_UART_RxCpltCallback+0xa4>)
 8000ace:	f001 fae1 	bl	8002094 <HAL_UART_Transmit_IT>
    //HAL_UART_Transmit(&huart2, &rxData, sizeof(rxData), 10000);   // 주로 polling 방식을 사용

    if(rxData == 'a')
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b61      	cmp	r3, #97	@ 0x61
 8000ad8:	d105      	bne.n	8000ae6 <HAL_UART_RxCpltCallback+0x3a>
    {
      // LED ON
      ledOn(8);
 8000ada:	2008      	movs	r0, #8
 8000adc:	f7ff fd9e 	bl	800061c <ledOn>
      mode = 0;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'b')
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b62      	cmp	r3, #98	@ 0x62
 8000aec:	d105      	bne.n	8000afa <HAL_UART_RxCpltCallback+0x4e>
    {
      // LED OFF
      ledOff(8);
 8000aee:	2008      	movs	r0, #8
 8000af0:	f7ff fdbc 	bl	800066c <ledOff>
      mode = 0;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'c')
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b63      	cmp	r3, #99	@ 0x63
 8000b00:	d102      	bne.n	8000b08 <HAL_UART_RxCpltCallback+0x5c>
    {
      // LED LeftShift
      mode = 1;
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'd')
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b64      	cmp	r3, #100	@ 0x64
 8000b0e:	d102      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x6a>
    {
      // LED RightShift
      mode = 2;
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'e')
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b65      	cmp	r3, #101	@ 0x65
 8000b1c:	d102      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x78>
    {
      // LED Flower
      mode = 3;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000b20:	2203      	movs	r2, #3
 8000b22:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'f')
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b66      	cmp	r3, #102	@ 0x66
 8000b2a:	d102      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x86>
    {
      // 짝수 LED ON
      mode = 4;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	701a      	strb	r2, [r3, #0]
    }
    if(rxData == 'g')
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_UART_RxCpltCallback+0xa0>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b67      	cmp	r3, #103	@ 0x67
 8000b38:	d102      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0x94>
    {
      // 홀수 LED ON
      mode = 5;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_UART_RxCpltCallback+0xa8>)
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	20000068 	.word	0x20000068
 8000b50:	2000006c 	.word	0x2000006c
 8000b54:	20000069 	.word	0x20000069

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 f9da 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f852 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff fcce 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b68:	f000 f930 	bl	8000dcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4923      	ldr	r1, [pc, #140]	@ (8000bfc <main+0xa4>)
 8000b70:	4823      	ldr	r0, [pc, #140]	@ (8000c00 <main+0xa8>)
 8000b72:	f001 fac5 	bl	8002100 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(mode == 1)
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <main+0xac>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d108      	bne.n	8000b90 <main+0x38>
    {
      ledLeftShift(8);
 8000b7e:	2008      	movs	r0, #8
 8000b80:	f7ff fd9c 	bl	80006bc <ledLeftShift>
      HAL_Delay(200);
 8000b84:	20c8      	movs	r0, #200	@ 0xc8
 8000b86:	f000 fa37 	bl	8000ff8 <HAL_Delay>
      mode = 0;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <main+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
    }
    if(mode == 2)
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <main+0xac>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d108      	bne.n	8000baa <main+0x52>
    {
      ledRightShift(8);
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f7ff fdcb 	bl	8000734 <ledRightShift>
      HAL_Delay(200);
 8000b9e:	20c8      	movs	r0, #200	@ 0xc8
 8000ba0:	f000 fa2a 	bl	8000ff8 <HAL_Delay>
      mode = 0;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <main+0xac>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
    }
    if(mode == 3)
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <main+0xac>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d108      	bne.n	8000bc4 <main+0x6c>
    {
      ledFlower(8);
 8000bb2:	2008      	movs	r0, #8
 8000bb4:	f7ff fdfe 	bl	80007b4 <ledFlower>
      HAL_Delay(200);
 8000bb8:	20c8      	movs	r0, #200	@ 0xc8
 8000bba:	f000 fa1d 	bl	8000ff8 <HAL_Delay>
      mode = 0;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <main+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
    }
    if(mode == 4)
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <main+0xac>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d108      	bne.n	8000bde <main+0x86>
    {
      ledEven(8);
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f7ff fee9 	bl	80009a4 <ledEven>
      HAL_Delay(200);
 8000bd2:	20c8      	movs	r0, #200	@ 0xc8
 8000bd4:	f000 fa10 	bl	8000ff8 <HAL_Delay>
      mode = 0;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <main+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
    }
    if(mode == 5)
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <main+0xac>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d1c7      	bne.n	8000b76 <main+0x1e>
    {
      ledOdd(8);
 8000be6:	2008      	movs	r0, #8
 8000be8:	f7ff ff1e 	bl	8000a28 <ledOdd>
      HAL_Delay(200);
 8000bec:	20c8      	movs	r0, #200	@ 0xc8
 8000bee:	f000 fa03 	bl	8000ff8 <HAL_Delay>
      mode = 0;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <main+0xac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
    if(mode == 1)
 8000bf8:	e7bd      	b.n	8000b76 <main+0x1e>
 8000bfa:	bf00      	nop
 8000bfc:	20000068 	.word	0x20000068
 8000c00:	2000006c 	.word	0x2000006c
 8000c04:	20000069 	.word	0x20000069

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	@ 0x50
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	2230      	movs	r2, #48	@ 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f9aa 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <SystemClock_Config+0xc8>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <SystemClock_Config+0xc8>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <SystemClock_Config+0xc8>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <SystemClock_Config+0xcc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <SystemClock_Config+0xcc>)
 8000c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <SystemClock_Config+0xcc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c7c:	2364      	movs	r3, #100	@ 0x64
 8000c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fd19 	bl	80016c4 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c98:	f000 f81e 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ff7b 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cc4:	f000 f808 	bl	8000cd8 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3750      	adds	r7, #80	@ 0x50
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f915 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <USART2_IRQHandler+0x10>)
 8000d9a:	f001 f9d7 	bl	800214c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000006c 	.word	0x2000006c

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_USART2_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f001 f8f6 	bl	8001ff4 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f7ff ff63 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000006c 	.word	0x2000006c
 8000e1c:	40004400 	.word	0x40004400

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_UART_MspInit+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d133      	bne.n	8000eaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <HAL_UART_MspInit+0x9c>)
 8000e96:	f000 fa77 	bl	8001388 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2026      	movs	r0, #38	@ 0x26
 8000ea0:	f000 f9a9 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea4:	2026      	movs	r0, #38	@ 0x26
 8000ea6:	f000 f9c2 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec4:	f7ff ff70 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f002 f847 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fe31 	bl	8000b58 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000f04:	08003008 	.word	0x08003008
  ldr r2, =_sbss
 8000f08:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000f0c:	200000b8 	.word	0x200000b8

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f94f 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fecc 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f967 	bl	800124a <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f94:	f000 f92f 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000040 	.word	0x20000040
 8000fb0:	20000048 	.word	0x20000048
 8000fb4:	20000044 	.word	0x20000044

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000048 	.word	0x20000048
 8000fdc:	200000b4 	.word	0x200000b4

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000b4 	.word	0x200000b4

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000048 	.word	0x20000048

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff feb6 	bl	8000fe0 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d008      	beq.n	8001294 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e052      	b.n	800133a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0216 	bic.w	r2, r2, #22
 80012a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <HAL_DMA_Abort+0x62>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0208 	bic.w	r2, r2, #8
 80012d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e4:	e013      	b.n	800130e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e6:	f7ff fe7b 	bl	8000fe0 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d90c      	bls.n	800130e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2220      	movs	r2, #32
 80012f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2203      	movs	r2, #3
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e015      	b.n	800133a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e4      	bne.n	80012e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001320:	223f      	movs	r2, #63	@ 0x3f
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d004      	beq.n	8001360 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2280      	movs	r2, #128	@ 0x80
 800135a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e00c      	b.n	800137a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2205      	movs	r2, #5
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e159      	b.n	8001658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8148 	bne.w	8001652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a2 	beq.w	8001652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b57      	ldr	r3, [pc, #348]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a49      	ldr	r2, [pc, #292]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x202>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a48      	ldr	r2, [pc, #288]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x1fe>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a47      	ldr	r2, [pc, #284]	@ (8001680 <HAL_GPIO_Init+0x2f8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <HAL_GPIO_Init+0x2fc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x1f6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a45      	ldr	r2, [pc, #276]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x1f2>
 8001576:	2304      	movs	r3, #4
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x204>
 800157a:	2307      	movs	r3, #7
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x204>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x204>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x204>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x204>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a24      	ldr	r2, [pc, #144]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_GPIO_Init+0x304>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_GPIO_Init+0x304>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_GPIO_Init+0x304>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a0f      	ldr	r2, [pc, #60]	@ (800168c <HAL_GPIO_Init+0x304>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f aea2 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40013c00 	.word	0x40013c00

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ac:	e003      	b.n	80016b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e267      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016e2:	4b88      	ldr	r3, [pc, #544]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b85      	ldr	r3, [pc, #532]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b82      	ldr	r3, [pc, #520]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b7e      	ldr	r3, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e242      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b76      	ldr	r3, [pc, #472]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a75      	ldr	r2, [pc, #468]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b70      	ldr	r3, [pc, #448]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6f      	ldr	r2, [pc, #444]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6d      	ldr	r3, [pc, #436]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6c      	ldr	r2, [pc, #432]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc30 	bl	8000fe0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc2c 	bl	8000fe0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e207      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc1c 	bl	8000fe0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc18 	bl	8000fe0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	@ 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b51      	ldr	r3, [pc, #324]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017da:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b44      	ldr	r3, [pc, #272]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4937      	ldr	r1, [pc, #220]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_OscConfig+0x244>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fbd1 	bl	8000fe0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fbcd 	bl	8000fe0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4925      	ldr	r1, [pc, #148]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x244>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fbb0 	bl	8000fe0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fbac 	bl	8000fe0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e187      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_RCC_OscConfig+0x248>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb90 	bl	8000fe0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb8c 	bl	8000fe0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e167      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_OscConfig+0x240>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e01b      	b.n	800191c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb79 	bl	8000fe0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e00e      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb75 	bl	8000fe0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d907      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e150      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	42470000 	.word	0x42470000
 800190c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ea      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b81      	ldr	r3, [pc, #516]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a7c      	ldr	r2, [pc, #496]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b77      	ldr	r3, [pc, #476]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b74      	ldr	r3, [pc, #464]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb35 	bl	8000fe0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fb31 	bl	8000fe0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e10c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_OscConfig+0x474>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ea>
 80019a0:	4b64      	ldr	r3, [pc, #400]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a4:	4a63      	ldr	r2, [pc, #396]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30c>
 80019b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d4:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	@ 0x70
 80019dc:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e0:	4a54      	ldr	r2, [pc, #336]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff faf6 	bl	8000fe0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff faf2 	bl	8000fe0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0cb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	4b49      	ldr	r3, [pc, #292]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ee      	beq.n	80019f8 <HAL_RCC_OscConfig+0x334>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fae0 	bl	8000fe0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fadc 	bl	8000fe0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b5      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ee      	bne.n	8001a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a1 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d05c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d141      	bne.n	8001afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fab0 	bl	8000fe0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff faac 	bl	8000fe0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	491b      	ldr	r1, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa85 	bl	8000fe0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fa81 	bl	8000fe0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e05c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x416>
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa6e 	bl	8000fe0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fa6a 	bl	8000fe0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e045      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e038      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f99c 	bl	8000fe0 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f998 	bl	8000fe0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f8fc 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08002fe0 	.word	0x08002fe0
 8001d78:	20000040 	.word	0x20000040
 8001d7c:	20000044 	.word	0x20000044

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b094      	sub	sp, #80	@ 0x50
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b79      	ldr	r3, [pc, #484]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80e1 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e0db      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db8:	e0db      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dbe:	e0d8      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b6d      	ldr	r3, [pc, #436]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	1a51      	subs	r1, r2, r1
 8001e0e:	6139      	str	r1, [r7, #16]
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e24:	4659      	mov	r1, fp
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	4651      	mov	r1, sl
 8001e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2e:	4651      	mov	r1, sl
 8001e30:	018a      	lsls	r2, r1, #6
 8001e32:	4651      	mov	r1, sl
 8001e34:	ebb2 0801 	subs.w	r8, r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb18 0303 	adds.w	r3, r8, r3
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	eb49 0303 	adc.w	r3, r9, r3
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e72:	4629      	mov	r1, r5
 8001e74:	024b      	lsls	r3, r1, #9
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	024a      	lsls	r2, r1, #9
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e90:	f7fe f9a2 	bl	80001d8 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e9c:	e058      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb8:	4642      	mov	r2, r8
 8001eba:	464b      	mov	r3, r9
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	0159      	lsls	r1, r3, #5
 8001ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eca:	0150      	lsls	r0, r2, #5
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	00eb      	lsls	r3, r5, #3
 8001f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f06:	00e2      	lsls	r2, r4, #3
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	18e3      	adds	r3, r4, r3
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	464b      	mov	r3, r9
 8001f14:	eb45 0303 	adc.w	r3, r5, r3
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f26:	4629      	mov	r1, r5
 8001f28:	028b      	lsls	r3, r1, #10
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f30:	4621      	mov	r1, r4
 8001f32:	028a      	lsls	r2, r1, #10
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	61fa      	str	r2, [r7, #28]
 8001f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f44:	f7fe f948 	bl	80001d8 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3750      	adds	r7, #80	@ 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000040 	.word	0x20000040

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08002ff0 	.word	0x08002ff0

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0b5b      	lsrs	r3, r3, #13
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	@ (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08002ff0 	.word	0x08002ff0

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e042      	b.n	800208c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ff00 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fd25 	bl	8002a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d121      	bne.n	80020f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_UART_Transmit_IT+0x26>
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e01a      	b.n	80020f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2221      	movs	r2, #33	@ 0x21
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b20      	cmp	r3, #32
 8002118:	d112      	bne.n	8002140 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_UART_Receive_IT+0x26>
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00b      	b.n	8002142 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	461a      	mov	r2, r3
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fad2 	bl	80026e0 <UART_Start_Receive_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	e000      	b.n	8002142 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0ba      	sub	sp, #232	@ 0xe8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800217e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800218a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_UART_IRQHandler+0x66>
 800219e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fbae 	bl	800290c <UART_Receive_IT>
      return;
 80021b0:	e273      	b.n	800269a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80de 	beq.w	8002378 <HAL_UART_IRQHandler+0x22c>
 80021bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80d1 	beq.w	8002378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_UART_IRQHandler+0xae>
 80021e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_UART_IRQHandler+0xd2>
 8002206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_UART_IRQHandler+0xf6>
 800222a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f043 0204 	orr.w	r2, r3, #4
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_UART_IRQHandler+0x126>
 800224e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800225a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f043 0208 	orr.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 820a 	beq.w	8002690 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800227c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_UART_IRQHandler+0x14e>
 8002288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fb39 	bl	800290c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a4:	2b40      	cmp	r3, #64	@ 0x40
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_UART_IRQHandler+0x17a>
 80022be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04f      	beq.n	8002366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa44 	bl	8002754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d6:	2b40      	cmp	r3, #64	@ 0x40
 80022d8:	d141      	bne.n	800235e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3314      	adds	r3, #20
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022e8:	e853 3f00 	ldrex	r3, [r3]
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800230a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002316:	e841 2300 	strex	r3, r2, [r1]
 800231a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800231e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1d9      	bne.n	80022da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002332:	4a8a      	ldr	r2, [pc, #552]	@ (800255c <HAL_UART_IRQHandler+0x410>)
 8002334:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f801 	bl	8001342 <HAL_DMA_Abort_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002350:	4610      	mov	r0, r2
 8002352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	e00e      	b.n	8002374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f9ac 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	e00a      	b.n	8002374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f9a8 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002364:	e006      	b.n	8002374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f9a4 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002372:	e18d      	b.n	8002690 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002374:	bf00      	nop
    return;
 8002376:	e18b      	b.n	8002690 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 8167 	bne.w	8002650 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8160 	beq.w	8002650 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8159 	beq.w	8002650 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	f040 80ce 	bne.w	8002560 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a9 	beq.w	800252c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f080 80a2 	bcs.w	800252c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023fa:	f000 8088 	beq.w	800250e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800241c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	330c      	adds	r3, #12
 8002426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800242a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800242e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1d9      	bne.n	80023fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800245a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800246e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002472:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002474:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002476:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e1      	bne.n	800244a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800249c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80024b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e3      	bne.n	8002486 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024d6:	e853 3f00 	ldrex	r3, [r3]
 80024da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024de:	f023 0310 	bic.w	r3, r3, #16
 80024e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e3      	bne.n	80024cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe feaa 	bl	8001262 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800251c:	b29b      	uxth	r3, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	b29b      	uxth	r3, r3
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8cf 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800252a:	e0b3      	b.n	8002694 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 80ad 	bne.w	8002694 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002544:	f040 80a6 	bne.w	8002694 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8b7 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
      return;
 800255a:	e09b      	b.n	8002694 <HAL_UART_IRQHandler+0x548>
 800255c:	0800281b 	.word	0x0800281b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002568:	b29b      	uxth	r3, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 808e 	beq.w	8002698 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800257c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8089 	beq.w	8002698 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	330c      	adds	r3, #12
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	e853 3f00 	ldrex	r3, [r3]
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800259c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80025ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025b2:	e841 2300 	strex	r3, r2, [r1]
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e3      	bne.n	8002586 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3314      	adds	r3, #20
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	623b      	str	r3, [r7, #32]
   return(result);
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3314      	adds	r3, #20
 80025de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e3      	bne.n	80025be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	60fb      	str	r3, [r7, #12]
   return(result);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0310 	bic.w	r3, r3, #16
 800261a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002628:	61fa      	str	r2, [r7, #28]
 800262a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	69b9      	ldr	r1, [r7, #24]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	617b      	str	r3, [r7, #20]
   return(result);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e3      	bne.n	8002604 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f83d 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800264e:	e023      	b.n	8002698 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_UART_IRQHandler+0x524>
 800265c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f8e7 	bl	800283c <UART_Transmit_IT>
    return;
 800266e:	e014      	b.n	800269a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_UART_IRQHandler+0x54e>
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f927 	bl	80028dc <UART_EndTransmit_IT>
    return;
 800268e:	e004      	b.n	800269a <HAL_UART_IRQHandler+0x54e>
    return;
 8002690:	bf00      	nop
 8002692:	e002      	b.n	800269a <HAL_UART_IRQHandler+0x54e>
      return;
 8002694:	bf00      	nop
 8002696:	e000      	b.n	800269a <HAL_UART_IRQHandler+0x54e>
      return;
 8002698:	bf00      	nop
  }
}
 800269a:	37e8      	adds	r7, #232	@ 0xe8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2222      	movs	r2, #34	@ 0x22
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002724:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0220 	orr.w	r2, r2, #32
 8002744:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b095      	sub	sp, #84	@ 0x54
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330c      	adds	r3, #12
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800277c:	643a      	str	r2, [r7, #64]	@ 0x40
 800277e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	61fb      	str	r3, [r7, #28]
   return(result);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3314      	adds	r3, #20
 80027ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e5      	bne.n	8002790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d119      	bne.n	8002800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	e853 3f00 	ldrex	r3, [r3]
 80027da:	60bb      	str	r3, [r7, #8]
   return(result);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 0310 	bic.w	r3, r3, #16
 80027e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027ec:	61ba      	str	r2, [r7, #24]
 80027ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	6979      	ldr	r1, [r7, #20]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	613b      	str	r3, [r7, #16]
   return(result);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e5      	bne.n	80027cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800280e:	bf00      	nop
 8002810:	3754      	adds	r7, #84	@ 0x54
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff40 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b21      	cmp	r3, #33	@ 0x21
 800284e:	d13e      	bne.n	80028ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002858:	d114      	bne.n	8002884 <UART_Transmit_IT+0x48>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d110      	bne.n	8002884 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002876:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	1c9a      	adds	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]
 8002882:	e008      	b.n	8002896 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	1c59      	adds	r1, r3, #1
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6211      	str	r1, [r2, #32]
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29b      	uxth	r3, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4619      	mov	r1, r3
 80028a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fecf 	bl	80026a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	@ 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b22      	cmp	r3, #34	@ 0x22
 8002926:	f040 80aa 	bne.w	8002a7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002932:	d115      	bne.n	8002960 <UART_Receive_IT+0x54>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d111      	bne.n	8002960 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	b29a      	uxth	r2, r3
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	@ 0x28
 800295e:	e024      	b.n	80029aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296e:	d007      	beq.n	8002980 <UART_Receive_IT+0x74>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <UART_Receive_IT+0x82>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e008      	b.n	80029a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800299a:	b2da      	uxtb	r2, r3
 800299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4619      	mov	r1, r3
 80029b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d15d      	bne.n	8002a7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0220 	bic.w	r2, r2, #32
 80029cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d135      	bne.n	8002a70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	613b      	str	r3, [r7, #16]
   return(result);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f023 0310 	bic.w	r3, r3, #16
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2a:	623a      	str	r2, [r7, #32]
 8002a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	69f9      	ldr	r1, [r7, #28]
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e5      	bne.n	8002a0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d10a      	bne.n	8002a62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe2d 	bl	80026c8 <HAL_UARTEx_RxEventCallback>
 8002a6e:	e002      	b.n	8002a76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe f81b 	bl	8000aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e002      	b.n	8002a80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3730      	adds	r7, #48	@ 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b0c0      	sub	sp, #256	@ 0x100
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	ea40 0301 	orr.w	r3, r0, r1
 8002ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ae0:	f021 010c 	bic.w	r1, r1, #12
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aee:	430b      	orrs	r3, r1
 8002af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b02:	6999      	ldr	r1, [r3, #24]
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	ea40 0301 	orr.w	r3, r0, r1
 8002b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b8f      	ldr	r3, [pc, #572]	@ (8002d54 <UART_SetConfig+0x2cc>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d005      	beq.n	8002b28 <UART_SetConfig+0xa0>
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b8d      	ldr	r3, [pc, #564]	@ (8002d58 <UART_SetConfig+0x2d0>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d104      	bne.n	8002b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b28:	f7ff fa50 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b30:	e003      	b.n	8002b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b32:	f7ff fa37 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b44:	f040 810c 	bne.w	8002d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	462b      	mov	r3, r5
 8002b5e:	1891      	adds	r1, r2, r2
 8002b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b62:	415b      	adcs	r3, r3
 8002b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	eb12 0801 	adds.w	r8, r2, r1
 8002b70:	4629      	mov	r1, r5
 8002b72:	eb43 0901 	adc.w	r9, r3, r1
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	eb18 0303 	adds.w	r3, r8, r3
 8002b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b98:	462b      	mov	r3, r5
 8002b9a:	eb49 0303 	adc.w	r3, r9, r3
 8002b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	18db      	adds	r3, r3, r3
 8002bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	eb42 0303 	adc.w	r3, r2, r3
 8002bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bcc:	f7fd fb04 	bl	80001d8 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4b61      	ldr	r3, [pc, #388]	@ (8002d5c <UART_SetConfig+0x2d4>)
 8002bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	011c      	lsls	r4, r3, #4
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	1891      	adds	r1, r2, r2
 8002bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bf8:	415b      	adcs	r3, r3
 8002bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c00:	4641      	mov	r1, r8
 8002c02:	eb12 0a01 	adds.w	sl, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb43 0b01 	adc.w	fp, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c20:	4692      	mov	sl, r2
 8002c22:	469b      	mov	fp, r3
 8002c24:	4643      	mov	r3, r8
 8002c26:	eb1a 0303 	adds.w	r3, sl, r3
 8002c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c2e:	464b      	mov	r3, r9
 8002c30:	eb4b 0303 	adc.w	r3, fp, r3
 8002c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	18db      	adds	r3, r3, r3
 8002c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c52:	4613      	mov	r3, r2
 8002c54:	eb42 0303 	adc.w	r3, r2, r3
 8002c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c62:	f7fd fab9 	bl	80001d8 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <UART_SetConfig+0x2d4>)
 8002c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2264      	movs	r2, #100	@ 0x64
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	1acb      	subs	r3, r1, r3
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c82:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <UART_SetConfig+0x2d4>)
 8002c84:	fba3 2302 	umull	r2, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c90:	441c      	add	r4, r3
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cac:	415b      	adcs	r3, r3
 8002cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	1851      	adds	r1, r2, r1
 8002cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cba:	4649      	mov	r1, r9
 8002cbc:	414b      	adcs	r3, r1
 8002cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ccc:	4659      	mov	r1, fp
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	00ca      	lsls	r2, r1, #3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ce8:	464b      	mov	r3, r9
 8002cea:	460a      	mov	r2, r1
 8002cec:	eb42 0303 	adc.w	r3, r2, r3
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d08:	460b      	mov	r3, r1
 8002d0a:	18db      	adds	r3, r3, r3
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d0e:	4613      	mov	r3, r2
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d1e:	f7fd fa5b 	bl	80001d8 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <UART_SetConfig+0x2d4>)
 8002d28:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	2164      	movs	r1, #100	@ 0x64
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	3332      	adds	r3, #50	@ 0x32
 8002d3a:	4a08      	ldr	r2, [pc, #32]	@ (8002d5c <UART_SetConfig+0x2d4>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	f003 0207 	and.w	r2, r3, #7
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4422      	add	r2, r4
 8002d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d50:	e106      	b.n	8002f60 <UART_SetConfig+0x4d8>
 8002d52:	bf00      	nop
 8002d54:	40011000 	.word	0x40011000
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d72:	4642      	mov	r2, r8
 8002d74:	464b      	mov	r3, r9
 8002d76:	1891      	adds	r1, r2, r2
 8002d78:	6239      	str	r1, [r7, #32]
 8002d7a:	415b      	adcs	r3, r3
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d82:	4641      	mov	r1, r8
 8002d84:	1854      	adds	r4, r2, r1
 8002d86:	4649      	mov	r1, r9
 8002d88:	eb43 0501 	adc.w	r5, r3, r1
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	00eb      	lsls	r3, r5, #3
 8002d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9a:	00e2      	lsls	r2, r4, #3
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	18e3      	adds	r3, r4, r3
 8002da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002da8:	464b      	mov	r3, r9
 8002daa:	eb45 0303 	adc.w	r3, r5, r3
 8002dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dce:	4629      	mov	r1, r5
 8002dd0:	008b      	lsls	r3, r1, #2
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd8:	4621      	mov	r1, r4
 8002dda:	008a      	lsls	r2, r1, #2
 8002ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002de0:	f7fd f9fa 	bl	80001d8 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4b60      	ldr	r3, [pc, #384]	@ (8002f6c <UART_SetConfig+0x4e4>)
 8002dea:	fba3 2302 	umull	r2, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	011c      	lsls	r4, r3, #4
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	61b9      	str	r1, [r7, #24]
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e14:	4641      	mov	r1, r8
 8002e16:	1851      	adds	r1, r2, r1
 8002e18:	6139      	str	r1, [r7, #16]
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	414b      	adcs	r3, r1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	00cb      	lsls	r3, r1, #3
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e36:	4651      	mov	r1, sl
 8002e38:	00ca      	lsls	r2, r1, #3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4642      	mov	r2, r8
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e48:	464b      	mov	r3, r9
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	008b      	lsls	r3, r1, #2
 8002e70:	4641      	mov	r1, r8
 8002e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e76:	4641      	mov	r1, r8
 8002e78:	008a      	lsls	r2, r1, #2
 8002e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e7e:	f7fd f9ab 	bl	80001d8 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	4b38      	ldr	r3, [pc, #224]	@ (8002f6c <UART_SetConfig+0x4e4>)
 8002e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2264      	movs	r2, #100	@ 0x64
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	1acb      	subs	r3, r1, r3
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	3332      	adds	r3, #50	@ 0x32
 8002e9c:	4a33      	ldr	r2, [pc, #204]	@ (8002f6c <UART_SetConfig+0x4e4>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	441c      	add	r4, r3
 8002eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eae:	2200      	movs	r2, #0
 8002eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	4641      	mov	r1, r8
 8002eca:	1851      	adds	r1, r2, r1
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	4649      	mov	r1, r9
 8002ed0:	414b      	adcs	r3, r1
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	00cb      	lsls	r3, r1, #3
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eea:	4651      	mov	r1, sl
 8002eec:	00ca      	lsls	r2, r1, #3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002efa:	464b      	mov	r3, r9
 8002efc:	460a      	mov	r2, r1
 8002efe:	eb42 0303 	adc.w	r3, r2, r3
 8002f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	008b      	lsls	r3, r1, #2
 8002f20:	4641      	mov	r1, r8
 8002f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f26:	4641      	mov	r1, r8
 8002f28:	008a      	lsls	r2, r1, #2
 8002f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f2e:	f7fd f953 	bl	80001d8 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <UART_SetConfig+0x4e4>)
 8002f38:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	2164      	movs	r1, #100	@ 0x64
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	3332      	adds	r3, #50	@ 0x32
 8002f4a:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <UART_SetConfig+0x4e4>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4422      	add	r2, r4
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f66:	46bd      	mov	sp, r7
 8002f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6c:	51eb851f 	.word	0x51eb851f

08002f70 <memset>:
 8002f70:	4402      	add	r2, r0
 8002f72:	4603      	mov	r3, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4d0d      	ldr	r5, [pc, #52]	@ (8002fb8 <__libc_init_array+0x38>)
 8002f84:	4c0d      	ldr	r4, [pc, #52]	@ (8002fbc <__libc_init_array+0x3c>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	4d0b      	ldr	r5, [pc, #44]	@ (8002fc0 <__libc_init_array+0x40>)
 8002f92:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc4 <__libc_init_array+0x44>)
 8002f94:	f000 f818 	bl	8002fc8 <_init>
 8002f98:	1b64      	subs	r4, r4, r5
 8002f9a:	10a4      	asrs	r4, r4, #2
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08003000 	.word	0x08003000
 8002fbc:	08003000 	.word	0x08003000
 8002fc0:	08003000 	.word	0x08003000
 8002fc4:	08003004 	.word	0x08003004

08002fc8 <_init>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr

08002fd4 <_fini>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr
