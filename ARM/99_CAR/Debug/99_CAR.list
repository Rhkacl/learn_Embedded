
99_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085bc  080085bc  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085c4  080085c4  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080085cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d88  20000064  08008630  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dec  08008630  0000adec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c432  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e2  00000000  00000000  000264c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117e  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c4c  00000000  00000000  0002d0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a199  00000000  00000000  00046d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099448  00000000  00000000  00060eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa2fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  000fa340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00100248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084a8 	.word	0x080084a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080084a8 	.word	0x080084a8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HCSR04_TRIG>:
#define TRIG3_PIN    GPIO_PIN_2
#define TRIG4_PIN    GPIO_PIN_3


void HCSR04_TRIG(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TRIG_PORT, TRIG1_PIN, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2101      	movs	r1, #1
 8000514:	4831      	ldr	r0, [pc, #196]	@ (80005dc <HCSR04_TRIG+0xd0>)
 8000516:	f002 f993 	bl	8002840 <HAL_GPIO_WritePin>
  delay_us(10);
 800051a:	200a      	movs	r0, #10
 800051c:	f000 f910 	bl	8000740 <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG1_PIN, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	482d      	ldr	r0, [pc, #180]	@ (80005dc <HCSR04_TRIG+0xd0>)
 8000526:	f002 f98b 	bl	8002840 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800052a:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	68da      	ldr	r2, [r3, #12]
 8000530:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f042 0202 	orr.w	r2, r2, #2
 8000538:	60da      	str	r2, [r3, #12]

  delay_us(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053e:	f000 f8ff 	bl	8000740 <delay_us>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG2_PIN, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2102      	movs	r1, #2
 8000546:	4825      	ldr	r0, [pc, #148]	@ (80005dc <HCSR04_TRIG+0xd0>)
 8000548:	f002 f97a 	bl	8002840 <HAL_GPIO_WritePin>
  delay_us(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f000 f8f7 	bl	8000740 <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG2_PIN, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2102      	movs	r1, #2
 8000556:	4821      	ldr	r0, [pc, #132]	@ (80005dc <HCSR04_TRIG+0xd0>)
 8000558:	f002 f972 	bl	8002840 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f042 0204 	orr.w	r2, r2, #4
 800056a:	60da      	str	r2, [r3, #12]

  delay_us(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000570:	f000 f8e6 	bl	8000740 <delay_us>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG3_PIN, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2104      	movs	r1, #4
 8000578:	4818      	ldr	r0, [pc, #96]	@ (80005dc <HCSR04_TRIG+0xd0>)
 800057a:	f002 f961 	bl	8002840 <HAL_GPIO_WritePin>
  delay_us(10);
 800057e:	200a      	movs	r0, #10
 8000580:	f000 f8de 	bl	8000740 <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG3_PIN, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4814      	ldr	r0, [pc, #80]	@ (80005dc <HCSR04_TRIG+0xd0>)
 800058a:	f002 f959 	bl	8002840 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0208 	orr.w	r2, r2, #8
 800059c:	60da      	str	r2, [r3, #12]

  delay_us(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a2:	f000 f8cd 	bl	8000740 <delay_us>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG4_PIN, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2108      	movs	r1, #8
 80005aa:	480c      	ldr	r0, [pc, #48]	@ (80005dc <HCSR04_TRIG+0xd0>)
 80005ac:	f002 f948 	bl	8002840 <HAL_GPIO_WritePin>
  delay_us(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 f8c5 	bl	8000740 <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG4_PIN, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <HCSR04_TRIG+0xd0>)
 80005bc:	f002 f940 	bl	8002840 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC4);
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HCSR04_TRIG+0xd4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f042 0210 	orr.w	r2, r2, #16
 80005ce:	60da      	str	r2, [r3, #12]

  delay_us(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d4:	f000 f8b4 	bl	8000740 <delay_us>

  //__HAL_TIM_SET_COUNTER(&htim4, 0);
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020800 	.word	0x40020800
 80005e0:	200001a0 	.word	0x200001a0

080005e4 <Read_BTN1>:

#include "button.h"

uint8_t Read_BTN1()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80005e8:	2120      	movs	r1, #32
 80005ea:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <Read_BTN1+0x14>)
 80005ec:	f002 f910 	bl	8002810 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40020800 	.word	0x40020800

080005fc <Read_BTN2>:

uint8_t Read_BTN2()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000600:	2140      	movs	r1, #64	@ 0x40
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <Read_BTN2+0x14>)
 8000604:	f002 f904 	bl	8002810 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020800 	.word	0x40020800

08000614 <Buzzer_Init>:

#include "buzzer.h"


void Buzzer_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  Buzzer_Off();
 8000618:	f000 f842 	bl	80006a0 <Buzzer_Off>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <Buzzer_On>:

void Buzzer_On(uint16_t frequency)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  uint32_t timer_freq = 25000;  // 25khz
 800062a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800062e:	60bb      	str	r3, [r7, #8]

  // 주파수 범위 제한
  if(frequency < 25) frequency = 25;
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	2b18      	cmp	r3, #24
 8000634:	d801      	bhi.n	800063a <Buzzer_On+0x1a>
 8000636:	2319      	movs	r3, #25
 8000638:	80fb      	strh	r3, [r7, #6]
  if(frequency > 12500) frequency = 12500;
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8000640:	4293      	cmp	r3, r2
 8000642:	d902      	bls.n	800064a <Buzzer_On+0x2a>
 8000644:	f243 03d4 	movw	r3, #12500	@ 0x30d4
 8000648:	80fb      	strh	r3, [r7, #6]

  uint32_t arr_Value = (timer_freq / frequency) - 1;
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]

  // ARR 값 범위 제한
  if(arr_Value < 1) arr_Value = 1;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <Buzzer_On+0x40>
 800065c:	2301      	movs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
  if(arr_Value > 65535) arr_Value = 65535;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000666:	d302      	bcc.n	800066e <Buzzer_On+0x4e>
 8000668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800066c:	60fb      	str	r3, [r7, #12]

  // 타이머 설정
  __HAL_TIM_SET_AUTORELOAD(&htim2, arr_Value);
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <Buzzer_On+0x7c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000676:	4a09      	ldr	r2, [pc, #36]	@ (800069c <Buzzer_On+0x7c>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arr_Value / 2);  // 50% duty
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <Buzzer_On+0x7c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	0852      	lsrs	r2, r2, #1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34

  // counter reset
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <Buzzer_On+0x7c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000110 	.word	0x20000110

080006a0 <Buzzer_Off>:

void Buzzer_Off(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  // duty -> 0
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <Buzzer_Off+0x18>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000110 	.word	0x20000110

080006bc <Calculate_Beep_Interval>:
  Buzzer_Off();
}

// 거리에 따른 BEEP 간격 계산
uint16_t Calculate_Beep_Interval(uint8_t distance)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if(distance >= DISTANCE_FAR)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b27      	cmp	r3, #39	@ 0x27
 80006ca:	d902      	bls.n	80006d2 <Calculate_Beep_Interval+0x16>
  {
    return BEEP_INTERVAL_FAR;
 80006cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006d0:	e016      	b.n	8000700 <Calculate_Beep_Interval+0x44>
  }
  else if(distance >= DISTANCE_MID)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b1d      	cmp	r3, #29
 80006d6:	d902      	bls.n	80006de <Calculate_Beep_Interval+0x22>
  {
    return BEEP_INTERVAL_MID;
 80006d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006dc:	e010      	b.n	8000700 <Calculate_Beep_Interval+0x44>
  }
  else if(distance >= DISTANCE_NEAR)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b13      	cmp	r3, #19
 80006e2:	d902      	bls.n	80006ea <Calculate_Beep_Interval+0x2e>
  {
    return BEEP_INTERVAL_NEAR;
 80006e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006e8:	e00a      	b.n	8000700 <Calculate_Beep_Interval+0x44>
  }
  else if(distance >= DISTANCE_VNEAR)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d901      	bls.n	80006f4 <Calculate_Beep_Interval+0x38>
  {
    return BEEP_INTERVAL_VNEAR;
 80006f0:	23c8      	movs	r3, #200	@ 0xc8
 80006f2:	e005      	b.n	8000700 <Calculate_Beep_Interval+0x44>
  }
  else if(distance >= DISTANCE_CRITICAL)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	d901      	bls.n	80006fe <Calculate_Beep_Interval+0x42>
  {
    return BEEP_INTERVAL_CRITICAL;
 80006fa:	2364      	movs	r3, #100	@ 0x64
 80006fc:	e000      	b.n	8000700 <Calculate_Beep_Interval+0x44>
  }
  else
  {
    return 50;  // 매우 위험
 80006fe:	2332      	movs	r3, #50	@ 0x32
  }
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <Calculate_Beep_Frequency>:

// 거리에 따른 BEEP 주파수 계산
uint16_t Calculate_Beep_Frequency(uint8_t distance)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if(distance >= DISTANCE_FAR)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b27      	cmp	r3, #39	@ 0x27
 800071a:	d902      	bls.n	8000722 <Calculate_Beep_Frequency+0x16>
  {
    return BUZZER_FREQ;
 800071c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000720:	e007      	b.n	8000732 <Calculate_Beep_Frequency+0x26>
  }
  else if(distance >= DISTANCE_MID)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b1d      	cmp	r3, #29
 8000726:	d902      	bls.n	800072e <Calculate_Beep_Frequency+0x22>
  {
    return BUZZER_FREQ;
 8000728:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800072c:	e001      	b.n	8000732 <Calculate_Beep_Frequency+0x26>
  }
  else
  {
    return BUZZER_FREQ;
 800072e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
  }
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
  // 호출하면 0부터 시작
  __HAL_TIM_SET_COUNTER(&htim11, 0);    // __ 이거 붙은 애들은 함수가 아닌 매크로
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <delay_us+0x30>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 8000752:	bf00      	nop
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <delay_us+0x30>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d3f9      	bcc.n	8000754 <delay_us+0x14>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200001e8 	.word	0x200001e8

08000774 <HAL_UART_RxCpltCallback>:

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a59      	ldr	r2, [pc, #356]	@ (80008e8 <HAL_UART_RxCpltCallback+0x174>)
 8000782:	4293      	cmp	r3, r2
 8000784:	f040 80ab 	bne.w	80008de <HAL_UART_RxCpltCallback+0x16a>
		{
			if (rxBt == 'w')
 8000788:	4b58      	ldr	r3, [pc, #352]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b77      	cmp	r3, #119	@ 0x77
 800078e:	d10f      	bne.n	80007b0 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 8000790:	2305      	movs	r3, #5
 8000792:	2201      	movs	r2, #1
 8000794:	4955      	ldr	r1, [pc, #340]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 8000796:	4856      	ldr	r0, [pc, #344]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 8000798:	f003 ff84 	bl	80046a4 <HAL_UART_Transmit>
				rxFlag = 1;
 800079c:	4b55      	ldr	r3, [pc, #340]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
				currentState = FORWARD;
 80007a2:	4b55      	ldr	r3, [pc, #340]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
				turn = None;
 80007a8:	4b54      	ldr	r3, [pc, #336]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	e091      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
			}
			else if (rxBt == 's')
 80007b0:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b73      	cmp	r3, #115	@ 0x73
 80007b6:	d10f      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x64>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 80007b8:	2305      	movs	r3, #5
 80007ba:	2201      	movs	r2, #1
 80007bc:	494b      	ldr	r1, [pc, #300]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 80007be:	484c      	ldr	r0, [pc, #304]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 80007c0:	f003 ff70 	bl	80046a4 <HAL_UART_Transmit>
				rxFlag = 1;
 80007c4:	4b4b      	ldr	r3, [pc, #300]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
				currentState = BACKWARD;
 80007ca:	4b4b      	ldr	r3, [pc, #300]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	701a      	strb	r2, [r3, #0]
				turn = None;
 80007d0:	4b4a      	ldr	r3, [pc, #296]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e07d      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
			}
			else if (rxBt == 'a')
 80007d8:	4b44      	ldr	r3, [pc, #272]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b61      	cmp	r3, #97	@ 0x61
 80007de:	d11e      	bne.n	800081e <HAL_UART_RxCpltCallback+0xaa>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 80007e0:	2305      	movs	r3, #5
 80007e2:	2201      	movs	r2, #1
 80007e4:	4941      	ldr	r1, [pc, #260]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 80007e6:	4842      	ldr	r0, [pc, #264]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 80007e8:	f003 ff5c 	bl	80046a4 <HAL_UART_Transmit>
				rxFlag = 1;
 80007ec:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
				if (currentState == FORWARD)
 80007f2:	4b41      	ldr	r3, [pc, #260]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d106      	bne.n	8000808 <HAL_UART_RxCpltCallback+0x94>
				{
					currentState = FORWARD;
 80007fa:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
					turn = Left;
 8000800:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e065      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				}
				else if (currentState == BACKWARD)
 8000808:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d161      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				{
					currentState = BACKWARD;
 8000810:	4b39      	ldr	r3, [pc, #228]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 8000812:	2202      	movs	r2, #2
 8000814:	701a      	strb	r2, [r3, #0]
					turn = Left;
 8000816:	4b39      	ldr	r3, [pc, #228]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e05a      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				}
			}
			else if (rxBt == 'd')
 800081e:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b64      	cmp	r3, #100	@ 0x64
 8000824:	d11e      	bne.n	8000864 <HAL_UART_RxCpltCallback+0xf0>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 8000826:	2305      	movs	r3, #5
 8000828:	2201      	movs	r2, #1
 800082a:	4930      	ldr	r1, [pc, #192]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 800082c:	4830      	ldr	r0, [pc, #192]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 800082e:	f003 ff39 	bl	80046a4 <HAL_UART_Transmit>
				rxFlag = 1;
 8000832:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
				if (currentState == FORWARD)
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d106      	bne.n	800084e <HAL_UART_RxCpltCallback+0xda>
				{
					currentState = FORWARD;
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
					turn = Right;
 8000846:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 8000848:	2202      	movs	r2, #2
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e042      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				}
				else if (currentState == BACKWARD)
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d13e      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				{
					currentState = BACKWARD;
 8000856:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 8000858:	2202      	movs	r2, #2
 800085a:	701a      	strb	r2, [r3, #0]
					turn = Right;
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	e037      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
				}
			}
			else if (rxBt == 'q')
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b71      	cmp	r3, #113	@ 0x71
 800086a:	d10f      	bne.n	800088c <HAL_UART_RxCpltCallback+0x118>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 800086c:	2305      	movs	r3, #5
 800086e:	2201      	movs	r2, #1
 8000870:	491e      	ldr	r1, [pc, #120]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 8000872:	481f      	ldr	r0, [pc, #124]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 8000874:	f003 ff16 	bl	80046a4 <HAL_UART_Transmit>
				rxFlag = 1;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
				currentState = STOP;
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
				turn = None;
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e023      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
			}
			else if (rxBt == 'z')
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b7a      	cmp	r3, #122	@ 0x7a
 8000892:	d11f      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x160>
			{
				HAL_UART_Transmit(&huart1, &rxBt, sizeof(rxBt), 5);
 8000894:	2305      	movs	r3, #5
 8000896:	2201      	movs	r2, #1
 8000898:	4914      	ldr	r1, [pc, #80]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 800089a:	4815      	ldr	r0, [pc, #84]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 800089c:	f003 ff02 	bl	80046a4 <HAL_UART_Transmit>
				autoFlag = !autoFlag;	// 토글 방식
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_UART_RxCpltCallback+0x18c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf0c      	ite	eq
 80008a8:	2301      	moveq	r3, #1
 80008aa:	2300      	movne	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_UART_RxCpltCallback+0x18c>)
 80008b2:	701a      	strb	r2, [r3, #0]
				rxFlag = (autoFlag == 0);	// 수동일 경우 수신 처리
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_UART_RxCpltCallback+0x18c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf0c      	ite	eq
 80008bc:	2301      	moveq	r3, #1
 80008be:	2300      	movne	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <HAL_UART_RxCpltCallback+0x180>)
 80008c6:	701a      	strb	r2, [r3, #0]
				currentState = STOP;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HAL_UART_RxCpltCallback+0x184>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
				turn = None;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_UART_RxCpltCallback+0x188>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart1, &rxBt, sizeof(rxBt));
 80008d4:	2201      	movs	r2, #1
 80008d6:	4905      	ldr	r1, [pc, #20]	@ (80008ec <HAL_UART_RxCpltCallback+0x178>)
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <HAL_UART_RxCpltCallback+0x17c>)
 80008da:	f003 ff6e 	bl	80047ba <HAL_UART_Receive_IT>
		}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40011000 	.word	0x40011000
 80008ec:	200000c4 	.word	0x200000c4
 80008f0:	20000230 	.word	0x20000230
 80008f4:	2000008a 	.word	0x2000008a
 80008f8:	2000008b 	.word	0x2000008b
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	20000000 	.word	0x20000000

08000904 <HAL_TIM_IC_CaptureCallback>:
//      HAL_UART_Receive_IT(&huart1, &txData, sizeof(txData));
//    }
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7f1b      	ldrb	r3, [r3, #28]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d178      	bne.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if(captureFlag_1 == 0)  // 아직 캡처를 안했다면
 8000914:	4b8d      	ldr	r3, [pc, #564]	@ (8000b4c <HAL_TIM_IC_CaptureCallback+0x248>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d11b      	bne.n	8000954 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Value1_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800091c:	2100      	movs	r1, #0
 800091e:	488c      	ldr	r0, [pc, #560]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000920:	f003 fa36 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b8a      	ldr	r3, [pc, #552]	@ (8000b54 <HAL_TIM_IC_CaptureCallback+0x250>)
 800092a:	801a      	strh	r2, [r3, #0]
			captureFlag_1 = 1;    // 캡처 했음 !!!
 800092c:	4b87      	ldr	r3, [pc, #540]	@ (8000b4c <HAL_TIM_IC_CaptureCallback+0x248>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
			// 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000932:	4b87      	ldr	r3, [pc, #540]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6a1a      	ldr	r2, [r3, #32]
 8000938:	4b85      	ldr	r3, [pc, #532]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 020a 	bic.w	r2, r2, #10
 8000940:	621a      	str	r2, [r3, #32]
 8000942:	4b83      	ldr	r3, [pc, #524]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6a1a      	ldr	r2, [r3, #32]
 8000948:	4b81      	ldr	r3, [pc, #516]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f042 0202 	orr.w	r2, r2, #2
 8000950:	621a      	str	r2, [r3, #32]
 8000952:	e058      	b.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x102>
		}
		else if(captureFlag_1 == 1) // 캡처를 했다면
 8000954:	4b7d      	ldr	r3, [pc, #500]	@ (8000b4c <HAL_TIM_IC_CaptureCallback+0x248>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d154      	bne.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x102>
		{
			IC_Value2_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800095c:	2100      	movs	r1, #0
 800095e:	487c      	ldr	r0, [pc, #496]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000960:	f003 fa16 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000964:	4603      	mov	r3, r0
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b7b      	ldr	r3, [pc, #492]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x254>)
 800096a:	801a      	strh	r2, [r3, #0]


			if(IC_Value2_R > IC_Value1_R)
 800096c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x254>)
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	4b78      	ldr	r3, [pc, #480]	@ (8000b54 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d908      	bls.n	800098a <HAL_TIM_IC_CaptureCallback+0x86>
			{
				echoTime_R = IC_Value2_R - IC_Value1_R;
 8000978:	4b77      	ldr	r3, [pc, #476]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x254>)
 800097a:	881a      	ldrh	r2, [r3, #0]
 800097c:	4b75      	ldr	r3, [pc, #468]	@ (8000b54 <HAL_TIM_IC_CaptureCallback+0x250>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b75      	ldr	r3, [pc, #468]	@ (8000b5c <HAL_TIM_IC_CaptureCallback+0x258>)
 8000986:	801a      	strh	r2, [r3, #0]
 8000988:	e00f      	b.n	80009aa <HAL_TIM_IC_CaptureCallback+0xa6>
			}
			else if(IC_Value1_R > IC_Value2_R)
 800098a:	4b72      	ldr	r3, [pc, #456]	@ (8000b54 <HAL_TIM_IC_CaptureCallback+0x250>)
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	4b72      	ldr	r3, [pc, #456]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d909      	bls.n	80009aa <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				echoTime_R = (0xffff - IC_Value1_R) + IC_Value2_R;
 8000996:	4b70      	ldr	r3, [pc, #448]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	4b6e      	ldr	r3, [pc, #440]	@ (8000b54 <HAL_TIM_IC_CaptureCallback+0x250>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	3b01      	subs	r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b6d      	ldr	r3, [pc, #436]	@ (8000b5c <HAL_TIM_IC_CaptureCallback+0x258>)
 80009a8:	801a      	strh	r2, [r3, #0]
			}
			distance_R = echoTime_R / 58;
 80009aa:	4b6c      	ldr	r3, [pc, #432]	@ (8000b5c <HAL_TIM_IC_CaptureCallback+0x258>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4a6c      	ldr	r2, [pc, #432]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b6a      	ldr	r3, [pc, #424]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]

			if(distance_R < 2 || distance_R > 400)
 80009bc:	4b69      	ldr	r3, [pc, #420]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x260>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d904      	bls.n	80009ce <HAL_TIM_IC_CaptureCallback+0xca>
 80009c4:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x260>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80009cc:	d902      	bls.n	80009d4 <HAL_TIM_IC_CaptureCallback+0xd0>
			{
				distance_R = 0;
 80009ce:	4b65      	ldr	r3, [pc, #404]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x260>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
			}

			captureFlag_1 = 0;
 80009d4:	4b5d      	ldr	r3, [pc, #372]	@ (8000b4c <HAL_TIM_IC_CaptureCallback+0x248>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80009da:	4b5d      	ldr	r3, [pc, #372]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a1a      	ldr	r2, [r3, #32]
 80009e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f022 020a 	bic.w	r2, r2, #10
 80009e8:	621a      	str	r2, [r3, #32]
 80009ea:	4b59      	ldr	r3, [pc, #356]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b58      	ldr	r3, [pc, #352]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a12      	ldr	r2, [r2, #32]
 80009f4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80009f6:	4b56      	ldr	r3, [pc, #344]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	4b54      	ldr	r3, [pc, #336]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 0202 	bic.w	r2, r2, #2
 8000a04:	60da      	str	r2, [r3, #12]

		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7f1b      	ldrb	r3, [r3, #28]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d178      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x1fc>
	{
		if(captureFlag_2 == 0)  // 아직 캡처를 안했다면
 8000a0e:	4b56      	ldr	r3, [pc, #344]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d11b      	bne.n	8000a4e <HAL_TIM_IC_CaptureCallback+0x14a>
		{
			IC_Value1_M = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000a16:	2104      	movs	r1, #4
 8000a18:	484d      	ldr	r0, [pc, #308]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a1a:	f003 f9b9 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b52      	ldr	r3, [pc, #328]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a24:	801a      	strh	r2, [r3, #0]
			captureFlag_2 = 1;    // 캡처 했음 !!!
 8000a26:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
			// 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a2c:	4b48      	ldr	r3, [pc, #288]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6a1a      	ldr	r2, [r3, #32]
 8000a32:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000a3a:	621a      	str	r2, [r3, #32]
 8000a3c:	4b44      	ldr	r3, [pc, #272]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6a1a      	ldr	r2, [r3, #32]
 8000a42:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0220 	orr.w	r2, r2, #32
 8000a4a:	621a      	str	r2, [r3, #32]
 8000a4c:	e058      	b.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x1fc>
		}
		else if(captureFlag_2 == 1) // 캡처를 했다면
 8000a4e:	4b46      	ldr	r3, [pc, #280]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d154      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x1fc>
		{
			IC_Value2_M = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000a56:	2104      	movs	r1, #4
 8000a58:	483d      	ldr	r0, [pc, #244]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a5a:	f003 f999 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b43      	ldr	r3, [pc, #268]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a64:	801a      	strh	r2, [r3, #0]


			if(IC_Value2_M > IC_Value1_M)
 8000a66:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d908      	bls.n	8000a84 <HAL_TIM_IC_CaptureCallback+0x180>
			{
				echoTime_M = IC_Value2_M - IC_Value1_M;
 8000a72:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	4b3d      	ldr	r3, [pc, #244]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b74 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000a80:	801a      	strh	r2, [r3, #0]
 8000a82:	e00f      	b.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x1a0>
			}
			else if(IC_Value1_M > IC_Value2_M)
 8000a84:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a86:	881a      	ldrh	r2, [r3, #0]
 8000a88:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d909      	bls.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x1a0>
			{
				echoTime_M = (0xffff - IC_Value1_M) + IC_Value2_M;
 8000a90:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a92:	881a      	ldrh	r2, [r3, #0]
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000aa2:	801a      	strh	r2, [r3, #0]
			}
			distance_M = echoTime_M / 58;
 8000aa4:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ab4:	801a      	strh	r2, [r3, #0]

			if(distance_M < 2 || distance_M > 400)
 8000ab6:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d904      	bls.n	8000ac8 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8000abe:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000ac6:	d902      	bls.n	8000ace <HAL_TIM_IC_CaptureCallback+0x1ca>
			{
				distance_M = 0;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
			}

			captureFlag_2 = 0;
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6a1a      	ldr	r2, [r3, #32]
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a12      	ldr	r2, [r2, #32]
 8000aee:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	60da      	str	r2, [r3, #12]

		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7f1b      	ldrb	r3, [r3, #28]
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	f040 8096 	bne.w	8000c36 <HAL_TIM_IC_CaptureCallback+0x332>
	{
		if(captureFlag_3 == 0)  // 아직 캡처를 안했다면
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d138      	bne.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x280>
		{
			IC_Value1_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8000b12:	2108      	movs	r1, #8
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b16:	f003 f93b 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b20:	801a      	strh	r2, [r3, #0]
			captureFlag_3 = 1;    // 캡처 했음 !!!
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
			// 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6a1a      	ldr	r2, [r3, #32]
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000b36:	621a      	str	r2, [r3, #32]
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6a1a      	ldr	r2, [r3, #32]
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b46:	621a      	str	r2, [r3, #32]
 8000b48:	e075      	b.n	8000c36 <HAL_TIM_IC_CaptureCallback+0x332>
 8000b4a:	bf00      	nop
 8000b4c:	200000a6 	.word	0x200000a6
 8000b50:	200001a0 	.word	0x200001a0
 8000b54:	20000092 	.word	0x20000092
 8000b58:	2000009a 	.word	0x2000009a
 8000b5c:	200000a2 	.word	0x200000a2
 8000b60:	8d3dcb09 	.word	0x8d3dcb09
 8000b64:	200000ae 	.word	0x200000ae
 8000b68:	200000a7 	.word	0x200000a7
 8000b6c:	20000090 	.word	0x20000090
 8000b70:	20000098 	.word	0x20000098
 8000b74:	200000a0 	.word	0x200000a0
 8000b78:	200000ac 	.word	0x200000ac
 8000b7c:	200000a8 	.word	0x200000a8
 8000b80:	2000008e 	.word	0x2000008e
		}
		else if(captureFlag_3 == 1) // 캡처를 했다면
 8000b84:	4b6c      	ldr	r3, [pc, #432]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x434>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d154      	bne.n	8000c36 <HAL_TIM_IC_CaptureCallback+0x332>
		{
			IC_Value2_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	486b      	ldr	r0, [pc, #428]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000b90:	f003 f8fe 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b69      	ldr	r3, [pc, #420]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8000b9a:	801a      	strh	r2, [r3, #0]


			if(IC_Value2_L > IC_Value1_L)
 8000b9c:	4b68      	ldr	r3, [pc, #416]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	4b68      	ldr	r3, [pc, #416]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x440>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d908      	bls.n	8000bba <HAL_TIM_IC_CaptureCallback+0x2b6>
			{
				echoTime_L = IC_Value2_L - IC_Value1_L;
 8000ba8:	4b65      	ldr	r3, [pc, #404]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	4b65      	ldr	r3, [pc, #404]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x440>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b64      	ldr	r3, [pc, #400]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x444>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	e00f      	b.n	8000bda <HAL_TIM_IC_CaptureCallback+0x2d6>
			}
			else if(IC_Value1_L > IC_Value2_L)
 8000bba:	4b62      	ldr	r3, [pc, #392]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x440>)
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	4b60      	ldr	r3, [pc, #384]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d909      	bls.n	8000bda <HAL_TIM_IC_CaptureCallback+0x2d6>
			{
				echoTime_L = (0xffff - IC_Value1_L) + IC_Value2_L;
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	4b5e      	ldr	r3, [pc, #376]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x440>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x444>)
 8000bd8:	801a      	strh	r2, [r3, #0]
			}
			distance_L = echoTime_L / 58;
 8000bda:	4b5b      	ldr	r3, [pc, #364]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x444>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4a5b      	ldr	r2, [pc, #364]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x448>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	095b      	lsrs	r3, r3, #5
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b59      	ldr	r3, [pc, #356]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x44c>)
 8000bea:	801a      	strh	r2, [r3, #0]

			if(distance_L < 2 || distance_L > 400)
 8000bec:	4b58      	ldr	r3, [pc, #352]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x44c>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d904      	bls.n	8000bfe <HAL_TIM_IC_CaptureCallback+0x2fa>
 8000bf4:	4b56      	ldr	r3, [pc, #344]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x44c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000bfc:	d902      	bls.n	8000c04 <HAL_TIM_IC_CaptureCallback+0x300>
			{
				distance_L = 0;
 8000bfe:	4b54      	ldr	r3, [pc, #336]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x44c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	801a      	strh	r2, [r3, #0]
			}

			captureFlag_3 = 0;
 8000c04:	4b4c      	ldr	r3, [pc, #304]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x434>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000c18:	621a      	str	r2, [r3, #32]
 8000c1a:	4b48      	ldr	r3, [pc, #288]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6a12      	ldr	r2, [r2, #32]
 8000c24:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000c26:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0208 	bic.w	r2, r2, #8
 8000c34:	60da      	str	r2, [r3, #12]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7f1b      	ldrb	r3, [r3, #28]
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d178      	bne.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x42c>
	{
		if(captureFlag_B == 0)  // 아직 캡처를 안했다면
 8000c3e:	4b45      	ldr	r3, [pc, #276]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x450>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d11b      	bne.n	8000c7e <HAL_TIM_IC_CaptureCallback+0x37a>
		{
			IC_Value1_B = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8000c46:	210c      	movs	r1, #12
 8000c48:	483c      	ldr	r0, [pc, #240]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c4a:	f003 f8a1 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b41      	ldr	r3, [pc, #260]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x454>)
 8000c54:	801a      	strh	r2, [r3, #0]
			captureFlag_B = 1;    // 캡처 했음 !!!
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x450>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
			// 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c5c:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6a1a      	ldr	r2, [r3, #32]
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000c6a:	621a      	str	r2, [r3, #32]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a1a      	ldr	r2, [r3, #32]
 8000c72:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000c7a:	621a      	str	r2, [r3, #32]
			captureFlag_B = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
		}
	}
}
 8000c7c:	e058      	b.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x42c>
		else if(captureFlag_B == 1) // 캡처를 했다면
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x450>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d154      	bne.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x42c>
			IC_Value2_B = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8000c86:	210c      	movs	r1, #12
 8000c88:	482c      	ldr	r0, [pc, #176]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000c8a:	f003 f881 	bl	8003d90 <HAL_TIM_ReadCapturedValue>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x458>)
 8000c94:	801a      	strh	r2, [r3, #0]
			if(IC_Value2_B > IC_Value1_B)
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x458>)
 8000c98:	881a      	ldrh	r2, [r3, #0]
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x454>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d908      	bls.n	8000cb4 <HAL_TIM_IC_CaptureCallback+0x3b0>
				echoTime_B = IC_Value2_B - IC_Value1_B;
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x458>)
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x454>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8000cb0:	801a      	strh	r2, [r3, #0]
 8000cb2:	e00f      	b.n	8000cd4 <HAL_TIM_IC_CaptureCallback+0x3d0>
			else if(IC_Value1_B > IC_Value2_B)
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x454>)
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x458>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d909      	bls.n	8000cd4 <HAL_TIM_IC_CaptureCallback+0x3d0>
				echoTime_B = (0xffff - IC_Value1_B) + IC_Value2_B;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x458>)
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x454>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8000cd2:	801a      	strh	r2, [r3, #0]
			distance_B = echoTime_B / 58;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x448>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x460>)
 8000ce4:	801a      	strh	r2, [r3, #0]
			if(distance_B < 2 || distance_B > 400)
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x460>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d904      	bls.n	8000cf8 <HAL_TIM_IC_CaptureCallback+0x3f4>
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x460>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000cf6:	d902      	bls.n	8000cfe <HAL_TIM_IC_CaptureCallback+0x3fa>
				distance_B = 0;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x460>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	801a      	strh	r2, [r3, #0]
			captureFlag_B = 0;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x450>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6a1a      	ldr	r2, [r3, #32]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000d12:	621a      	str	r2, [r3, #32]
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a12      	ldr	r2, [r2, #32]
 8000d1e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x438>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0210 	bic.w	r2, r2, #16
 8000d2e:	60da      	str	r2, [r3, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000a8 	.word	0x200000a8
 8000d3c:	200001a0 	.word	0x200001a0
 8000d40:	20000096 	.word	0x20000096
 8000d44:	2000008e 	.word	0x2000008e
 8000d48:	2000009e 	.word	0x2000009e
 8000d4c:	8d3dcb09 	.word	0x8d3dcb09
 8000d50:	200000aa 	.word	0x200000aa
 8000d54:	200000a9 	.word	0x200000a9
 8000d58:	20000094 	.word	0x20000094
 8000d5c:	2000009c 	.word	0x2000009c
 8000d60:	200000a4 	.word	0x200000a4
 8000d64:	200000b0 	.word	0x200000b0

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Motor_Task1 */
  Motor_Task1Handle = osThreadNew(Motor_Task01, NULL, &Motor_Task1_attributes);
 8000d6c:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <MX_FREERTOS_Init+0x48>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4810      	ldr	r0, [pc, #64]	@ (8000db4 <MX_FREERTOS_Init+0x4c>)
 8000d72:	f004 fd41 	bl	80057f8 <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a0f      	ldr	r2, [pc, #60]	@ (8000db8 <MX_FREERTOS_Init+0x50>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonic_Task */
  ultrasonic_TaskHandle = osThreadNew(Ultrasonic_Task, NULL, &ultrasonic_Task_attributes);
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <MX_FREERTOS_Init+0x54>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <MX_FREERTOS_Init+0x58>)
 8000d82:	f004 fd39 	bl	80057f8 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <MX_FREERTOS_Init+0x5c>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of BUZZER_Task1 */
  BUZZER_Task1Handle = osThreadNew(Buzzer_Task01, NULL, &BUZZER_Task1_attributes);
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <MX_FREERTOS_Init+0x60>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <MX_FREERTOS_Init+0x64>)
 8000d92:	f004 fd31 	bl	80057f8 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <MX_FREERTOS_Init+0x68>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of Signal_Task01 */
  Signal_Task01Handle = osThreadNew(signal_task01, NULL, &Signal_Task01_attributes);
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <MX_FREERTOS_Init+0x6c>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_FREERTOS_Init+0x70>)
 8000da2:	f004 fd29 	bl	80057f8 <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <MX_FREERTOS_Init+0x74>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08008514 	.word	0x08008514
 8000db4:	08000de1 	.word	0x08000de1
 8000db8:	200000b4 	.word	0x200000b4
 8000dbc:	08008538 	.word	0x08008538
 8000dc0:	08000e81 	.word	0x08000e81
 8000dc4:	200000b8 	.word	0x200000b8
 8000dc8:	0800855c 	.word	0x0800855c
 8000dcc:	08000f35 	.word	0x08000f35
 8000dd0:	200000bc 	.word	0x200000bc
 8000dd4:	08008580 	.word	0x08008580
 8000dd8:	08000ff5 	.word	0x08000ff5
 8000ddc:	200000c0 	.word	0x200000c0

08000de0 <Motor_Task01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Motor_Task01 */
void Motor_Task01(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Motor_Task01 */
	/* Infinite loop */
	for(;;)
	{
		if (rxFlag == 1 && autoFlag == 0)
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <Motor_Task01+0x90>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d13b      	bne.n	8000e68 <Motor_Task01+0x88>
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <Motor_Task01+0x94>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d137      	bne.n	8000e68 <Motor_Task01+0x88>
		{
			if (currentState == FORWARD)
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <Motor_Task01+0x98>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d114      	bne.n	8000e2a <Motor_Task01+0x4a>
			{
				if (turn == None)
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <Motor_Task01+0x2e>
				{
					frontBehave();
 8000e08:	f000 fb44 	bl	8001494 <frontBehave>
 8000e0c:	e02c      	b.n	8000e68 <Motor_Task01+0x88>
				}
				else if (turn == Left)
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <Motor_Task01+0x3c>
				{
					front_Left();
 8000e16:	f000 fbd9 	bl	80015cc <front_Left>
 8000e1a:	e025      	b.n	8000e68 <Motor_Task01+0x88>
				}
				else if (turn == Right)
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d121      	bne.n	8000e68 <Motor_Task01+0x88>
				{
					front_Right();
 8000e24:	f000 fbfc 	bl	8001620 <front_Right>
 8000e28:	e01e      	b.n	8000e68 <Motor_Task01+0x88>
				}
			}
			else if (currentState == BACKWARD)
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <Motor_Task01+0x98>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d114      	bne.n	8000e5c <Motor_Task01+0x7c>
			{
				if (turn == None)
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <Motor_Task01+0x60>
				{
					backBehave();
 8000e3a:	f000 fb8d 	bl	8001558 <backBehave>
 8000e3e:	e013      	b.n	8000e68 <Motor_Task01+0x88>
				}
				else if (turn == Left)
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <Motor_Task01+0x6e>
				{
					back_Left();
 8000e48:	f000 fc14 	bl	8001674 <back_Left>
 8000e4c:	e00c      	b.n	8000e68 <Motor_Task01+0x88>
				}
				else if (turn == Right)
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <Motor_Task01+0x9c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d108      	bne.n	8000e68 <Motor_Task01+0x88>
				{
					back_Right();
 8000e56:	f000 fc37 	bl	80016c8 <back_Right>
 8000e5a:	e005      	b.n	8000e68 <Motor_Task01+0x88>
				}
			}
			else if (currentState == STOP)
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <Motor_Task01+0x98>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <Motor_Task01+0x88>
			{
				stop();
 8000e64:	f000 fc5a 	bl	800171c <stop>
			//    {
			//      Stop();
			//      mode = 10;
			//    }
		}
		osDelay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f004 fd57 	bl	800591c <osDelay>
		if (rxFlag == 1 && autoFlag == 0)
 8000e6e:	e7bb      	b.n	8000de8 <Motor_Task01+0x8>
 8000e70:	2000008a 	.word	0x2000008a
 8000e74:	20000000 	.word	0x20000000
 8000e78:	2000008b 	.word	0x2000008b
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <Ultrasonic_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasonic_Task */
void Ultrasonic_Task(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultrasonic_Task */
  /* Infinite loop */
  for(;;)
  {
	  if(autoFlag == 1)
 8000e88:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <Ultrasonic_Task+0xa4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d145      	bne.n	8000f1c <Ultrasonic_Task+0x9c>
	  {
		  HCSR04_TRIG();
 8000e90:	f7ff fb3c 	bl	800050c <HCSR04_TRIG>
		  HAL_Delay(10);
 8000e94:	200a      	movs	r0, #10
 8000e96:	f001 f99f 	bl	80021d8 <HAL_Delay>

		  // 자동 모드 종료 체크
		  if (autoFlag == 0)
 8000e9a:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <Ultrasonic_Task+0xa4>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <Ultrasonic_Task+0x28>
		  {
			  autostop();
 8000ea2:	f000 fc61 	bl	8001768 <autostop>
			  continue;
 8000ea6:	e03c      	b.n	8000f22 <Ultrasonic_Task+0xa2>
		  }

		  // 장애물 판단 로직 강화
		  if ((distance_R <= 20 && distance_L <= 20) || distance_M <= 35)
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <Ultrasonic_Task+0xa8>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b14      	cmp	r3, #20
 8000eae:	d803      	bhi.n	8000eb8 <Ultrasonic_Task+0x38>
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <Ultrasonic_Task+0xac>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2b14      	cmp	r3, #20
 8000eb6:	d903      	bls.n	8000ec0 <Ultrasonic_Task+0x40>
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <Ultrasonic_Task+0xb0>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	2b23      	cmp	r3, #35	@ 0x23
 8000ebe:	d813      	bhi.n	8000ee8 <Ultrasonic_Task+0x68>
		  {
			  autostop();
 8000ec0:	f000 fc52 	bl	8001768 <autostop>

			  // 더 넓은 쪽으로 회피
			  if (distance_L > distance_R)
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <Ultrasonic_Task+0xac>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <Ultrasonic_Task+0xa8>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d902      	bls.n	8000ed6 <Ultrasonic_Task+0x56>
			  {
				  auto_Left();
 8000ed0:	f000 fc70 	bl	80017b4 <auto_Left>
			  if (distance_L > distance_R)
 8000ed4:	e021      	b.n	8000f1a <Ultrasonic_Task+0x9a>
			  }
			  else if(distance_R > distance_L)
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <Ultrasonic_Task+0xa8>)
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <Ultrasonic_Task+0xac>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d91b      	bls.n	8000f1a <Ultrasonic_Task+0x9a>
			  {
				  auto_Right();
 8000ee2:	f000 fc8f 	bl	8001804 <auto_Right>
			  if (distance_L > distance_R)
 8000ee6:	e018      	b.n	8000f1a <Ultrasonic_Task+0x9a>
			  }
		  }
		  else if (distance_R <= 20 && distance_L > 20)
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <Ultrasonic_Task+0xa8>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b14      	cmp	r3, #20
 8000eee:	d806      	bhi.n	8000efe <Ultrasonic_Task+0x7e>
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <Ultrasonic_Task+0xac>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	2b14      	cmp	r3, #20
 8000ef6:	d902      	bls.n	8000efe <Ultrasonic_Task+0x7e>
		  {
			  front_Left();
 8000ef8:	f000 fb68 	bl	80015cc <front_Left>
 8000efc:	e00e      	b.n	8000f1c <Ultrasonic_Task+0x9c>
		  }
		  else if (distance_L <= 20 && distance_R > 20)
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <Ultrasonic_Task+0xac>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2b14      	cmp	r3, #20
 8000f04:	d806      	bhi.n	8000f14 <Ultrasonic_Task+0x94>
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <Ultrasonic_Task+0xa8>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2b14      	cmp	r3, #20
 8000f0c:	d902      	bls.n	8000f14 <Ultrasonic_Task+0x94>
		  {
			  front_Right();
 8000f0e:	f000 fb87 	bl	8001620 <front_Right>
 8000f12:	e003      	b.n	8000f1c <Ultrasonic_Task+0x9c>
		  }
		  else
		  {
			  autofrontBehave();  // 정상 전진
 8000f14:	f000 faf8 	bl	8001508 <autofrontBehave>
 8000f18:	e000      	b.n	8000f1c <Ultrasonic_Task+0x9c>
			  if (distance_L > distance_R)
 8000f1a:	bf00      	nop
	  }
//    delay_us(1000);
//    delay_us(2000);
    //printf("Sensor1 : %d cm, Sensor2 : %d cm, Sensor3 : %d cm\r\n", distance1, distance2, distance3);
    //delay_us(100);
    osDelay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f004 fcfd 	bl	800591c <osDelay>
	  if(autoFlag == 1)
 8000f22:	e7b1      	b.n	8000e88 <Ultrasonic_Task+0x8>
 8000f24:	20000000 	.word	0x20000000
 8000f28:	200000ae 	.word	0x200000ae
 8000f2c:	200000aa 	.word	0x200000aa
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <Buzzer_Task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Buzzer_Task01 */
void Buzzer_Task01(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Buzzer_Task01 */
  /* Infinite loop */
  for(;;)
  {
    // 가장 가까운 거리 찾기
    uint8_t current_distance = distance_B;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <Buzzer_Task01+0xb0>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	75fb      	strb	r3, [r7, #23]

    // 유효한 거리 값이 있을 때만 부저 제어
    if(current_distance > 0 && current_distance <= DISTANCE_FAR)
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d042      	beq.n	8000fce <Buzzer_Task01+0x9a>
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b28      	cmp	r3, #40	@ 0x28
 8000f4c:	d83f      	bhi.n	8000fce <Buzzer_Task01+0x9a>
    {
      uint16_t beep_interval = Calculate_Beep_Interval(current_distance);
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fbb3 	bl	80006bc <Calculate_Beep_Interval>
 8000f56:	4603      	mov	r3, r0
 8000f58:	82bb      	strh	r3, [r7, #20]
      uint16_t beep_frequency = Calculate_Beep_Frequency(current_distance);
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fbd5 	bl	800070c <Calculate_Beep_Frequency>
 8000f62:	4603      	mov	r3, r0
 8000f64:	827b      	strh	r3, [r7, #18]

      uint32_t current_time = HAL_GetTick();
 8000f66:	f001 f92b 	bl	80021c0 <HAL_GetTick>
 8000f6a:	60f8      	str	r0, [r7, #12]

      // 부저 상태 관리
      if(buzzer_state == 0)
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <Buzzer_Task01+0xb4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d11b      	bne.n	8000fac <Buzzer_Task01+0x78>
      {
        if(current_time - buzzer_beep_time >= beep_interval)
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <Buzzer_Task01+0xb8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	1ad2      	subs	r2, r2, r3
 8000f7c:	8abb      	ldrh	r3, [r7, #20]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d32b      	bcc.n	8000fda <Buzzer_Task01+0xa6>
        {
          // 부저 켜기
          Buzzer_On(beep_frequency);
 8000f82:	8a7b      	ldrh	r3, [r7, #18]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb4b 	bl	8000620 <Buzzer_On>
          buzzer_state = 1;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <Buzzer_Task01+0xb4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
          buzzer_beep_time = current_time;
 8000f90:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <Buzzer_Task01+0xb8>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6013      	str	r3, [r2, #0]

          // 거리에 따른 비프 지속시간 설정
          if(current_distance <= DISTANCE_CRITICAL)
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d803      	bhi.n	8000fa4 <Buzzer_Task01+0x70>
          {
            current_beep_interval = BEEP_DURATION_LONG;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <Buzzer_Task01+0xbc>)
 8000f9e:	22c8      	movs	r2, #200	@ 0xc8
 8000fa0:	701a      	strb	r2, [r3, #0]
    {
 8000fa2:	e01a      	b.n	8000fda <Buzzer_Task01+0xa6>
          }
          else
          {
            current_beep_interval = BEEP_DURATION_SHORT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <Buzzer_Task01+0xbc>)
 8000fa6:	2264      	movs	r2, #100	@ 0x64
 8000fa8:	701a      	strb	r2, [r3, #0]
    {
 8000faa:	e016      	b.n	8000fda <Buzzer_Task01+0xa6>
        }
      }
      // 부저가 켜져 있는 상태
      else
      {
        if(current_time - buzzer_beep_time >= current_beep_interval)
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <Buzzer_Task01+0xb8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <Buzzer_Task01+0xbc>)
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d30e      	bcc.n	8000fda <Buzzer_Task01+0xa6>
        {
          Buzzer_Off();
 8000fbc:	f7ff fb70 	bl	80006a0 <Buzzer_Off>
          buzzer_state = 0;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <Buzzer_Task01+0xb4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
          buzzer_beep_time = current_time;
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <Buzzer_Task01+0xb8>)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6013      	str	r3, [r2, #0]
    {
 8000fcc:	e005      	b.n	8000fda <Buzzer_Task01+0xa6>
      }
    }
    else
    {
      // 너무 멀 때 부저 끄기
      Buzzer_Off();
 8000fce:	f7ff fb67 	bl	80006a0 <Buzzer_Off>
      buzzer_state = 0;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <Buzzer_Task01+0xb4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e000      	b.n	8000fdc <Buzzer_Task01+0xa8>
    {
 8000fda:	bf00      	nop
    }

    //printf("Distance : %d cm, Beep interval : %d ms\r\n", current_distance, Calculate_Beep_Interval(current_distance));
    osDelay(10);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f004 fc9d 	bl	800591c <osDelay>
  {
 8000fe2:	e7ab      	b.n	8000f3c <Buzzer_Task01+0x8>
 8000fe4:	200000b0 	.word	0x200000b0
 8000fe8:	20000084 	.word	0x20000084
 8000fec:	20000080 	.word	0x20000080
 8000ff0:	20000085 	.word	0x20000085

08000ff4 <signal_task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal_task01 */
void signal_task01(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint8_t prev_btn1 = 0, prev_btn2 = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
 8001000:	2300      	movs	r3, #0
 8001002:	75bb      	strb	r3, [r7, #22]
	uint32_t last_blink_time1 = 0, last_blink_time2 = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN signal_task01 */
  /* Infinite loop */
  for(;;)
  {
	  //uint32_t now = HAL_GetTick();
	  uint8_t btn1 = Read_BTN1();	// 0 : 눌림, 1 : 안눌림
 800100c:	f7ff faea 	bl	80005e4 <Read_BTN1>
 8001010:	4603      	mov	r3, r0
 8001012:	72fb      	strb	r3, [r7, #11]
	  uint8_t btn2 = Read_BTN2();
 8001014:	f7ff faf2 	bl	80005fc <Read_BTN2>
 8001018:	4603      	mov	r3, r0
 800101a:	72bb      	strb	r3, [r7, #10]

	  if(btn1 == 0 && prev_btn1 == 1)	// 버튼 1이 새로 눌림
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d112      	bne.n	8001048 <signal_task01+0x54>
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10f      	bne.n	8001048 <signal_task01+0x54>
	  {
		  led1_Blink ^= 1;	// 깜빡임 ON/OFF 토글
 8001028:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <signal_task01+0x10c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <signal_task01+0x10c>)
 8001034:	701a      	strb	r2, [r3, #0]

		  if(led1_Blink == 0)
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <signal_task01+0x10c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d104      	bne.n	8001048 <signal_task01+0x54>
		  {
			  // 깜빡이 정지 시 LED OFF
			  LED1_OFF();
 800103e:	f000 f90b 	bl	8001258 <LED1_OFF>
			  led1_State = 0;
 8001042:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <signal_task01+0x110>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(btn2 == 0 && prev_btn2 == 1)
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d112      	bne.n	8001074 <signal_task01+0x80>
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10f      	bne.n	8001074 <signal_task01+0x80>
	  {
		  led2_Blink ^= 1;
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <signal_task01+0x114>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <signal_task01+0x114>)
 8001060:	701a      	strb	r2, [r3, #0]

		  if(led2_Blink == 0)
 8001062:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <signal_task01+0x114>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <signal_task01+0x80>
		  {
			  // 깜빡이 정지 시 LED OFF
			  LED2_OFF();
 800106a:	f000 f90d 	bl	8001288 <LED2_OFF>
			  led2_State = 0;
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <signal_task01+0x118>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // LED1 제어
	  if(led1_Blink)
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <signal_task01+0x10c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01a      	beq.n	80010b2 <signal_task01+0xbe>
	  {
		  if(HAL_GetTick() - last_blink_time1 >= 500)
 800107c:	f001 f8a0 	bl	80021c0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800108a:	d312      	bcc.n	80010b2 <signal_task01+0xbe>
		  {
			  led1_State ^= 1;
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <signal_task01+0x110>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <signal_task01+0x110>)
 8001098:	701a      	strb	r2, [r3, #0]
			  if(led1_State)
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <signal_task01+0x110>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <signal_task01+0xb4>
				  LED1_ON();
 80010a2:	f000 f8cd 	bl	8001240 <LED1_ON>
 80010a6:	e001      	b.n	80010ac <signal_task01+0xb8>
			  else
				  LED1_OFF();
 80010a8:	f000 f8d6 	bl	8001258 <LED1_OFF>

			  last_blink_time1 = HAL_GetTick();
 80010ac:	f001 f888 	bl	80021c0 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]
		  }
	  }

	  // LED2 제어
	  if(led2_Blink)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <signal_task01+0x114>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01a      	beq.n	80010f0 <signal_task01+0xfc>
	  {
		  if(HAL_GetTick() - last_blink_time2 >= 500)
 80010ba:	f001 f881 	bl	80021c0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010c8:	d312      	bcc.n	80010f0 <signal_task01+0xfc>
		  {
			  led2_State ^= 1;
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <signal_task01+0x118>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <signal_task01+0x118>)
 80010d6:	701a      	strb	r2, [r3, #0]
			  if(led2_State)
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <signal_task01+0x118>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <signal_task01+0xf2>
				  LED2_ON();
 80010e0:	f000 f8c6 	bl	8001270 <LED2_ON>
 80010e4:	e001      	b.n	80010ea <signal_task01+0xf6>
			  else
				  LED2_OFF();
 80010e6:	f000 f8cf 	bl	8001288 <LED2_OFF>

			  last_blink_time2 = HAL_GetTick();
 80010ea:	f001 f869 	bl	80021c0 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]
		  }
	  }
	  prev_btn1 = btn1;
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	75fb      	strb	r3, [r7, #23]
	  prev_btn2 = btn2;
 80010f4:	7abb      	ldrb	r3, [r7, #10]
 80010f6:	75bb      	strb	r3, [r7, #22]

    osDelay(50);
 80010f8:	2032      	movs	r0, #50	@ 0x32
 80010fa:	f004 fc0f 	bl	800591c <osDelay>
  {
 80010fe:	e785      	b.n	800100c <signal_task01+0x18>
 8001100:	20000088 	.word	0x20000088
 8001104:	20000086 	.word	0x20000086
 8001108:	20000089 	.word	0x20000089
 800110c:	20000087 	.word	0x20000087

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b41      	ldr	r3, [pc, #260]	@ (8001230 <MX_GPIO_Init+0x120>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a40      	ldr	r2, [pc, #256]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b3a      	ldr	r3, [pc, #232]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a39      	ldr	r2, [pc, #228]	@ (8001230 <MX_GPIO_Init+0x120>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b30      	ldr	r3, [pc, #192]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a2b      	ldr	r2, [pc, #172]	@ (8001230 <MX_GPIO_Init+0x120>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <MX_GPIO_Init+0x120>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001196:	2200      	movs	r2, #0
 8001198:	f640 411f 	movw	r1, #3103	@ 0xc1f
 800119c:	4825      	ldr	r0, [pc, #148]	@ (8001234 <MX_GPIO_Init+0x124>)
 800119e:	f001 fb4f 	bl	8002840 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	21e0      	movs	r1, #224	@ 0xe0
 80011a6:	4824      	ldr	r0, [pc, #144]	@ (8001238 <MX_GPIO_Init+0x128>)
 80011a8:	f001 fb4a 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80011b2:	4822      	ldr	r0, [pc, #136]	@ (800123c <MX_GPIO_Init+0x12c>)
 80011b4:	f001 fb44 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011b8:	f640 431f 	movw	r3, #3103	@ 0xc1f
 80011bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4818      	ldr	r0, [pc, #96]	@ (8001234 <MX_GPIO_Init+0x124>)
 80011d2:	f001 f999 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011d6:	23e0      	movs	r3, #224	@ 0xe0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	@ (8001238 <MX_GPIO_Init+0x128>)
 80011ee:	f001 f98b 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <MX_GPIO_Init+0x124>)
 8001206:	f001 f97f 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800120a:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_GPIO_Init+0x12c>)
 8001224:	f001 f970 	bl	8002508 <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400

08001240 <LED1_ON>:
#include "led.h"



void LED1_ON()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124a:	4802      	ldr	r0, [pc, #8]	@ (8001254 <LED1_ON+0x14>)
 800124c:	f001 faf8 	bl	8002840 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020800 	.word	0x40020800

08001258 <LED1_OFF>:

void LED1_OFF()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001262:	4802      	ldr	r0, [pc, #8]	@ (800126c <LED1_OFF+0x14>)
 8001264:	f001 faec 	bl	8002840 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40020800 	.word	0x40020800

08001270 <LED2_ON>:


void LED2_ON()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800127a:	4802      	ldr	r0, [pc, #8]	@ (8001284 <LED2_ON+0x14>)
 800127c:	f001 fae0 	bl	8002840 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020800 	.word	0x40020800

08001288 <LED2_OFF>:

void LED2_OFF()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001292:	4802      	ldr	r0, [pc, #8]	@ (800129c <LED2_OFF+0x14>)
 8001294:	f001 fad4 	bl	8002840 <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40020800 	.word	0x40020800

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f000 ff56 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f84e 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f7ff ff30 	bl	8001110 <MX_GPIO_Init>
  MX_TIM3_Init();
 80012b0:	f000 fc1e 	bl	8001af0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 fe4e 	bl	8001f54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012b8:	f000 fe22 	bl	8001f00 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80012bc:	f000 fc7e 	bl	8001bbc <MX_TIM4_Init>
  MX_TIM11_Init();
 80012c0:	f000 fcf2 	bl	8001ca8 <MX_TIM11_Init>
  MX_TIM2_Init();
 80012c4:	f000 fbba 	bl	8001a3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  MotorInit();
 80012c8:	f000 f8be 	bl	8001448 <MotorInit>
  //Ultrasonic_Init();
  Buzzer_Init();
 80012cc:	f7ff f9a2 	bl	8000614 <Buzzer_Init>

  // PWM Start
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // ENA (PB4)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4817      	ldr	r0, [pc, #92]	@ (8001330 <main+0x90>)
 80012d4:	f002 f8f4 	bl	80034c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // ENB (PB5)
 80012d8:	2104      	movs	r1, #4
 80012da:	4815      	ldr	r0, [pc, #84]	@ (8001330 <main+0x90>)
 80012dc:	f002 f8f0 	bl	80034c0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e0:	2100      	movs	r1, #0
 80012e2:	4814      	ldr	r0, [pc, #80]	@ (8001334 <main+0x94>)
 80012e4:	f002 f8ec 	bl	80034c0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2); // 부저용 타이머
 80012e8:	4812      	ldr	r0, [pc, #72]	@ (8001334 <main+0x94>)
 80012ea:	f001 ffdd 	bl	80032a8 <HAL_TIM_Base_Start>

  // UART Interrupt
//  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
//  HAL_UART_Receive_IT(&huart1, &txData, sizeof(txData));
  HAL_UART_Receive_IT(&huart1, &rxBt, sizeof(rxBt));
 80012ee:	2201      	movs	r2, #1
 80012f0:	4911      	ldr	r1, [pc, #68]	@ (8001338 <main+0x98>)
 80012f2:	4812      	ldr	r0, [pc, #72]	@ (800133c <main+0x9c>)
 80012f4:	f003 fa61 	bl	80047ba <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim11);    // us timer
 80012f8:	4811      	ldr	r0, [pc, #68]	@ (8001340 <main+0xa0>)
 80012fa:	f001 ffd5 	bl	80032a8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // for 전방 ultrasonic timer
 80012fe:	2100      	movs	r1, #0
 8001300:	4810      	ldr	r0, [pc, #64]	@ (8001344 <main+0xa4>)
 8001302:	f002 f9dd 	bl	80036c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);   // for 전방 ultrasonic timer
 8001306:	2104      	movs	r1, #4
 8001308:	480e      	ldr	r0, [pc, #56]	@ (8001344 <main+0xa4>)
 800130a:	f002 f9d9 	bl	80036c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);   // for 전방 ultrasonic timer
 800130e:	2108      	movs	r1, #8
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <main+0xa4>)
 8001312:	f002 f9d5 	bl	80036c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);	// for 후방 ultrasonic timer
 8001316:	210c      	movs	r1, #12
 8001318:	480a      	ldr	r0, [pc, #40]	@ (8001344 <main+0xa4>)
 800131a:	f002 f9d1 	bl	80036c0 <HAL_TIM_IC_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800131e:	f004 fa21 	bl	8005764 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001322:	f7ff fd21 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001326:	f004 fa41 	bl	80057ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <main+0x8a>
 800132e:	bf00      	nop
 8001330:	20000158 	.word	0x20000158
 8001334:	20000110 	.word	0x20000110
 8001338:	200000c4 	.word	0x200000c4
 800133c:	20000230 	.word	0x20000230
 8001340:	200001e8 	.word	0x200001e8
 8001344:	200001a0 	.word	0x200001a0

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	@ 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f006 ffb6 	bl	80082c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <SystemClock_Config+0xc8>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <SystemClock_Config+0xc8>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	@ 0x40
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <SystemClock_Config+0xc8>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <SystemClock_Config+0xcc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <SystemClock_Config+0xcc>)
 8001392:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <SystemClock_Config+0xcc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013bc:	2364      	movs	r3, #100	@ 0x64
 80013be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c4:	2304      	movs	r3, #4
 80013c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fa51 	bl	8002874 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d8:	f000 f830 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2103      	movs	r1, #3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fcb3 	bl	8002d64 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001404:	f000 f81a 	bl	800143c <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3750      	adds	r7, #80	@ 0x50
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800142a:	f000 feb5 	bl	8002198 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40014400 	.word	0x40014400

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <Error_Handler+0x8>

08001448 <MotorInit>:
uint16_t MotorData = {400};



void MotorInit()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_SET);	// IN1
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	480e      	ldr	r0, [pc, #56]	@ (800148c <MotorInit+0x44>)
 8001452:	f001 f9f5 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	// IN2
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <MotorInit+0x44>)
 800145e:	f001 f9ef 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);	// IN3
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <MotorInit+0x44>)
 800146a:	f001 f9e9 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);	// IN4
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <MotorInit+0x44>)
 8001476:	f001 f9e3 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = 0;
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <MotorInit+0x48>)
 800147c:	2200      	movs	r2, #0
 800147e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = 0;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <MotorInit+0x48>)
 8001482:	2200      	movs	r2, #0
 8001484:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020400 	.word	0x40020400
 8001490:	40000400 	.word	0x40000400

08001494 <frontBehave>:

void frontBehave()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	// 오른쪽 바퀴, 왼쪽 바퀴 모두 전진 (PWM 값 증가)
	if (MotorData <= 1000)
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <frontBehave+0x68>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014a0:	d825      	bhi.n	80014ee <frontBehave+0x5a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	4816      	ldr	r0, [pc, #88]	@ (8001500 <frontBehave+0x6c>)
 80014a8:	f001 f9ca 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b2:	4813      	ldr	r0, [pc, #76]	@ (8001500 <frontBehave+0x6c>)
 80014b4:	f001 f9c4 	bl	8002840 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014be:	4810      	ldr	r0, [pc, #64]	@ (8001500 <frontBehave+0x6c>)
 80014c0:	f001 f9be 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <frontBehave+0x6c>)
 80014cc:	f001 f9b8 	bl	8002840 <HAL_GPIO_WritePin>
		MotorData += 50;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <frontBehave+0x68>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3332      	adds	r3, #50	@ 0x32
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <frontBehave+0x68>)
 80014da:	801a      	strh	r2, [r3, #0]
		TIM3 -> CCR1 = MotorData;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <frontBehave+0x68>)
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <frontBehave+0x70>)
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3 -> CCR2 = MotorData;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <frontBehave+0x68>)
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <frontBehave+0x70>)
 80014ea:	639a      	str	r2, [r3, #56]	@ 0x38
	else
	{
		MotorData = 1000;
	}

}
 80014ec:	e003      	b.n	80014f6 <frontBehave+0x62>
		MotorData = 1000;
 80014ee:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <frontBehave+0x68>)
 80014f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014f4:	801a      	strh	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000002 	.word	0x20000002
 8001500:	40020400 	.word	0x40020400
 8001504:	40000400 	.word	0x40000400

08001508 <autofrontBehave>:

void autofrontBehave()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2102      	movs	r1, #2
 8001510:	480f      	ldr	r0, [pc, #60]	@ (8001550 <autofrontBehave+0x48>)
 8001512:	f001 f995 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <autofrontBehave+0x48>)
 800151e:	f001 f98f 	bl	8002840 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001528:	4809      	ldr	r0, [pc, #36]	@ (8001550 <autofrontBehave+0x48>)
 800152a:	f001 f989 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001534:	4806      	ldr	r0, [pc, #24]	@ (8001550 <autofrontBehave+0x48>)
 8001536:	f001 f983 	bl	8002840 <HAL_GPIO_WritePin>

		TIM3 -> CCR1 = 450;
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <autofrontBehave+0x4c>)
 800153c:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3 -> CCR2 = 450;
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <autofrontBehave+0x4c>)
 8001544:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001548:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400
 8001554:	40000400 	.word	0x40000400

08001558 <backBehave>:

void backBehave()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	// PWM 값 감소, 최소 400 제한
	if (MotorData >= 400)
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <backBehave+0x68>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001564:	d325      	bcc.n	80015b2 <backBehave+0x5a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4816      	ldr	r0, [pc, #88]	@ (80015c4 <backBehave+0x6c>)
 800156c:	f001 f968 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001576:	4813      	ldr	r0, [pc, #76]	@ (80015c4 <backBehave+0x6c>)
 8001578:	f001 f962 	bl	8002840 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001582:	4810      	ldr	r0, [pc, #64]	@ (80015c4 <backBehave+0x6c>)
 8001584:	f001 f95c 	bl	8002840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158e:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <backBehave+0x6c>)
 8001590:	f001 f956 	bl	8002840 <HAL_GPIO_WritePin>
		MotorData -= 50;
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <backBehave+0x68>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3b32      	subs	r3, #50	@ 0x32
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <backBehave+0x68>)
 800159e:	801a      	strh	r2, [r3, #0]
		TIM3 -> CCR1 = MotorData;
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <backBehave+0x68>)
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <backBehave+0x70>)
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3 -> CCR2 = MotorData;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <backBehave+0x68>)
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <backBehave+0x70>)
 80015ae:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else
	{
		MotorData = 400;
	}
}
 80015b0:	e003      	b.n	80015ba <backBehave+0x62>
		MotorData = 400;
 80015b2:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <backBehave+0x68>)
 80015b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015b8:	801a      	strh	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000002 	.word	0x20000002
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40000400 	.word	0x40000400

080015cc <front_Left>:
	TIM3 -> CCR2 = 450;

}

void front_Left()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	480f      	ldr	r0, [pc, #60]	@ (8001614 <front_Left+0x48>)
 80015d6:	f001 f933 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <front_Left+0x48>)
 80015e2:	f001 f92d 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <front_Left+0x48>)
 80015ee:	f001 f927 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f8:	4806      	ldr	r0, [pc, #24]	@ (8001614 <front_Left+0x48>)
 80015fa:	f001 f921 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = MotorData;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <front_Left+0x4c>)
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <front_Left+0x50>)
 8001604:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = MotorData;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <front_Left+0x4c>)
 8001608:	881a      	ldrh	r2, [r3, #0]
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <front_Left+0x50>)
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020400 	.word	0x40020400
 8001618:	20000002 	.word	0x20000002
 800161c:	40000400 	.word	0x40000400

08001620 <front_Right>:

void front_Right()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2102      	movs	r1, #2
 8001628:	480f      	ldr	r0, [pc, #60]	@ (8001668 <front_Right+0x48>)
 800162a:	f001 f909 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <front_Right+0x48>)
 8001636:	f001 f903 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001640:	4809      	ldr	r0, [pc, #36]	@ (8001668 <front_Right+0x48>)
 8001642:	f001 f8fd 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <front_Right+0x48>)
 800164e:	f001 f8f7 	bl	8002840 <HAL_GPIO_WritePin>

	TIM3 -> CCR1 = MotorData;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <front_Right+0x4c>)
 8001654:	881a      	ldrh	r2, [r3, #0]
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <front_Right+0x50>)
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = MotorData;
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <front_Right+0x4c>)
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <front_Right+0x50>)
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020400 	.word	0x40020400
 800166c:	20000002 	.word	0x20000002
 8001670:	40000400 	.word	0x40000400

08001674 <back_Left>:

void back_Left()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2102      	movs	r1, #2
 800167c:	480f      	ldr	r0, [pc, #60]	@ (80016bc <back_Left+0x48>)
 800167e:	f001 f8df 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <back_Left+0x48>)
 800168a:	f001 f8d9 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001694:	4809      	ldr	r0, [pc, #36]	@ (80016bc <back_Left+0x48>)
 8001696:	f001 f8d3 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <back_Left+0x48>)
 80016a2:	f001 f8cd 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = MotorData;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <back_Left+0x4c>)
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <back_Left+0x50>)
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = MotorData;
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <back_Left+0x4c>)
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <back_Left+0x50>)
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020400 	.word	0x40020400
 80016c0:	20000002 	.word	0x20000002
 80016c4:	40000400 	.word	0x40000400

080016c8 <back_Right>:

void back_Right()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	480f      	ldr	r0, [pc, #60]	@ (8001710 <back_Right+0x48>)
 80016d2:	f001 f8b5 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <back_Right+0x48>)
 80016de:	f001 f8af 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016e8:	4809      	ldr	r0, [pc, #36]	@ (8001710 <back_Right+0x48>)
 80016ea:	f001 f8a9 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <back_Right+0x48>)
 80016f6:	f001 f8a3 	bl	8002840 <HAL_GPIO_WritePin>

	TIM3 -> CCR1 = MotorData;
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <back_Right+0x4c>)
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <back_Right+0x50>)
 8001700:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = MotorData;
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <back_Right+0x4c>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <back_Right+0x50>)
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020400 	.word	0x40020400
 8001714:	20000002 	.word	0x20000002
 8001718:	40000400 	.word	0x40000400

0800171c <stop>:

void stop()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2102      	movs	r1, #2
 8001724:	480e      	ldr	r0, [pc, #56]	@ (8001760 <stop+0x44>)
 8001726:	f001 f88b 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001730:	480b      	ldr	r0, [pc, #44]	@ (8001760 <stop+0x44>)
 8001732:	f001 f885 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800173c:	4808      	ldr	r0, [pc, #32]	@ (8001760 <stop+0x44>)
 800173e:	f001 f87f 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <stop+0x44>)
 800174a:	f001 f879 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = 0;
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <stop+0x48>)
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = 0;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <stop+0x48>)
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020400 	.word	0x40020400
 8001764:	40000400 	.word	0x40000400

08001768 <autostop>:

void autostop()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2102      	movs	r1, #2
 8001770:	480e      	ldr	r0, [pc, #56]	@ (80017ac <autostop+0x44>)
 8001772:	f001 f865 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <autostop+0x44>)
 800177e:	f001 f85f 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <autostop+0x44>)
 800178a:	f001 f859 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <autostop+0x44>)
 8001796:	f001 f853 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = 0;
 800179a:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <autostop+0x48>)
 800179c:	2200      	movs	r2, #0
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = 0;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <autostop+0x48>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40000400 	.word	0x40000400

080017b4 <auto_Left>:

void auto_Left()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2102      	movs	r1, #2
 80017bc:	480f      	ldr	r0, [pc, #60]	@ (80017fc <auto_Left+0x48>)
 80017be:	f001 f83f 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <auto_Left+0x48>)
 80017ca:	f001 f839 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <auto_Left+0x48>)
 80017d6:	f001 f833 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e0:	4806      	ldr	r0, [pc, #24]	@ (80017fc <auto_Left+0x48>)
 80017e2:	f001 f82d 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = 700;
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <auto_Left+0x4c>)
 80017e8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80017ec:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = 700;
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <auto_Left+0x4c>)
 80017f0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020400 	.word	0x40020400
 8001800:	40000400 	.word	0x40000400

08001804 <auto_Right>:

void auto_Right()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2102      	movs	r1, #2
 800180c:	480f      	ldr	r0, [pc, #60]	@ (800184c <auto_Right+0x48>)
 800180e:	f001 f817 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <auto_Right+0x48>)
 800181a:	f001 f811 	bl	8002840 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <auto_Right+0x48>)
 8001826:	f001 f80b 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001830:	4806      	ldr	r0, [pc, #24]	@ (800184c <auto_Right+0x48>)
 8001832:	f001 f805 	bl	8002840 <HAL_GPIO_WritePin>
	TIM3 -> CCR1 = 700;
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <auto_Right+0x4c>)
 8001838:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800183c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = 700;
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <auto_Right+0x4c>)
 8001840:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001844:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020400 	.word	0x40020400
 8001850:	40000400 	.word	0x40000400

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_MspInit+0x54>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <HAL_MspInit+0x54>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_MspInit+0x54>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_MspInit+0x54>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_MspInit+0x54>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_MspInit+0x54>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	210f      	movs	r1, #15
 8001896:	f06f 0001 	mvn.w	r0, #1
 800189a:	f000 fd79 	bl	8002390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b2e      	ldr	r3, [pc, #184]	@ (800197c <HAL_InitTick+0xd0>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <HAL_InitTick+0xd0>)
 80018c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80018cc:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_InitTick+0xd0>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fc5e 	bl	80031a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018e8:	f001 fc48 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80018ec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f0:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_InitTick+0xd4>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	3b01      	subs	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80018fc:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_InitTick+0xd8>)
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <HAL_InitTick+0xdc>)
 8001900:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <HAL_InitTick+0xd8>)
 8001904:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001908:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800190a:	4a1e      	ldr	r2, [pc, #120]	@ (8001984 <HAL_InitTick+0xd8>)
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_InitTick+0xd8>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_InitTick+0xd8>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_InitTick+0xd8>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001922:	4818      	ldr	r0, [pc, #96]	@ (8001984 <HAL_InitTick+0xd8>)
 8001924:	f001 fc70 	bl	8003208 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800192e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11b      	bne.n	800196e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001936:	4813      	ldr	r0, [pc, #76]	@ (8001984 <HAL_InitTick+0xd8>)
 8001938:	f001 fd10 	bl	800335c <HAL_TIM_Base_Start_IT>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001946:	2b00      	cmp	r3, #0
 8001948:	d111      	bne.n	800196e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800194a:	2019      	movs	r0, #25
 800194c:	f000 fd3c 	bl	80023c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	d808      	bhi.n	8001968 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001956:	2200      	movs	r2, #0
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	2019      	movs	r0, #25
 800195c:	f000 fd18 	bl	8002390 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_InitTick+0xe0>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e002      	b.n	800196e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800196e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001972:	4618      	mov	r0, r3
 8001974:	3730      	adds	r7, #48	@ 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	431bde83 	.word	0x431bde83
 8001984:	200000c8 	.word	0x200000c8
 8001988:	40014400 	.word	0x40014400
 800198c:	20000008 	.word	0x20000008

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <NMI_Handler+0x4>

08001998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <MemManage_Handler+0x4>

080019a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019ce:	f001 ff91 	bl	80038f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000c8 	.word	0x200000c8

080019dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <TIM4_IRQHandler+0x10>)
 80019e2:	f001 ff87 	bl	80038f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001a0 	.word	0x200001a0

080019f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <USART1_IRQHandler+0x10>)
 80019f6:	f002 ff05 	bl	8004804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000230 	.word	0x20000230

08001a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <USART2_IRQHandler+0x10>)
 8001a0a:	f002 fefb 	bl	8004804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000278 	.word	0x20000278

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000 - 1;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a68:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a88:	4818      	ldr	r0, [pc, #96]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001a8a:	f001 fcc9 	bl	8003420 <HAL_TIM_PWM_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a94:	f7ff fcd2 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001aa8:	f002 fd2a 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ab2:	f7ff fcc3 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab6:	2360      	movs	r3, #96	@ 0x60
 8001ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001ace:	f002 f89d 	bl	8003c0c <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ad8:	f7ff fcb0 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001adc:	4803      	ldr	r0, [pc, #12]	@ (8001aec <MX_TIM2_Init+0xb0>)
 8001ade:	f000 f9af 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	@ 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000110 	.word	0x20000110

08001af0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b12:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b14:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <MX_TIM3_Init+0xc8>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100 - 1 ;
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b1a:	2263      	movs	r2, #99	@ 0x63
 8001b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b38:	481e      	ldr	r0, [pc, #120]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b3a:	f001 fc71 	bl	8003420 <HAL_TIM_PWM_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b44:	f7ff fc7a 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b50:	f107 0320 	add.w	r3, r7, #32
 8001b54:	4619      	mov	r1, r3
 8001b56:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b58:	f002 fcd2 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b62:	f7ff fc6b 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b66:	2360      	movs	r3, #96	@ 0x60
 8001b68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b80:	f002 f844 	bl	8003c0c <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001b8a:	f7ff fc57 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2204      	movs	r2, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001b96:	f002 f839 	bl	8003c0c <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001ba0:	f7ff fc4c 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <MX_TIM3_Init+0xc4>)
 8001ba6:	f000 f94b 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000158 	.word	0x20000158
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bd8:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001bda:	4a32      	ldr	r2, [pc, #200]	@ (8001ca4 <MX_TIM4_Init+0xe8>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100 - 1;
 8001bde:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001be0:	2263      	movs	r2, #99	@ 0x63
 8001be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bfe:	4828      	ldr	r0, [pc, #160]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c00:	f001 fd0e 	bl	8003620 <HAL_TIM_IC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f7ff fc17 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4820      	ldr	r0, [pc, #128]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c1e:	f002 fc6f 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c28:	f7ff fc08 	bl	800143c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c44:	f001 ff46 	bl	8003ad4 <HAL_TIM_IC_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001c4e:	f7ff fbf5 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	2204      	movs	r2, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4811      	ldr	r0, [pc, #68]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c5a:	f001 ff3b 	bl	8003ad4 <HAL_TIM_IC_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001c64:	f7ff fbea 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c70:	f001 ff30 	bl	8003ad4 <HAL_TIM_IC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001c7a:	f7ff fbdf 	bl	800143c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	220c      	movs	r2, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_TIM4_Init+0xe4>)
 8001c8a:	f001 ff23 	bl	8003ad4 <HAL_TIM_IC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001c94:	f7ff fbd2 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001a0 	.word	0x200001a0
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <MX_TIM11_Init+0x44>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100 - 1;
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cb4:	2263      	movs	r2, #99	@ 0x63
 8001cb6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_TIM11_Init+0x40>)
 8001cd4:	f001 fa98 	bl	8003208 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001cde:	f7ff fbad 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001e8 	.word	0x200001e8
 8001cec:	40014800 	.word	0x40014800

08001cf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d1e:	e012      	b.n	8001d46 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <HAL_TIM_PWM_MspInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10d      	bne.n	8001d46 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40000400 	.word	0x40000400

08001d5c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	@ (8001df0 <HAL_TIM_IC_MspInit+0x94>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d134      	bne.n	8001de8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_TIM_IC_MspInit+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4809      	ldr	r0, [pc, #36]	@ (8001df8 <HAL_TIM_IC_MspInit+0x9c>)
 8001dd4:	f000 fb98 	bl	8002508 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2105      	movs	r1, #5
 8001ddc:	201e      	movs	r0, #30
 8001dde:	f000 fad7 	bl	8002390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001de2:	201e      	movs	r0, #30
 8001de4:	f000 faf0 	bl	80023c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	@ 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400

08001dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <HAL_TIM_Base_MspInit+0x3c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10d      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_TIM_Base_MspInit+0x40>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x40>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <HAL_TIM_Base_MspInit+0x40>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40014800 	.word	0x40014800
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	@ 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e60:	d11e      	bne.n	8001ea0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4816      	ldr	r0, [pc, #88]	@ (8001ef4 <HAL_TIM_MspPostInit+0xb4>)
 8001e9a:	f000 fb35 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e9e:	e022      	b.n	8001ee6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <HAL_TIM_MspPostInit+0xb8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_TIM_MspPostInit+0xb0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ec6:	2330      	movs	r3, #48	@ 0x30
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4806      	ldr	r0, [pc, #24]	@ (8001efc <HAL_TIM_MspPostInit+0xbc>)
 8001ee2:	f000 fb11 	bl	8002508 <HAL_GPIO_Init>
}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40020400 	.word	0x40020400

08001f00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <MX_USART1_UART_Init+0x50>)
 8001f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f26:	220c      	movs	r2, #12
 8001f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_USART1_UART_Init+0x4c>)
 8001f38:	f002 fb64 	bl	8004604 <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f42:	f7ff fa7b 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000230 	.word	0x20000230
 8001f50:	40011000 	.word	0x40011000

08001f54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	@ (8001fa4 <MX_USART2_UART_Init+0x50>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	f002 fb3a 	bl	8004604 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f96:	f7ff fa51 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000278 	.word	0x20000278
 8001fa4:	40004400 	.word	0x40004400

08001fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a49      	ldr	r2, [pc, #292]	@ (80020ec <HAL_UART_MspInit+0x144>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d153      	bne.n	8002072 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	4b48      	ldr	r3, [pc, #288]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	4a47      	ldr	r2, [pc, #284]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fda:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a40      	ldr	r2, [pc, #256]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b3a      	ldr	r3, [pc, #232]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a39      	ldr	r2, [pc, #228]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800201e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002030:	2307      	movs	r3, #7
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	482e      	ldr	r0, [pc, #184]	@ (80020f4 <HAL_UART_MspInit+0x14c>)
 800203c:	f000 fa64 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002040:	2308      	movs	r3, #8
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002050:	2307      	movs	r3, #7
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4827      	ldr	r0, [pc, #156]	@ (80020f8 <HAL_UART_MspInit+0x150>)
 800205c:	f000 fa54 	bl	8002508 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2025      	movs	r0, #37	@ 0x25
 8002066:	f000 f993 	bl	8002390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206a:	2025      	movs	r0, #37	@ 0x25
 800206c:	f000 f9ac 	bl	80023c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002070:	e038      	b.n	80020e4 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <HAL_UART_MspInit+0x154>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d133      	bne.n	80020e4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208a:	6413      	str	r3, [r2, #64]	@ 0x40
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_UART_MspInit+0x148>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b4:	230c      	movs	r3, #12
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c4:	2307      	movs	r3, #7
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <HAL_UART_MspInit+0x14c>)
 80020d0:	f000 fa1a 	bl	8002508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2105      	movs	r1, #5
 80020d8:	2026      	movs	r0, #38	@ 0x26
 80020da:	f000 f959 	bl	8002390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020de:	2026      	movs	r0, #38	@ 0x26
 80020e0:	f000 f972 	bl	80023c8 <HAL_NVIC_EnableIRQ>
}
 80020e4:	bf00      	nop
 80020e6:	3730      	adds	r7, #48	@ 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40004400 	.word	0x40004400

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002138 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002104:	f7ff fc88 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	@ (8002140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	@ (800214c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212e:	f006 f931 	bl	8008394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7ff f8b5 	bl	80012a0 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002144:	080085cc 	.word	0x080085cc
  ldr r2, =_sbss
 8002148:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800214c:	20004dec 	.word	0x20004dec

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f8fc 	bl	800237a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2005      	movs	r0, #5
 8002184:	f7ff fb92 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fb64 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	200002c0 	.word	0x200002c0

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	200002c0 	.word	0x200002c0

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000000c 	.word	0x2000000c

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	@ (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	@ (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	@ (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	@ 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff4c 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a2:	f7ff ff61 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f7ff ffb1 	bl	8002314 <NVIC_EncodePriority>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff80 	bl	80022c0 <__NVIC_SetPriority>
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff54 	bl	8002284 <__NVIC_EnableIRQ>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff fee5 	bl	80021c0 <HAL_GetTick>
 80023f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e052      	b.n	80024bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0216 	bic.w	r2, r2, #22
 8002424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_DMA_Abort+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0208 	bic.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002466:	e013      	b.n	8002490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002468:	f7ff feaa 	bl	80021c0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b05      	cmp	r3, #5
 8002474:	d90c      	bls.n	8002490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e015      	b.n	80024bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e4      	bne.n	8002468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	223f      	movs	r2, #63	@ 0x3f
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00c      	b.n	80024fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2205      	movs	r2, #5
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e159      	b.n	80027d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8148 	bne.w	80027d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a2 	beq.w	80027d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	@ (80027f8 <HAL_GPIO_Init+0x2f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x202>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	@ (80027fc <HAL_GPIO_Init+0x2f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1fe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <HAL_GPIO_Init+0x2f8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_GPIO_Init+0x2fc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1f6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	@ (8002808 <HAL_GPIO_Init+0x300>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1f2>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fa:	2307      	movs	r3, #7
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x204>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <HAL_GPIO_Init+0x304>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a24      	ldr	r2, [pc, #144]	@ (800280c <HAL_GPIO_Init+0x304>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1a      	ldr	r2, [pc, #104]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f aea2 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e001      	b.n	8002832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002892:	4b88      	ldr	r3, [pc, #544]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fc48 	bl	80021c0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fc44 	bl	80021c0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fc34 	bl	80021c0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc30 	bl	80021c0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fbe9 	bl	80021c0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fbe5 	bl	80021c0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fbc8 	bl	80021c0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff fbc4 	bl	80021c0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fba8 	bl	80021c0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fba4 	bl	80021c0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fb91 	bl	80021c0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fb8d 	bl	80021c0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb4d 	bl	80021c0 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff fb49 	bl	80021c0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fb0e 	bl	80021c0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fb0a 	bl	80021c0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7ff faf8 	bl	80021c0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7ff faf4 	bl	80021c0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fac8 	bl	80021c0 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff fac4 	bl	80021c0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fa9d 	bl	80021c0 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff fa99 	bl	80021c0 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa86 	bl	80021c0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa82 	bl	80021c0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7ff f9b4 	bl	80021c0 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7ff f9b0 	bl	80021c0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fcce 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	080085a4 	.word	0x080085a4
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	@ 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003040:	f7fd f8ce 	bl	80001e0 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd f874 	bl	80001e0 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	080085b4 	.word	0x080085b4

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	080085b4 	.word	0x080085b4

080031a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	220f      	movs	r2, #15
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <HAL_RCC_GetClockConfig+0x5c>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_RCC_GetClockConfig+0x5c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCC_GetClockConfig+0x5c>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_GetClockConfig+0x5c>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031e6:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <HAL_RCC_GetClockConfig+0x60>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0207 	and.w	r2, r3, #7
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40023c00 	.word	0x40023c00

08003208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e041      	b.n	800329e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fde4 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 fe04 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d001      	beq.n	80032c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e03c      	b.n	800333a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_TIM_Base_Start+0xa0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_TIM_Base_Start+0x5c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d013      	beq.n	8003304 <HAL_TIM_Base_Start+0x5c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	@ (800334c <HAL_TIM_Base_Start+0xa4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start+0x5c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_TIM_Base_Start+0xa8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start+0x5c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <HAL_TIM_Base_Start+0xac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start+0x5c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_TIM_Base_Start+0xb0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40014000 	.word	0x40014000

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e044      	b.n	80033fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1e      	ldr	r2, [pc, #120]	@ (800340c <HAL_TIM_Base_Start_IT+0xb0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x6c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339e:	d013      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x6c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_TIM_Base_Start_IT+0xb4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x6c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_TIM_Base_Start_IT+0xb8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x6c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_TIM_Base_Start_IT+0xbc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x6c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_TIM_Base_Start_IT+0xc0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d111      	bne.n	80033ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d010      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	e007      	b.n	80033fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000

08003420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e041      	b.n	80034b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe fc52 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fcf8 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_TIM_PWM_Start+0x24>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e022      	b.n	800352a <HAL_TIM_PWM_Start+0x6a>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d109      	bne.n	80034fe <HAL_TIM_PWM_Start+0x3e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e015      	b.n	800352a <HAL_TIM_PWM_Start+0x6a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d109      	bne.n	8003518 <HAL_TIM_PWM_Start+0x58>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e008      	b.n	800352a <HAL_TIM_PWM_Start+0x6a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e068      	b.n	8003604 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start+0x82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	e013      	b.n	800356a <HAL_TIM_PWM_Start+0xaa>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start+0x92>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003550:	e00b      	b.n	800356a <HAL_TIM_PWM_Start+0xaa>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d104      	bne.n	8003562 <HAL_TIM_PWM_Start+0xa2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003560:	e003      	b.n	800356a <HAL_TIM_PWM_Start+0xaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ff9e 	bl	80044b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_TIM_PWM_Start+0x14c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d107      	bne.n	8003592 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_TIM_PWM_Start+0x14c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_TIM_PWM_Start+0x10e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a4:	d013      	beq.n	80035ce <HAL_TIM_PWM_Start+0x10e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_TIM_PWM_Start+0x150>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIM_PWM_Start+0x10e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <HAL_TIM_PWM_Start+0x154>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_TIM_PWM_Start+0x10e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_TIM_PWM_Start+0x158>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIM_PWM_Start+0x10e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <HAL_TIM_PWM_Start+0x15c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d111      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d010      	beq.n	8003602 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f0:	e007      	b.n	8003602 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe fb88 	bl	8001d5c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 fbf8 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_TIM_IC_Start_IT+0x1e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	e013      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x46>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0x2e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x46>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x3e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e003      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x46>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_TIM_IC_Start_IT+0x58>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e013      	b.n	8003740 <HAL_TIM_IC_Start_IT+0x80>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d104      	bne.n	8003728 <HAL_TIM_IC_Start_IT+0x68>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e00b      	b.n	8003740 <HAL_TIM_IC_Start_IT+0x80>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d104      	bne.n	8003738 <HAL_TIM_IC_Start_IT+0x78>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e003      	b.n	8003740 <HAL_TIM_IC_Start_IT+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800373e:	b2db      	uxtb	r3, r3
 8003740:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003742:	7bbb      	ldrb	r3, [r7, #14]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003748:	7b7b      	ldrb	r3, [r7, #13]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0c2      	b.n	80038d8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003760:	e013      	b.n	800378a <HAL_TIM_IC_Start_IT+0xca>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0xb2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003770:	e00b      	b.n	800378a <HAL_TIM_IC_Start_IT+0xca>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_IT+0xc2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003780:	e003      	b.n	800378a <HAL_TIM_IC_Start_IT+0xca>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_TIM_IC_Start_IT+0xda>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003798:	e013      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x102>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d104      	bne.n	80037aa <HAL_TIM_IC_Start_IT+0xea>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a8:	e00b      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x102>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_IC_Start_IT+0xfa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b8:	e003      	b.n	80037c2 <HAL_TIM_IC_Start_IT+0x102>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d841      	bhi.n	800384c <HAL_TIM_IC_Start_IT+0x18c>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_TIM_IC_Start_IT+0x110>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	08003805 	.word	0x08003805
 80037d4:	0800384d 	.word	0x0800384d
 80037d8:	0800384d 	.word	0x0800384d
 80037dc:	0800384d 	.word	0x0800384d
 80037e0:	08003817 	.word	0x08003817
 80037e4:	0800384d 	.word	0x0800384d
 80037e8:	0800384d 	.word	0x0800384d
 80037ec:	0800384d 	.word	0x0800384d
 80037f0:	08003829 	.word	0x08003829
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	0800383b 	.word	0x0800383b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0202 	orr.w	r2, r2, #2
 8003812:	60da      	str	r2, [r3, #12]
      break;
 8003814:	e01d      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	60da      	str	r2, [r3, #12]
      break;
 8003826:	e014      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	60da      	str	r2, [r3, #12]
      break;
 8003838:	e00b      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0210 	orr.w	r2, r2, #16
 8003848:	60da      	str	r2, [r3, #12]
      break;
 800384a:	e002      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	bf00      	nop
  }

  if (status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13e      	bne.n	80038d6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fe27 	bl	80044b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_TIM_IC_Start_IT+0x220>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003878:	d013      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_TIM_IC_Start_IT+0x224>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <HAL_TIM_IC_Start_IT+0x228>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <HAL_TIM_IC_Start_IT+0x22c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a14      	ldr	r2, [pc, #80]	@ (80038f0 <HAL_TIM_IC_Start_IT+0x230>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d111      	bne.n	80038c6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d010      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	e007      	b.n	80038d6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000

080038f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d020      	beq.n	8003958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01b      	beq.n	8003958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0202 	mvn.w	r2, #2
 8003928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc ffe0 	bl	8000904 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa66 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa6d 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d020      	beq.n	80039a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01b      	beq.n	80039a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0204 	mvn.w	r2, #4
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fc ffba 	bl	8000904 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa40 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fa47 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0208 	mvn.w	r2, #8
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2204      	movs	r2, #4
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fc ff94 	bl	8000904 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa1a 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa21 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0210 	mvn.w	r2, #16
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2208      	movs	r2, #8
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fc ff6e 	bl	8000904 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9f4 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f9fb 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0201 	mvn.w	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fcdc 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fdb6 	bl	80045f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9cc 	bl	8003e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0220 	mvn.w	r2, #32
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fd88 	bl	80045dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e088      	b.n	8003c04 <HAL_TIM_IC_ConfigChannel+0x130>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b10:	f000 fbb2 	bl	8004278 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 020c 	bic.w	r2, r2, #12
 8003b22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	e060      	b.n	8003bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d11c      	bne.n	8003b78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003b4e:	f000 fbfb 	bl	8004348 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6999      	ldr	r1, [r3, #24]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
 8003b76:	e040      	b.n	8003bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11b      	bne.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b8e:	f000 fc18 	bl	80043c2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 020c 	bic.w	r2, r2, #12
 8003ba0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	61da      	str	r2, [r3, #28]
 8003bb4:	e021      	b.n	8003bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d11c      	bne.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003bcc:	f000 fc35 	bl	800443a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69d9      	ldr	r1, [r3, #28]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	61da      	str	r2, [r3, #28]
 8003bf4:	e001      	b.n	8003bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0ae      	b.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	f200 809f 	bhi.w	8003d78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003d79 	.word	0x08003d79
 8003c48:	08003d79 	.word	0x08003d79
 8003c4c:	08003d79 	.word	0x08003d79
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003d79 	.word	0x08003d79
 8003c58:	08003d79 	.word	0x08003d79
 8003c5c:	08003d79 	.word	0x08003d79
 8003c60:	08003cf7 	.word	0x08003cf7
 8003c64:	08003d79 	.word	0x08003d79
 8003c68:	08003d79 	.word	0x08003d79
 8003c6c:	08003d79 	.word	0x08003d79
 8003c70:	08003d37 	.word	0x08003d37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f970 	bl	8003f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
      break;
 8003cb2:	e064      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f9b6 	bl	800402c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
      break;
 8003cf4:	e043      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa01 	bl	8004104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0208 	orr.w	r2, r2, #8
 8003d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
      break;
 8003d34:	e023      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fa4b 	bl	80041d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
      break;
 8003d76:	e002      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d831      	bhi.n	8003e08 <HAL_TIM_ReadCapturedValue+0x78>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <HAL_TIM_ReadCapturedValue+0x1c>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003e09 	.word	0x08003e09
 8003dc4:	08003e09 	.word	0x08003e09
 8003dc8:	08003e09 	.word	0x08003e09
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003e09 	.word	0x08003e09
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e09 	.word	0x08003e09
 8003ddc:	08003dff 	.word	0x08003dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	60fb      	str	r3, [r7, #12]

      break;
 8003de8:	e00f      	b.n	8003e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	60fb      	str	r3, [r7, #12]

      break;
 8003df2:	e00a      	b.n	8003e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	60fb      	str	r3, [r7, #12]

      break;
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	60fb      	str	r3, [r7, #12]

      break;
 8003e06:	e000      	b.n	8003e0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e08:	bf00      	nop
  }

  return tmpreg;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a37      	ldr	r2, [pc, #220]	@ (8003f44 <TIM_Base_SetConfig+0xf0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00f      	beq.n	8003e8c <TIM_Base_SetConfig+0x38>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d00b      	beq.n	8003e8c <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a34      	ldr	r2, [pc, #208]	@ (8003f48 <TIM_Base_SetConfig+0xf4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a33      	ldr	r2, [pc, #204]	@ (8003f4c <TIM_Base_SetConfig+0xf8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a32      	ldr	r2, [pc, #200]	@ (8003f50 <TIM_Base_SetConfig+0xfc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	@ (8003f44 <TIM_Base_SetConfig+0xf0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <TIM_Base_SetConfig+0xf4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	@ (8003f4c <TIM_Base_SetConfig+0xf8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <TIM_Base_SetConfig+0xfc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <TIM_Base_SetConfig+0x100>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a21      	ldr	r2, [pc, #132]	@ (8003f58 <TIM_Base_SetConfig+0x104>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	@ (8003f5c <TIM_Base_SetConfig+0x108>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <TIM_Base_SetConfig+0xf0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d103      	bne.n	8003f1e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 0201 	bic.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <TIM_OC1_SetConfig+0xc8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	@ (8004028 <TIM_OC1_SetConfig+0xc8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000

0800402c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f023 0210 	bic.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <TIM_OC2_SetConfig+0xd4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <TIM_OC2_SetConfig+0xd4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d113      	bne.n	80040d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000

08004104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <TIM_OC3_SetConfig+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10d      	bne.n	800417e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC3_SetConfig+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000

080041d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a10      	ldr	r2, [pc, #64]	@ (8004274 <TIM_OC4_SetConfig+0x9c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000

08004278 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 0201 	bic.w	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a24      	ldr	r2, [pc, #144]	@ (8004334 <TIM_TI1_SetConfig+0xbc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_TI1_SetConfig+0x56>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ac:	d00f      	beq.n	80042ce <TIM_TI1_SetConfig+0x56>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a21      	ldr	r2, [pc, #132]	@ (8004338 <TIM_TI1_SetConfig+0xc0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_TI1_SetConfig+0x56>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a20      	ldr	r2, [pc, #128]	@ (800433c <TIM_TI1_SetConfig+0xc4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_TI1_SetConfig+0x56>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <TIM_TI1_SetConfig+0xc8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_TI1_SetConfig+0x56>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <TIM_TI1_SetConfig+0xcc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <TIM_TI1_SetConfig+0x5a>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <TIM_TI1_SetConfig+0x5c>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e003      	b.n	80042f2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f023 030a 	bic.w	r3, r3, #10
 800430c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f003 030a 	and.w	r3, r3, #10
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40014000 	.word	0x40014000

08004348 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	031b      	lsls	r3, r3, #12
 800438c:	b29b      	uxth	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800439a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	b2db      	uxtb	r3, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004412:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004478:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	b29b      	uxth	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2201      	movs	r2, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	401a      	ands	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e050      	b.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004564:	d013      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a18      	ldr	r2, [pc, #96]	@ (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a16      	ldr	r2, [pc, #88]	@ (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10c      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40014000 	.word	0x40014000

080045dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e042      	b.n	800469c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fcbc 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	@ 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fdd3 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800465c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800466c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800467c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d175      	bne.n	80047b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Transmit+0x2c>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e06e      	b.n	80047b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	@ 0x21
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fd6d 	bl	80021c0 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fc:	d108      	bne.n	8004710 <HAL_UART_Transmit+0x6c>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e003      	b.n	8004718 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004718:	e02e      	b.n	8004778 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2180      	movs	r1, #128	@ 0x80
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fb37 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e03a      	b.n	80047b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1cb      	bne.n	800471a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	@ 0x40
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fb03 	bl	8004d98 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	4613      	mov	r3, r2
 80047c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d112      	bne.n	80047fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Receive_IT+0x26>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e00b      	b.n	80047fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	461a      	mov	r2, r3
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fb2a 	bl	8004e4a <UART_Start_Receive_IT>
 80047f6:	4603      	mov	r3, r0
 80047f8:	e000      	b.n	80047fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
  }
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b0ba      	sub	sp, #232	@ 0xe8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_UART_IRQHandler+0x66>
 8004856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fc07 	bl	8005076 <UART_Receive_IT>
      return;
 8004868:	e273      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800486a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80de 	beq.w	8004a30 <HAL_UART_IRQHandler+0x22c>
 8004874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80d1 	beq.w	8004a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_UART_IRQHandler+0xae>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_UART_IRQHandler+0xd2>
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_UART_IRQHandler+0xf6>
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <HAL_UART_IRQHandler+0x126>
 8004906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0208 	orr.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 820a 	beq.w	8004d48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_UART_IRQHandler+0x14e>
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb92 	bl	8005076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b40      	cmp	r3, #64	@ 0x40
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <HAL_UART_IRQHandler+0x17a>
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d04f      	beq.n	8004a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa9d 	bl	8004ebe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d141      	bne.n	8004a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1d9      	bne.n	8004992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d013      	beq.n	8004a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	4a8a      	ldr	r2, [pc, #552]	@ (8004c14 <HAL_UART_IRQHandler+0x410>)
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fd66 	bl	80024c4 <HAL_DMA_Abort_IT>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00e      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9ac 	bl	8004d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e00a      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9a8 	bl	8004d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e006      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9a4 	bl	8004d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a2a:	e18d      	b.n	8004d48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	bf00      	nop
    return;
 8004a2e:	e18b      	b.n	8004d48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 8167 	bne.w	8004d08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8160 	beq.w	8004d08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8159 	beq.w	8004d08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a76:	2b40      	cmp	r3, #64	@ 0x40
 8004a78:	f040 80ce 	bne.w	8004c18 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a9 	beq.w	8004be4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	f080 80a2 	bcs.w	8004be4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab2:	f000 8088 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1d9      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e1      	bne.n	8004b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b96:	f023 0310 	bic.w	r3, r3, #16
 8004b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ba8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004baa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e3      	bne.n	8004b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd fc0f 	bl	80023e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8cf 	bl	8004d80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004be2:	e0b3      	b.n	8004d4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f040 80ad 	bne.w	8004d4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfc:	f040 80a6 	bne.w	8004d4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8b7 	bl	8004d80 <HAL_UARTEx_RxEventCallback>
      return;
 8004c12:	e09b      	b.n	8004d4c <HAL_UART_IRQHandler+0x548>
 8004c14:	08004f85 	.word	0x08004f85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 808e 	beq.w	8004d50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8089 	beq.w	8004d50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ce0:	61fa      	str	r2, [r7, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	617b      	str	r3, [r7, #20]
   return(result);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f83d 	bl	8004d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d06:	e023      	b.n	8004d50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_UART_IRQHandler+0x524>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f940 	bl	8004fa6 <UART_Transmit_IT>
    return;
 8004d26:	e014      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x54e>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f980 	bl	8005046 <UART_EndTransmit_IT>
    return;
 8004d46:	e004      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
    return;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d50:	bf00      	nop
  }
}
 8004d52:	37e8      	adds	r7, #232	@ 0xe8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da8:	e03b      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db0:	d037      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fd fa05 	bl	80021c0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e03a      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d023      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b80      	cmp	r3, #128	@ 0x80
 8004dde:	d020      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b40      	cmp	r3, #64	@ 0x40
 8004de4:	d01d      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d116      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f857 	bl	8004ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2208      	movs	r2, #8
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d0b4      	beq.n	8004daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2222      	movs	r2, #34	@ 0x22
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0220 	orr.w	r2, r2, #32
 8004eae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b095      	sub	sp, #84	@ 0x54
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ee6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d119      	bne.n	8004f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0310 	bic.w	r3, r3, #16
 8004f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f56:	61ba      	str	r2, [r7, #24]
 8004f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f78:	bf00      	nop
 8004f7a:	3754      	adds	r7, #84	@ 0x54
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fee7 	bl	8004d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b21      	cmp	r3, #33	@ 0x21
 8004fb8:	d13e      	bne.n	8005038 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc2:	d114      	bne.n	8004fee <UART_Transmit_IT+0x48>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d110      	bne.n	8004fee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	1c9a      	adds	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]
 8004fec:	e008      	b.n	8005000 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6211      	str	r1, [r2, #32]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29b      	uxth	r3, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4619      	mov	r1, r3
 800500e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10f      	bne.n	8005034 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005022:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005032:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe76 	bl	8004d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b08c      	sub	sp, #48	@ 0x30
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b22      	cmp	r3, #34	@ 0x22
 8005090:	f040 80aa 	bne.w	80051e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509c:	d115      	bne.n	80050ca <UART_Receive_IT+0x54>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d111      	bne.n	80050ca <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050c8:	e024      	b.n	8005114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d007      	beq.n	80050ea <UART_Receive_IT+0x74>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <UART_Receive_IT+0x82>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e008      	b.n	800510a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005104:	b2da      	uxtb	r2, r3
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4619      	mov	r1, r3
 8005122:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005124:	2b00      	cmp	r3, #0
 8005126:	d15d      	bne.n	80051e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0220 	bic.w	r2, r2, #32
 8005136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	2b01      	cmp	r3, #1
 800516c:	d135      	bne.n	80051da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	613b      	str	r3, [r7, #16]
   return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	623a      	str	r2, [r7, #32]
 8005196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d10a      	bne.n	80051cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fdd4 	bl	8004d80 <HAL_UARTEx_RxEventCallback>
 80051d8:	e002      	b.n	80051e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb faca 	bl	8000774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e002      	b.n	80051ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3730      	adds	r7, #48	@ 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0c0      	sub	sp, #256	@ 0x100
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	ea40 0301 	orr.w	r3, r0, r1
 800521c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800524c:	f021 010c 	bic.w	r1, r1, #12
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800525a:	430b      	orrs	r3, r1
 800525c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526e:	6999      	ldr	r1, [r3, #24]
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	ea40 0301 	orr.w	r3, r0, r1
 800527a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8f      	ldr	r3, [pc, #572]	@ (80054c0 <UART_SetConfig+0x2cc>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0xa0>
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8d      	ldr	r3, [pc, #564]	@ (80054c4 <UART_SetConfig+0x2d0>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d104      	bne.n	800529e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fd ff72 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8005298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800529c:	e003      	b.n	80052a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529e:	f7fd ff59 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 80052a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	f040 810c 	bne.w	80054cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052ce:	415b      	adcs	r3, r3
 80052d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052d6:	4621      	mov	r1, r4
 80052d8:	eb12 0801 	adds.w	r8, r2, r1
 80052dc:	4629      	mov	r1, r5
 80052de:	eb43 0901 	adc.w	r9, r3, r1
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f6:	4690      	mov	r8, r2
 80052f8:	4699      	mov	r9, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	eb18 0303 	adds.w	r3, r8, r3
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005304:	462b      	mov	r3, r5
 8005306:	eb49 0303 	adc.w	r3, r9, r3
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800531a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800531e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005322:	460b      	mov	r3, r1
 8005324:	18db      	adds	r3, r3, r3
 8005326:	653b      	str	r3, [r7, #80]	@ 0x50
 8005328:	4613      	mov	r3, r2
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005338:	f7fa ff52 	bl	80001e0 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <UART_SetConfig+0x2d4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005354:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005364:	415b      	adcs	r3, r3
 8005366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800536c:	4641      	mov	r1, r8
 800536e:	eb12 0a01 	adds.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb43 0b01 	adc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800538c:	4692      	mov	sl, r2
 800538e:	469b      	mov	fp, r3
 8005390:	4643      	mov	r3, r8
 8005392:	eb1a 0303 	adds.w	r3, sl, r3
 8005396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800539a:	464b      	mov	r3, r9
 800539c:	eb4b 0303 	adc.w	r3, fp, r3
 80053a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053ce:	f7fa ff07 	bl	80001e0 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	@ 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053ee:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 2302 	umull	r2, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053fc:	441c      	add	r4, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005408:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800540c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005418:	415b      	adcs	r3, r3
 800541a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800541c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6339      	str	r1, [r7, #48]	@ 0x30
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800546c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005474:	460b      	mov	r3, r1
 8005476:	18db      	adds	r3, r3, r3
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547a:	4613      	mov	r3, r2
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800548a:	f7fa fea9 	bl	80001e0 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <UART_SetConfig+0x2d4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	@ 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	3332      	adds	r3, #50	@ 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 0207 	and.w	r2, r3, #7
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054bc:	e106      	b.n	80056cc <UART_SetConfig+0x4d8>
 80054be:	bf00      	nop
 80054c0:	40011000 	.word	0x40011000
 80054c4:	40011400 	.word	0x40011400
 80054c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	415b      	adcs	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ee:	4641      	mov	r1, r8
 80054f0:	1854      	adds	r4, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb43 0501 	adc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005514:	464b      	mov	r3, r9
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800552a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800553a:	4629      	mov	r1, r5
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005544:	4621      	mov	r1, r4
 8005546:	008a      	lsls	r2, r1, #2
 8005548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800554c:	f7fa fe48 	bl	80001e0 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b60      	ldr	r3, [pc, #384]	@ (80056d8 <UART_SetConfig+0x4e4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800556c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	61b9      	str	r1, [r7, #24]
 8005578:	415b      	adcs	r3, r3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	4641      	mov	r1, r8
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	4649      	mov	r1, r9
 8005588:	414b      	adcs	r3, r1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005598:	4659      	mov	r1, fp
 800559a:	00cb      	lsls	r3, r1, #3
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a2:	4651      	mov	r1, sl
 80055a4:	00ca      	lsls	r2, r1, #3
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	4642      	mov	r2, r8
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055b4:	464b      	mov	r3, r9
 80055b6:	460a      	mov	r2, r1
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055d8:	4649      	mov	r1, r9
 80055da:	008b      	lsls	r3, r1, #2
 80055dc:	4641      	mov	r1, r8
 80055de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e2:	4641      	mov	r1, r8
 80055e4:	008a      	lsls	r2, r1, #2
 80055e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055ea:	f7fa fdf9 	bl	80001e0 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b38      	ldr	r3, [pc, #224]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	@ 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	@ 0x32
 8005608:	4a33      	ldr	r2, [pc, #204]	@ (80056d8 <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005614:	441c      	add	r4, r3
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	673b      	str	r3, [r7, #112]	@ 0x70
 800561e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	415b      	adcs	r3, r3
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005666:	464b      	mov	r3, r9
 8005668:	460a      	mov	r2, r1
 800566a:	eb42 0303 	adc.w	r3, r2, r3
 800566e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	663b      	str	r3, [r7, #96]	@ 0x60
 800567a:	667a      	str	r2, [r7, #100]	@ 0x64
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800569a:	f7fa fda1 	bl	80001e0 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	@ 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	@ 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <__NVIC_SetPriority>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	db0a      	blt.n	8005706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	490c      	ldr	r1, [pc, #48]	@ (8005728 <__NVIC_SetPriority+0x4c>)
 80056f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	440b      	add	r3, r1
 8005700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005704:	e00a      	b.n	800571c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4908      	ldr	r1, [pc, #32]	@ (800572c <__NVIC_SetPriority+0x50>)
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	3b04      	subs	r3, #4
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	440b      	add	r3, r1
 800571a:	761a      	strb	r2, [r3, #24]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000e100 	.word	0xe000e100
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <SysTick_Handler+0x1c>)
 8005736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005738:	f001 fd46 	bl	80071c8 <xTaskGetSchedulerState>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005742:	f002 fb41 	bl	8007dc8 <xPortSysTickHandler>
  }
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	e000e010 	.word	0xe000e010

08005750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005754:	2100      	movs	r1, #0
 8005756:	f06f 0004 	mvn.w	r0, #4
 800575a:	f7ff ffbf 	bl	80056dc <__NVIC_SetPriority>
#endif
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576a:	f3ef 8305 	mrs	r3, IPSR
 800576e:	603b      	str	r3, [r7, #0]
  return(result);
 8005770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005776:	f06f 0305 	mvn.w	r3, #5
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	e00c      	b.n	8005798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <osKernelInitialize+0x44>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005786:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <osKernelInitialize+0x44>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800578c:	2300      	movs	r3, #0
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	e002      	b.n	8005798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005798:	687b      	ldr	r3, [r7, #4]
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200002c4 	.word	0x200002c4

080057ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b2:	f3ef 8305 	mrs	r3, IPSR
 80057b6:	603b      	str	r3, [r7, #0]
  return(result);
 80057b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80057be:	f06f 0305 	mvn.w	r3, #5
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	e010      	b.n	80057e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057c6:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <osKernelStart+0x48>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d109      	bne.n	80057e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057ce:	f7ff ffbf 	bl	8005750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057d2:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <osKernelStart+0x48>)
 80057d4:	2202      	movs	r2, #2
 80057d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057d8:	f001 f892 	bl	8006900 <vTaskStartScheduler>
      stat = osOK;
 80057dc:	2300      	movs	r3, #0
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	e002      	b.n	80057e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057e8:	687b      	ldr	r3, [r7, #4]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200002c4 	.word	0x200002c4

080057f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	@ 0x38
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005808:	f3ef 8305 	mrs	r3, IPSR
 800580c:	617b      	str	r3, [r7, #20]
  return(result);
 800580e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005810:	2b00      	cmp	r3, #0
 8005812:	d17e      	bne.n	8005912 <osThreadNew+0x11a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d07b      	beq.n	8005912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800581e:	2318      	movs	r3, #24
 8005820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800582a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d045      	beq.n	80058be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <osThreadNew+0x48>
        name = attr->name;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <osThreadNew+0x6e>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b38      	cmp	r3, #56	@ 0x38
 8005858:	d805      	bhi.n	8005866 <osThreadNew+0x6e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <osThreadNew+0x72>
        return (NULL);
 8005866:	2300      	movs	r3, #0
 8005868:	e054      	b.n	8005914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <osThreadNew+0xa8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2ba7      	cmp	r3, #167	@ 0xa7
 8005888:	d90a      	bls.n	80058a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osThreadNew+0xa8>
        mem = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e010      	b.n	80058c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10c      	bne.n	80058c2 <osThreadNew+0xca>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <osThreadNew+0xca>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <osThreadNew+0xca>
          mem = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e001      	b.n	80058c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d110      	bne.n	80058ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058d0:	9202      	str	r2, [sp, #8]
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6a3a      	ldr	r2, [r7, #32]
 80058dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fe1a 	bl	8006518 <xTaskCreateStatic>
 80058e4:	4603      	mov	r3, r0
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e013      	b.n	8005912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fe68 	bl	80065d8 <xTaskCreate>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d001      	beq.n	8005912 <osThreadNew+0x11a>
            hTask = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005912:	693b      	ldr	r3, [r7, #16]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	@ 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005924:	f3ef 8305 	mrs	r3, IPSR
 8005928:	60bb      	str	r3, [r7, #8]
  return(result);
 800592a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <osDelay+0x1c>
    stat = osErrorISR;
 8005930:	f06f 0305 	mvn.w	r3, #5
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e007      	b.n	8005948 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 ffa6 	bl	8006894 <vTaskDelay>
    }
  }

  return (stat);
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a07      	ldr	r2, [pc, #28]	@ (8005980 <vApplicationGetIdleTaskMemory+0x2c>)
 8005964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <vApplicationGetIdleTaskMemory+0x30>)
 800596a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2280      	movs	r2, #128	@ 0x80
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	200002c8 	.word	0x200002c8
 8005984:	20000370 	.word	0x20000370

08005988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4a06      	ldr	r2, [pc, #24]	@ (80059b8 <vApplicationGetTimerTaskMemory+0x30>)
 800599e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20000570 	.word	0x20000570
 80059b8:	20000618 	.word	0x20000618

080059bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0208 	add.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f103 0208 	add.w	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f103 0208 	add.w	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a74:	d103      	bne.n	8005a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e00c      	b.n	8005a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3308      	adds	r3, #8
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e002      	b.n	8005a8c <vListInsert+0x2e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d2f6      	bcs.n	8005a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6892      	ldr	r2, [r2, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6852      	ldr	r2, [r2, #4]
 8005af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d103      	bne.n	8005b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b50:	f002 f8aa 	bl	8007ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	3b01      	subs	r3, #1
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	22ff      	movs	r2, #255	@ 0xff
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	22ff      	movs	r2, #255	@ 0xff
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01a      	beq.n	8005be4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 f942 	bl	8006e3c <xTaskRemoveFromEventList>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <xQueueGenericReset+0xd0>)
 8005bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	e009      	b.n	8005be4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fef1 	bl	80059bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3324      	adds	r3, #36	@ 0x24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff feec 	bl	80059bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005be4:	f002 f892 	bl	8007d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	@ 0x38
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <xQueueGenericCreateStatic+0x56>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <xQueueGenericCreateStatic+0x5a>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <xQueueGenericCreateStatic+0x5c>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	623b      	str	r3, [r7, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xQueueGenericCreateStatic+0x84>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xQueueGenericCreateStatic+0x88>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xQueueGenericCreateStatic+0x8a>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	61fb      	str	r3, [r7, #28]
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	e7fd      	b.n	8005c9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c9e:	2350      	movs	r3, #80	@ 0x50
 8005ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b50      	cmp	r3, #80	@ 0x50
 8005ca6:	d00b      	beq.n	8005cc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f805 	bl	8005cf2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	@ 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e002      	b.n	8005d14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d20:	2101      	movs	r1, #1
 8005d22:	69b8      	ldr	r0, [r7, #24]
 8005d24:	f7ff fefe 	bl	8005b24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	@ 0x38
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <xQueueGenericSend+0x34>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	e7fd      	b.n	8005d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <xQueueGenericSend+0x42>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <xQueueGenericSend+0x46>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <xQueueGenericSend+0x48>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <xQueueGenericSend+0x64>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d103      	bne.n	8005daa <xQueueGenericSend+0x72>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <xQueueGenericSend+0x76>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <xQueueGenericSend+0x78>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <xQueueGenericSend+0x94>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	623b      	str	r3, [r7, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dcc:	f001 f9fc 	bl	80071c8 <xTaskGetSchedulerState>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <xQueueGenericSend+0xa4>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <xQueueGenericSend+0xa8>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueGenericSend+0xaa>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <xQueueGenericSend+0xc6>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	61fb      	str	r3, [r7, #28]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dfe:	f001 ff53 	bl	8007ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <xQueueGenericSend+0xdc>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d129      	bne.n	8005e68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e1a:	f000 fa0f 	bl	800623c <prvCopyDataToQueue>
 8005e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	3324      	adds	r3, #36	@ 0x24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f805 	bl	8006e3c <xTaskRemoveFromEventList>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d013      	beq.n	8005e60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e38:	4b3f      	ldr	r3, [pc, #252]	@ (8005f38 <xQueueGenericSend+0x200>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	e00a      	b.n	8005e60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e50:	4b39      	ldr	r3, [pc, #228]	@ (8005f38 <xQueueGenericSend+0x200>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e60:	f001 ff54 	bl	8007d0c <vPortExitCritical>
				return pdPASS;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e063      	b.n	8005f30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e6e:	f001 ff4d 	bl	8007d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e05c      	b.n	8005f30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f83f 	bl	8006f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e8a:	f001 ff3f 	bl	8007d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e8e:	f000 fda7 	bl	80069e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e92:	f001 ff09 	bl	8007ca8 <vPortEnterCritical>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ea2:	d103      	bne.n	8005eac <xQueueGenericSend+0x174>
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eb8:	d103      	bne.n	8005ec2 <xQueueGenericSend+0x18a>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec2:	f001 ff23 	bl	8007d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ec6:	1d3a      	adds	r2, r7, #4
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f82e 	bl	8006f30 <xTaskCheckForTimeOut>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d124      	bne.n	8005f24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005edc:	f000 faa6 	bl	800642c <prvIsQueueFull>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d018      	beq.n	8005f18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	3310      	adds	r3, #16
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 ff52 	bl	8006d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ef6:	f000 fa31 	bl	800635c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005efa:	f000 fd7f 	bl	80069fc <xTaskResumeAll>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f af7c 	bne.w	8005dfe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f06:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <xQueueGenericSend+0x200>)
 8005f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	e772      	b.n	8005dfe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f1a:	f000 fa1f 	bl	800635c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1e:	f000 fd6d 	bl	80069fc <xTaskResumeAll>
 8005f22:	e76c      	b.n	8005dfe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f26:	f000 fa19 	bl	800635c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f2a:	f000 fd67 	bl	80069fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3738      	adds	r7, #56	@ 0x38
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b090      	sub	sp, #64	@ 0x40
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <xQueueGenericSendFromISR+0x3e>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <xQueueGenericSendFromISR+0x42>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueGenericSendFromISR+0x44>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d103      	bne.n	8005faa <xQueueGenericSendFromISR+0x6e>
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <xQueueGenericSendFromISR+0x72>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueGenericSendFromISR+0x74>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fcc:	f001 ff4c 	bl	8007e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fd0:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61fa      	str	r2, [r7, #28]
 8005fe6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <xQueueGenericSendFromISR+0xc2>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d12f      	bne.n	800605e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006004:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006014:	f000 f912 	bl	800623c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006018:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006020:	d112      	bne.n	8006048 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d016      	beq.n	8006058 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	3324      	adds	r3, #36	@ 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ff04 	bl	8006e3c <xTaskRemoveFromEventList>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00e      	beq.n	8006058 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e007      	b.n	8006058 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800604c:	3301      	adds	r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	b25a      	sxtb	r2, r3
 8006052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006058:	2301      	movs	r3, #1
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800605c:	e001      	b.n	8006062 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800605e:	2300      	movs	r3, #0
 8006060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006064:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800606c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800606e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006070:	4618      	mov	r0, r3
 8006072:	3740      	adds	r7, #64	@ 0x40
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08c      	sub	sp, #48	@ 0x30
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <xQueueReceive+0x32>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	623b      	str	r3, [r7, #32]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <xQueueReceive+0x40>
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <xQueueReceive+0x44>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <xQueueReceive+0x46>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <xQueueReceive+0x62>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61fb      	str	r3, [r7, #28]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060da:	f001 f875 	bl	80071c8 <xTaskGetSchedulerState>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <xQueueReceive+0x72>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <xQueueReceive+0x76>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueReceive+0x78>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <xQueueReceive+0x94>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800610c:	f001 fdcc 	bl	8007ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01f      	beq.n	800615c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006120:	f000 f8f6 	bl	8006310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	1e5a      	subs	r2, r3, #1
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006136:	3310      	adds	r3, #16
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fe7f 	bl	8006e3c <xTaskRemoveFromEventList>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006144:	4b3c      	ldr	r3, [pc, #240]	@ (8006238 <xQueueReceive+0x1c0>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006154:	f001 fdda 	bl	8007d0c <vPortExitCritical>
				return pdPASS;
 8006158:	2301      	movs	r3, #1
 800615a:	e069      	b.n	8006230 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006162:	f001 fdd3 	bl	8007d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006166:	2300      	movs	r3, #0
 8006168:	e062      	b.n	8006230 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fec5 	bl	8006f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800617e:	f001 fdc5 	bl	8007d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006182:	f000 fc2d 	bl	80069e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006186:	f001 fd8f 	bl	8007ca8 <vPortEnterCritical>
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006190:	b25b      	sxtb	r3, r3
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006196:	d103      	bne.n	80061a0 <xQueueReceive+0x128>
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ac:	d103      	bne.n	80061b6 <xQueueReceive+0x13e>
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061b6:	f001 fda9 	bl	8007d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ba:	1d3a      	adds	r2, r7, #4
 80061bc:	f107 0310 	add.w	r3, r7, #16
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 feb4 	bl	8006f30 <xTaskCheckForTimeOut>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d123      	bne.n	8006216 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d0:	f000 f916 	bl	8006400 <prvIsQueueEmpty>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	3324      	adds	r3, #36	@ 0x24
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4611      	mov	r1, r2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fdd8 	bl	8006d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ea:	f000 f8b7 	bl	800635c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061ee:	f000 fc05 	bl	80069fc <xTaskResumeAll>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d189      	bne.n	800610c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80061f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006238 <xQueueReceive+0x1c0>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	e780      	b.n	800610c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800620a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800620c:	f000 f8a6 	bl	800635c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006210:	f000 fbf4 	bl	80069fc <xTaskResumeAll>
 8006214:	e77a      	b.n	800610c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006218:	f000 f8a0 	bl	800635c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621c:	f000 fbee 	bl	80069fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006222:	f000 f8ed 	bl	8006400 <prvIsQueueEmpty>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f43f af6f 	beq.w	800610c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800622e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006230:	4618      	mov	r0, r3
 8006232:	3730      	adds	r7, #48	@ 0x30
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10d      	bne.n	8006276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d14d      	bne.n	80062fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 ffcc 	bl	8007204 <xTaskPriorityDisinherit>
 800626c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	e043      	b.n	80062fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d119      	bne.n	80062b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6858      	ldr	r0, [r3, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006284:	461a      	mov	r2, r3
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	f002 f8aa 	bl	80083e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	441a      	add	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d32b      	bcc.n	80062fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e026      	b.n	80062fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68d8      	ldr	r0, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	461a      	mov	r2, r3
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	f002 f890 	bl	80083e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	425b      	negs	r3, r3
 80062ca:	441a      	add	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d207      	bcs.n	80062ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e4:	425b      	negs	r3, r3
 80062e6:	441a      	add	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d105      	bne.n	80062fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006306:	697b      	ldr	r3, [r7, #20]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	441a      	add	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d303      	bcc.n	8006344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68d9      	ldr	r1, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	461a      	mov	r2, r3
 800634e:	6838      	ldr	r0, [r7, #0]
 8006350:	f002 f846 	bl	80083e0 <memcpy>
	}
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006364:	f001 fca0 	bl	8007ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800636e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006370:	e011      	b.n	8006396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d012      	beq.n	80063a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3324      	adds	r3, #36	@ 0x24
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fd5c 	bl	8006e3c <xTaskRemoveFromEventList>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800638a:	f000 fe35 	bl	8006ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	3b01      	subs	r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	dce9      	bgt.n	8006372 <prvUnlockQueue+0x16>
 800639e:	e000      	b.n	80063a2 <prvUnlockQueue+0x46>
					break;
 80063a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	22ff      	movs	r2, #255	@ 0xff
 80063a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80063aa:	f001 fcaf 	bl	8007d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063ae:	f001 fc7b 	bl	8007ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ba:	e011      	b.n	80063e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d012      	beq.n	80063ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3310      	adds	r3, #16
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fd37 	bl	8006e3c <xTaskRemoveFromEventList>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063d4:	f000 fe10 	bl	8006ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	3b01      	subs	r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dce9      	bgt.n	80063bc <prvUnlockQueue+0x60>
 80063e8:	e000      	b.n	80063ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	22ff      	movs	r2, #255	@ 0xff
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80063f4:	f001 fc8a 	bl	8007d0c <vPortExitCritical>
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006408:	f001 fc4e 	bl	8007ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e001      	b.n	800641e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800641e:	f001 fc75 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006434:	f001 fc38 	bl	8007ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	429a      	cmp	r2, r3
 8006442:	d102      	bne.n	800644a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e001      	b.n	800644e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800644e:	f001 fc5d 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 8006452:	68fb      	ldr	r3, [r7, #12]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e014      	b.n	8006496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800646c:	4a0f      	ldr	r2, [pc, #60]	@ (80064ac <vQueueAddToRegistry+0x50>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006478:	490c      	ldr	r1, [pc, #48]	@ (80064ac <vQueueAddToRegistry+0x50>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006482:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <vQueueAddToRegistry+0x50>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800648e:	e006      	b.n	800649e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b07      	cmp	r3, #7
 800649a:	d9e7      	bls.n	800646c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000a18 	.word	0x20000a18

080064b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064c0:	f001 fbf2 	bl	8007ca8 <vPortEnterCritical>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d0:	d103      	bne.n	80064da <vQueueWaitForMessageRestricted+0x2a>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064e6:	d103      	bne.n	80064f0 <vQueueWaitForMessageRestricted+0x40>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f0:	f001 fc0c 	bl	8007d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3324      	adds	r3, #36	@ 0x24
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fc6d 	bl	8006de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7ff ff26 	bl	800635c <prvUnlockQueue>
	}
 8006510:	bf00      	nop
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	@ 0x38
 800651c:	af04      	add	r7, sp, #16
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <xTaskCreateStatic+0x2c>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xTaskCreateStatic+0x4a>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006562:	23a8      	movs	r3, #168	@ 0xa8
 8006564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2ba8      	cmp	r3, #168	@ 0xa8
 800656a:	d00b      	beq.n	8006584 <xTaskCreateStatic+0x6c>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	61bb      	str	r3, [r7, #24]
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01e      	beq.n	80065ca <xTaskCreateStatic+0xb2>
 800658c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065a4:	2300      	movs	r3, #0
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f851 	bl	8006664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065c4:	f000 f8f6 	bl	80067b4 <prvAddNewTaskToReadyList>
 80065c8:	e001      	b.n	80065ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065ce:	697b      	ldr	r3, [r7, #20]
	}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	@ 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af04      	add	r7, sp, #16
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fc7d 	bl	8007eec <pvPortMalloc>
 80065f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00e      	beq.n	8006618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065fa:	20a8      	movs	r0, #168	@ 0xa8
 80065fc:	f001 fc76 	bl	8007eec <pvPortMalloc>
 8006600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	631a      	str	r2, [r3, #48]	@ 0x30
 800660e:	e005      	b.n	800661c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006610:	6978      	ldr	r0, [r7, #20]
 8006612:	f001 fd39 	bl	8008088 <vPortFree>
 8006616:	e001      	b.n	800661c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d017      	beq.n	8006652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	2300      	movs	r3, #0
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f80f 	bl	8006664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006646:	69f8      	ldr	r0, [r7, #28]
 8006648:	f000 f8b4 	bl	80067b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800664c:	2301      	movs	r3, #1
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	e002      	b.n	8006658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006658:	69bb      	ldr	r3, [r7, #24]
	}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	461a      	mov	r2, r3
 800667c:	21a5      	movs	r1, #165	@ 0xa5
 800667e:	f001 fe23 	bl	80082c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800668c:	3b01      	subs	r3, #1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	617b      	str	r3, [r7, #20]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01f      	beq.n	8006704 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e012      	b.n	80066f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	3334      	adds	r3, #52	@ 0x34
 80066da:	460a      	mov	r2, r1
 80066dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d9e9      	bls.n	80066ca <prvInitialiseNewTask+0x66>
 80066f6:	e000      	b.n	80066fa <prvInitialiseNewTask+0x96>
			{
				break;
 80066f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006702:	e003      	b.n	800670c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	2b37      	cmp	r3, #55	@ 0x37
 8006710:	d901      	bls.n	8006716 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006712:	2337      	movs	r3, #55	@ 0x37
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006720:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2200      	movs	r2, #0
 8006726:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	3304      	adds	r3, #4
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff f965 	bl	80059fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	3318      	adds	r3, #24
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff f960 	bl	80059fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006740:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	2200      	movs	r2, #0
 800675e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	3354      	adds	r3, #84	@ 0x54
 8006766:	224c      	movs	r2, #76	@ 0x4c
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fdac 	bl	80082c8 <memset>
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	4a0d      	ldr	r2, [pc, #52]	@ (80067a8 <prvInitialiseNewTask+0x144>)
 8006774:	659a      	str	r2, [r3, #88]	@ 0x58
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	4a0c      	ldr	r2, [pc, #48]	@ (80067ac <prvInitialiseNewTask+0x148>)
 800677a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	4a0c      	ldr	r2, [pc, #48]	@ (80067b0 <prvInitialiseNewTask+0x14c>)
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	68f9      	ldr	r1, [r7, #12]
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f001 f95a 	bl	8007a40 <pxPortInitialiseStack>
 800678c:	4602      	mov	r2, r0
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679e:	bf00      	nop
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20004cac 	.word	0x20004cac
 80067ac:	20004d14 	.word	0x20004d14
 80067b0:	20004d7c 	.word	0x20004d7c

080067b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067bc:	f001 fa74 	bl	8007ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ca:	4b2c      	ldr	r3, [pc, #176]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067d2:	4a2a      	ldr	r2, [pc, #168]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067d8:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d110      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067e0:	f000 fc2e 	bl	8007040 <prvInitialiseTaskLists>
 80067e4:	e00d      	b.n	8006802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067e6:	4b26      	ldr	r3, [pc, #152]	@ (8006880 <prvAddNewTaskToReadyList+0xcc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ee:	4b23      	ldr	r3, [pc, #140]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d802      	bhi.n	8006802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067fc:	4a1f      	ldr	r2, [pc, #124]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006802:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 800680a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006818:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <prvAddNewTaskToReadyList+0xd4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <prvAddNewTaskToReadyList+0x74>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <prvAddNewTaskToReadyList+0xd4>)
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4a15      	ldr	r2, [pc, #84]	@ (800688c <prvAddNewTaskToReadyList+0xd8>)
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7ff f8e9 	bl	8005a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fa62 	bl	8007d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006848:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <prvAddNewTaskToReadyList+0xcc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006850:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d207      	bcs.n	800686e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800685e:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <prvAddNewTaskToReadyList+0xdc>)
 8006860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000f2c 	.word	0x20000f2c
 800687c:	20000a58 	.word	0x20000a58
 8006880:	20000f38 	.word	0x20000f38
 8006884:	20000f48 	.word	0x20000f48
 8006888:	20000f34 	.word	0x20000f34
 800688c:	20000a5c 	.word	0x20000a5c
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068a6:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <vTaskDelay+0x64>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <vTaskDelay+0x32>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60bb      	str	r3, [r7, #8]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068c6:	f000 f88b 	bl	80069e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068ca:	2100      	movs	r1, #0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fd09 	bl	80072e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068d2:	f000 f893 	bl	80069fc <xTaskResumeAll>
 80068d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <vTaskDelay+0x68>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000f54 	.word	0x20000f54
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800690e:	463a      	mov	r2, r7
 8006910:	1d39      	adds	r1, r7, #4
 8006912:	f107 0308 	add.w	r3, r7, #8
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f81c 	bl	8005954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	9202      	str	r2, [sp, #8]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	460a      	mov	r2, r1
 800692e:	4924      	ldr	r1, [pc, #144]	@ (80069c0 <vTaskStartScheduler+0xc0>)
 8006930:	4824      	ldr	r0, [pc, #144]	@ (80069c4 <vTaskStartScheduler+0xc4>)
 8006932:	f7ff fdf1 	bl	8006518 <xTaskCreateStatic>
 8006936:	4603      	mov	r3, r0
 8006938:	4a23      	ldr	r2, [pc, #140]	@ (80069c8 <vTaskStartScheduler+0xc8>)
 800693a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800693c:	4b22      	ldr	r3, [pc, #136]	@ (80069c8 <vTaskStartScheduler+0xc8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e001      	b.n	800694e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006954:	f000 fd1a 	bl	800738c <xTimerCreateTimerTask>
 8006958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d11b      	bne.n	8006998 <vTaskStartScheduler+0x98>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006974:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <vTaskStartScheduler+0xcc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3354      	adds	r3, #84	@ 0x54
 800697a:	4a15      	ldr	r2, [pc, #84]	@ (80069d0 <vTaskStartScheduler+0xd0>)
 800697c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <vTaskStartScheduler+0xd4>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006986:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <vTaskStartScheduler+0xd8>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800698c:	4b13      	ldr	r3, [pc, #76]	@ (80069dc <vTaskStartScheduler+0xdc>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006992:	f001 f8e5 	bl	8007b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006996:	e00f      	b.n	80069b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699e:	d10b      	bne.n	80069b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <vTaskStartScheduler+0xb4>
}
 80069b8:	bf00      	nop
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	080084fc 	.word	0x080084fc
 80069c4:	08007011 	.word	0x08007011
 80069c8:	20000f50 	.word	0x20000f50
 80069cc:	20000a58 	.word	0x20000a58
 80069d0:	20000014 	.word	0x20000014
 80069d4:	20000f4c 	.word	0x20000f4c
 80069d8:	20000f38 	.word	0x20000f38
 80069dc:	20000f30 	.word	0x20000f30

080069e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <vTaskSuspendAll+0x18>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a03      	ldr	r2, [pc, #12]	@ (80069f8 <vTaskSuspendAll+0x18>)
 80069ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	20000f54 	.word	0x20000f54

080069fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a0a:	4b42      	ldr	r3, [pc, #264]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <xTaskResumeAll+0x2e>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	603b      	str	r3, [r7, #0]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a2a:	f001 f93d 	bl	8007ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a2e:	4b39      	ldr	r3, [pc, #228]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a37      	ldr	r2, [pc, #220]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b36      	ldr	r3, [pc, #216]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d162      	bne.n	8006b06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a40:	4b35      	ldr	r3, [pc, #212]	@ (8006b18 <xTaskResumeAll+0x11c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05e      	beq.n	8006b06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a48:	e02f      	b.n	8006aaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4a:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <xTaskResumeAll+0x120>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3318      	adds	r3, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff f83a 	bl	8005ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f835 	bl	8005ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b20 <xTaskResumeAll+0x124>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <xTaskResumeAll+0x7e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <xTaskResumeAll+0x124>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a27      	ldr	r2, [pc, #156]	@ (8006b24 <xTaskResumeAll+0x128>)
 8006a88:	441a      	add	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe ffc0 	bl	8005a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9a:	4b23      	ldr	r3, [pc, #140]	@ (8006b28 <xTaskResumeAll+0x12c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006aa4:	4b21      	ldr	r3, [pc, #132]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8006b1c <xTaskResumeAll+0x120>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1cb      	bne.n	8006a4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ab8:	f000 fb66 	bl	8007188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006abc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b30 <xTaskResumeAll+0x134>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d010      	beq.n	8006aea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ac8:	f000 f846 	bl	8006b58 <xTaskIncrementTick>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ad2:	4b16      	ldr	r3, [pc, #88]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f1      	bne.n	8006ac8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ae4:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <xTaskResumeAll+0x134>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aea:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <xTaskResumeAll+0x138>)
 8006af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b06:	f001 f901 	bl	8007d0c <vPortExitCritical>

	return xAlreadyYielded;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000f54 	.word	0x20000f54
 8006b18:	20000f2c 	.word	0x20000f2c
 8006b1c:	20000eec 	.word	0x20000eec
 8006b20:	20000f34 	.word	0x20000f34
 8006b24:	20000a5c 	.word	0x20000a5c
 8006b28:	20000a58 	.word	0x20000a58
 8006b2c:	20000f40 	.word	0x20000f40
 8006b30:	20000f3c 	.word	0x20000f3c
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b3e:	4b05      	ldr	r3, [pc, #20]	@ (8006b54 <xTaskGetTickCount+0x1c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b44:	687b      	ldr	r3, [r7, #4]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000f30 	.word	0x20000f30

08006b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b62:	4b4f      	ldr	r3, [pc, #316]	@ (8006ca0 <xTaskIncrementTick+0x148>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 8090 	bne.w	8006c8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca4 <xTaskIncrementTick+0x14c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b74:	4a4b      	ldr	r2, [pc, #300]	@ (8006ca4 <xTaskIncrementTick+0x14c>)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d121      	bne.n	8006bc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b80:	4b49      	ldr	r3, [pc, #292]	@ (8006ca8 <xTaskIncrementTick+0x150>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <xTaskIncrementTick+0x46>
 8006ba2:	4b41      	ldr	r3, [pc, #260]	@ (8006ca8 <xTaskIncrementTick+0x150>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4b40      	ldr	r3, [pc, #256]	@ (8006cac <xTaskIncrementTick+0x154>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a3e      	ldr	r2, [pc, #248]	@ (8006ca8 <xTaskIncrementTick+0x150>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8006cac <xTaskIncrementTick+0x154>)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb0 <xTaskIncrementTick+0x158>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb0 <xTaskIncrementTick+0x158>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	f000 fae2 	bl	8007188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb4 <xTaskIncrementTick+0x15c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d349      	bcc.n	8006c62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bce:	4b36      	ldr	r3, [pc, #216]	@ (8006ca8 <xTaskIncrementTick+0x150>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd8:	4b36      	ldr	r3, [pc, #216]	@ (8006cb4 <xTaskIncrementTick+0x15c>)
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bde:	601a      	str	r2, [r3, #0]
					break;
 8006be0:	e03f      	b.n	8006c62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be2:	4b31      	ldr	r3, [pc, #196]	@ (8006ca8 <xTaskIncrementTick+0x150>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d203      	bcs.n	8006c02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb4 <xTaskIncrementTick+0x15c>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c00:	e02f      	b.n	8006c62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe ff62 	bl	8005ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	3318      	adds	r3, #24
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe ff59 	bl	8005ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c22:	4b25      	ldr	r3, [pc, #148]	@ (8006cb8 <xTaskIncrementTick+0x160>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d903      	bls.n	8006c32 <xTaskIncrementTick+0xda>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2e:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <xTaskIncrementTick+0x160>)
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cbc <xTaskIncrementTick+0x164>)
 8006c40:	441a      	add	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7fe fee4 	bl	8005a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c52:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <xTaskIncrementTick+0x168>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d3b8      	bcc.n	8006bce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c60:	e7b5      	b.n	8006bce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c62:	4b17      	ldr	r3, [pc, #92]	@ (8006cc0 <xTaskIncrementTick+0x168>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	4914      	ldr	r1, [pc, #80]	@ (8006cbc <xTaskIncrementTick+0x164>)
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d901      	bls.n	8006c7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c7e:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <xTaskIncrementTick+0x16c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e004      	b.n	8006c96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc8 <xTaskIncrementTick+0x170>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc8 <xTaskIncrementTick+0x170>)
 8006c94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c96:	697b      	ldr	r3, [r7, #20]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000f54 	.word	0x20000f54
 8006ca4:	20000f30 	.word	0x20000f30
 8006ca8:	20000ee4 	.word	0x20000ee4
 8006cac:	20000ee8 	.word	0x20000ee8
 8006cb0:	20000f44 	.word	0x20000f44
 8006cb4:	20000f4c 	.word	0x20000f4c
 8006cb8:	20000f34 	.word	0x20000f34
 8006cbc:	20000a5c 	.word	0x20000a5c
 8006cc0:	20000a58 	.word	0x20000a58
 8006cc4:	20000f40 	.word	0x20000f40
 8006cc8:	20000f3c 	.word	0x20000f3c

08006ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8006d80 <vTaskSwitchContext+0xb4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cda:	4b2a      	ldr	r3, [pc, #168]	@ (8006d84 <vTaskSwitchContext+0xb8>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ce0:	e047      	b.n	8006d72 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006ce2:	4b28      	ldr	r3, [pc, #160]	@ (8006d84 <vTaskSwitchContext+0xb8>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <vTaskSwitchContext+0xbc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e011      	b.n	8006d14 <vTaskSwitchContext+0x48>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <vTaskSwitchContext+0x42>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	607b      	str	r3, [r7, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vTaskSwitchContext+0x3e>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	491d      	ldr	r1, [pc, #116]	@ (8006d8c <vTaskSwitchContext+0xc0>)
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0e3      	beq.n	8006cf0 <vTaskSwitchContext+0x24>
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <vTaskSwitchContext+0xc0>)
 8006d34:	4413      	add	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d104      	bne.n	8006d58 <vTaskSwitchContext+0x8c>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d90 <vTaskSwitchContext+0xc4>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <vTaskSwitchContext+0xbc>)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d68:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <vTaskSwitchContext+0xc4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3354      	adds	r3, #84	@ 0x54
 8006d6e:	4a09      	ldr	r2, [pc, #36]	@ (8006d94 <vTaskSwitchContext+0xc8>)
 8006d70:	6013      	str	r3, [r2, #0]
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000f54 	.word	0x20000f54
 8006d84:	20000f40 	.word	0x20000f40
 8006d88:	20000f34 	.word	0x20000f34
 8006d8c:	20000a5c 	.word	0x20000a5c
 8006d90:	20000a58 	.word	0x20000a58
 8006d94:	20000014 	.word	0x20000014

08006d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dc0:	4b07      	ldr	r3, [pc, #28]	@ (8006de0 <vTaskPlaceOnEventList+0x48>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fe fe48 	bl	8005a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dce:	2101      	movs	r1, #1
 8006dd0:	6838      	ldr	r0, [r7, #0]
 8006dd2:	f000 fa87 	bl	80072e4 <prvAddCurrentTaskToDelayedList>
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000a58 	.word	0x20000a58

08006de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	617b      	str	r3, [r7, #20]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4619      	mov	r1, r3
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7fe fdfd 	bl	8005a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fa5a 	bl	80072e4 <prvAddCurrentTaskToDelayedList>
	}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000a58 	.word	0x20000a58

08006e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60fb      	str	r3, [r7, #12]
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	e7fd      	b.n	8006e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3318      	adds	r3, #24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fe2e 	bl	8005ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e74:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <xTaskRemoveFromEventList+0xb0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11d      	bne.n	8006eb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fe25 	bl	8005ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8a:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <xTaskRemoveFromEventList+0xb4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d903      	bls.n	8006e9a <xTaskRemoveFromEventList+0x5e>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e96:	4a16      	ldr	r2, [pc, #88]	@ (8006ef0 <xTaskRemoveFromEventList+0xb4>)
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4a13      	ldr	r2, [pc, #76]	@ (8006ef4 <xTaskRemoveFromEventList+0xb8>)
 8006ea8:	441a      	add	r2, r3
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7fe fdb0 	bl	8005a16 <vListInsertEnd>
 8006eb6:	e005      	b.n	8006ec4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	3318      	adds	r3, #24
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	480e      	ldr	r0, [pc, #56]	@ (8006ef8 <xTaskRemoveFromEventList+0xbc>)
 8006ec0:	f7fe fda9 	bl	8005a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <xTaskRemoveFromEventList+0xc0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d905      	bls.n	8006ede <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <xTaskRemoveFromEventList+0xc4>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e001      	b.n	8006ee2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ee2:	697b      	ldr	r3, [r7, #20]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000f54 	.word	0x20000f54
 8006ef0:	20000f34 	.word	0x20000f34
 8006ef4:	20000a5c 	.word	0x20000a5c
 8006ef8:	20000eec 	.word	0x20000eec
 8006efc:	20000a58 	.word	0x20000a58
 8006f00:	20000f40 	.word	0x20000f40

08006f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <vTaskInternalSetTimeOutState+0x24>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <vTaskInternalSetTimeOutState+0x28>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	605a      	str	r2, [r3, #4]
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20000f44 	.word	0x20000f44
 8006f2c:	20000f30 	.word	0x20000f30

08006f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	613b      	str	r3, [r7, #16]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f76:	f000 fe97 	bl	8007ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff0 <xTaskCheckForTimeOut+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f92:	d102      	bne.n	8006f9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e023      	b.n	8006fe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <xTaskCheckForTimeOut+0xc4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d007      	beq.n	8006fb6 <xTaskCheckForTimeOut+0x86>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	e015      	b.n	8006fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d20b      	bcs.n	8006fd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ff99 	bl	8006f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	e004      	b.n	8006fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fe2:	f000 fe93 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000f30 	.word	0x20000f30
 8006ff4:	20000f44 	.word	0x20000f44

08006ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	@ (800700c <vTaskMissedYield+0x14>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	601a      	str	r2, [r3, #0]
}
 8007002:	bf00      	nop
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000f40 	.word	0x20000f40

08007010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007018:	f000 f852 	bl	80070c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <prvIdleTask+0x28>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d9f9      	bls.n	8007018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007024:	4b05      	ldr	r3, [pc, #20]	@ (800703c <prvIdleTask+0x2c>)
 8007026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007034:	e7f0      	b.n	8007018 <prvIdleTask+0x8>
 8007036:	bf00      	nop
 8007038:	20000a5c 	.word	0x20000a5c
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007046:	2300      	movs	r3, #0
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	e00c      	b.n	8007066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4a12      	ldr	r2, [pc, #72]	@ (80070a0 <prvInitialiseTaskLists+0x60>)
 8007058:	4413      	add	r3, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fcae 	bl	80059bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3301      	adds	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b37      	cmp	r3, #55	@ 0x37
 800706a:	d9ef      	bls.n	800704c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800706c:	480d      	ldr	r0, [pc, #52]	@ (80070a4 <prvInitialiseTaskLists+0x64>)
 800706e:	f7fe fca5 	bl	80059bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007072:	480d      	ldr	r0, [pc, #52]	@ (80070a8 <prvInitialiseTaskLists+0x68>)
 8007074:	f7fe fca2 	bl	80059bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007078:	480c      	ldr	r0, [pc, #48]	@ (80070ac <prvInitialiseTaskLists+0x6c>)
 800707a:	f7fe fc9f 	bl	80059bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800707e:	480c      	ldr	r0, [pc, #48]	@ (80070b0 <prvInitialiseTaskLists+0x70>)
 8007080:	f7fe fc9c 	bl	80059bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007084:	480b      	ldr	r0, [pc, #44]	@ (80070b4 <prvInitialiseTaskLists+0x74>)
 8007086:	f7fe fc99 	bl	80059bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800708a:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <prvInitialiseTaskLists+0x78>)
 800708c:	4a05      	ldr	r2, [pc, #20]	@ (80070a4 <prvInitialiseTaskLists+0x64>)
 800708e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007090:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <prvInitialiseTaskLists+0x7c>)
 8007092:	4a05      	ldr	r2, [pc, #20]	@ (80070a8 <prvInitialiseTaskLists+0x68>)
 8007094:	601a      	str	r2, [r3, #0]
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000a5c 	.word	0x20000a5c
 80070a4:	20000ebc 	.word	0x20000ebc
 80070a8:	20000ed0 	.word	0x20000ed0
 80070ac:	20000eec 	.word	0x20000eec
 80070b0:	20000f00 	.word	0x20000f00
 80070b4:	20000f18 	.word	0x20000f18
 80070b8:	20000ee4 	.word	0x20000ee4
 80070bc:	20000ee8 	.word	0x20000ee8

080070c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070c6:	e019      	b.n	80070fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070c8:	f000 fdee 	bl	8007ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070cc:	4b10      	ldr	r3, [pc, #64]	@ (8007110 <prvCheckTasksWaitingTermination+0x50>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fcf9 	bl	8005ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070de:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <prvCheckTasksWaitingTermination+0x54>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007114 <prvCheckTasksWaitingTermination+0x54>)
 80070e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007118 <prvCheckTasksWaitingTermination+0x58>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007118 <prvCheckTasksWaitingTermination+0x58>)
 80070f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070f2:	f000 fe0b 	bl	8007d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f810 	bl	800711c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070fc:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <prvCheckTasksWaitingTermination+0x58>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e1      	bne.n	80070c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000f00 	.word	0x20000f00
 8007114:	20000f2c 	.word	0x20000f2c
 8007118:	20000f14 	.word	0x20000f14

0800711c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3354      	adds	r3, #84	@ 0x54
 8007128:	4618      	mov	r0, r3
 800712a:	f001 f8d5 	bl	80082d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007134:	2b00      	cmp	r3, #0
 8007136:	d108      	bne.n	800714a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	4618      	mov	r0, r3
 800713e:	f000 ffa3 	bl	8008088 <vPortFree>
				vPortFree( pxTCB );
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 ffa0 	bl	8008088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007148:	e019      	b.n	800717e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007150:	2b01      	cmp	r3, #1
 8007152:	d103      	bne.n	800715c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 ff97 	bl	8008088 <vPortFree>
	}
 800715a:	e010      	b.n	800717e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007162:	2b02      	cmp	r3, #2
 8007164:	d00b      	beq.n	800717e <prvDeleteTCB+0x62>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	60fb      	str	r3, [r7, #12]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <prvDeleteTCB+0x5e>
	}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <prvResetNextTaskUnblockTime+0x38>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007198:	4b0a      	ldr	r3, [pc, #40]	@ (80071c4 <prvResetNextTaskUnblockTime+0x3c>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800719e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071a0:	e008      	b.n	80071b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a2:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <prvResetNextTaskUnblockTime+0x38>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a04      	ldr	r2, [pc, #16]	@ (80071c4 <prvResetNextTaskUnblockTime+0x3c>)
 80071b2:	6013      	str	r3, [r2, #0]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000ee4 	.word	0x20000ee4
 80071c4:	20000f4c 	.word	0x20000f4c

080071c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071ce:	4b0b      	ldr	r3, [pc, #44]	@ (80071fc <xTaskGetSchedulerState+0x34>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071d6:	2301      	movs	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	e008      	b.n	80071ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071dc:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <xTaskGetSchedulerState+0x38>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071e4:	2302      	movs	r3, #2
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	e001      	b.n	80071ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071ea:	2300      	movs	r3, #0
 80071ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071ee:	687b      	ldr	r3, [r7, #4]
	}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	20000f38 	.word	0x20000f38
 8007200:	20000f54 	.word	0x20000f54

08007204 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d058      	beq.n	80072cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800721a:	4b2f      	ldr	r3, [pc, #188]	@ (80072d8 <xTaskPriorityDisinherit+0xd4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d00b      	beq.n	800723c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	60fb      	str	r3, [r7, #12]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60bb      	str	r3, [r7, #8]
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	e7fd      	b.n	8007258 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007260:	1e5a      	subs	r2, r3, #1
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800726e:	429a      	cmp	r2, r3
 8007270:	d02c      	beq.n	80072cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007276:	2b00      	cmp	r3, #0
 8007278:	d128      	bne.n	80072cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3304      	adds	r3, #4
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fc26 	bl	8005ad0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <xTaskPriorityDisinherit+0xd8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d903      	bls.n	80072ac <xTaskPriorityDisinherit+0xa8>
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	4a0c      	ldr	r2, [pc, #48]	@ (80072dc <xTaskPriorityDisinherit+0xd8>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4a09      	ldr	r2, [pc, #36]	@ (80072e0 <xTaskPriorityDisinherit+0xdc>)
 80072ba:	441a      	add	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f7fe fba7 	bl	8005a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072cc:	697b      	ldr	r3, [r7, #20]
	}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000a58 	.word	0x20000a58
 80072dc:	20000f34 	.word	0x20000f34
 80072e0:	20000a5c 	.word	0x20000a5c

080072e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072ee:	4b21      	ldr	r3, [pc, #132]	@ (8007374 <prvAddCurrentTaskToDelayedList+0x90>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f4:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x94>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fbe8 	bl	8005ad0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007306:	d10a      	bne.n	800731e <prvAddCurrentTaskToDelayedList+0x3a>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730e:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x94>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4819      	ldr	r0, [pc, #100]	@ (800737c <prvAddCurrentTaskToDelayedList+0x98>)
 8007318:	f7fe fb7d 	bl	8005a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800731c:	e026      	b.n	800736c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007326:	4b14      	ldr	r3, [pc, #80]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x94>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	429a      	cmp	r2, r3
 8007334:	d209      	bcs.n	800734a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007336:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b0f      	ldr	r3, [pc, #60]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x94>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fb8b 	bl	8005a5e <vListInsert>
}
 8007348:	e010      	b.n	800736c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734a:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x94>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe fb81 	bl	8005a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800735c:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d202      	bcs.n	800736c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007366:	4a08      	ldr	r2, [pc, #32]	@ (8007388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6013      	str	r3, [r2, #0]
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000f30 	.word	0x20000f30
 8007378:	20000a58 	.word	0x20000a58
 800737c:	20000f18 	.word	0x20000f18
 8007380:	20000ee8 	.word	0x20000ee8
 8007384:	20000ee4 	.word	0x20000ee4
 8007388:	20000f4c 	.word	0x20000f4c

0800738c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	@ 0x28
 8007390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007396:	f000 fb13 	bl	80079c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800739a:	4b1d      	ldr	r3, [pc, #116]	@ (8007410 <xTimerCreateTimerTask+0x84>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d021      	beq.n	80073e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073aa:	1d3a      	adds	r2, r7, #4
 80073ac:	f107 0108 	add.w	r1, r7, #8
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fae7 	bl	8005988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	9202      	str	r2, [sp, #8]
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	2302      	movs	r3, #2
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	460a      	mov	r2, r1
 80073cc:	4911      	ldr	r1, [pc, #68]	@ (8007414 <xTimerCreateTimerTask+0x88>)
 80073ce:	4812      	ldr	r0, [pc, #72]	@ (8007418 <xTimerCreateTimerTask+0x8c>)
 80073d0:	f7ff f8a2 	bl	8006518 <xTaskCreateStatic>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4a11      	ldr	r2, [pc, #68]	@ (800741c <xTimerCreateTimerTask+0x90>)
 80073d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073da:	4b10      	ldr	r3, [pc, #64]	@ (800741c <xTimerCreateTimerTask+0x90>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073e2:	2301      	movs	r3, #1
 80073e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	613b      	str	r3, [r7, #16]
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	e7fd      	b.n	8007400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007404:	697b      	ldr	r3, [r7, #20]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000f88 	.word	0x20000f88
 8007414:	08008504 	.word	0x08008504
 8007418:	08007559 	.word	0x08007559
 800741c:	20000f8c 	.word	0x20000f8c

08007420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	@ 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <xTimerGenericCommand+0x30>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007450:	4b19      	ldr	r3, [pc, #100]	@ (80074b8 <xTimerGenericCommand+0x98>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02a      	beq.n	80074ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b05      	cmp	r3, #5
 8007468:	dc18      	bgt.n	800749c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800746a:	f7ff fead 	bl	80071c8 <xTaskGetSchedulerState>
 800746e:	4603      	mov	r3, r0
 8007470:	2b02      	cmp	r3, #2
 8007472:	d109      	bne.n	8007488 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007474:	4b10      	ldr	r3, [pc, #64]	@ (80074b8 <xTimerGenericCommand+0x98>)
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	f107 0110 	add.w	r1, r7, #16
 800747c:	2300      	movs	r3, #0
 800747e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007480:	f7fe fc5a 	bl	8005d38 <xQueueGenericSend>
 8007484:	6278      	str	r0, [r7, #36]	@ 0x24
 8007486:	e012      	b.n	80074ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007488:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <xTimerGenericCommand+0x98>)
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	f107 0110 	add.w	r1, r7, #16
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	f7fe fc50 	bl	8005d38 <xQueueGenericSend>
 8007498:	6278      	str	r0, [r7, #36]	@ 0x24
 800749a:	e008      	b.n	80074ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <xTimerGenericCommand+0x98>)
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	f107 0110 	add.w	r1, r7, #16
 80074a4:	2300      	movs	r3, #0
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	f7fe fd48 	bl	8005f3c <xQueueGenericSendFromISR>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3728      	adds	r7, #40	@ 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000f88 	.word	0x20000f88

080074bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c6:	4b23      	ldr	r3, [pc, #140]	@ (8007554 <prvProcessExpiredTimer+0x98>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fafb 	bl	8005ad0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d023      	beq.n	8007530 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	699a      	ldr	r2, [r3, #24]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	18d1      	adds	r1, r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	6978      	ldr	r0, [r7, #20]
 80074f6:	f000 f8d5 	bl	80076a4 <prvInsertTimerInActiveList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	2300      	movs	r3, #0
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	2100      	movs	r1, #0
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f7ff ff88 	bl	8007420 <xTimerGenericCommand>
 8007510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d114      	bne.n	8007542 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60fb      	str	r3, [r7, #12]
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	6978      	ldr	r0, [r7, #20]
 8007548:	4798      	blx	r3
}
 800754a:	bf00      	nop
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000f80 	.word	0x20000f80

08007558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007560:	f107 0308 	add.w	r3, r7, #8
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f859 	bl	800761c <prvGetNextExpireTime>
 800756a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f805 	bl	8007580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007576:	f000 f8d7 	bl	8007728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800757a:	bf00      	nop
 800757c:	e7f0      	b.n	8007560 <prvTimerTask+0x8>
	...

08007580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800758a:	f7ff fa29 	bl	80069e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800758e:	f107 0308 	add.w	r3, r7, #8
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f866 	bl	8007664 <prvSampleTimeNow>
 8007598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d130      	bne.n	8007602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <prvProcessTimerOrBlockTask+0x3c>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d806      	bhi.n	80075bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075ae:	f7ff fa25 	bl	80069fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff81 	bl	80074bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075ba:	e024      	b.n	8007606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075c2:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <prvProcessTimerOrBlockTask+0x90>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <prvProcessTimerOrBlockTask+0x50>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <prvProcessTimerOrBlockTask+0x52>
 80075d0:	2300      	movs	r3, #0
 80075d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007614 <prvProcessTimerOrBlockTask+0x94>)
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7fe ff65 	bl	80064b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075e6:	f7ff fa09 	bl	80069fc <xTaskResumeAll>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075f0:	4b09      	ldr	r3, [pc, #36]	@ (8007618 <prvProcessTimerOrBlockTask+0x98>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
}
 8007600:	e001      	b.n	8007606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007602:	f7ff f9fb 	bl	80069fc <xTaskResumeAll>
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20000f84 	.word	0x20000f84
 8007614:	20000f88 	.word	0x20000f88
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007624:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <prvGetNextExpireTime+0x44>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <prvGetNextExpireTime+0x16>
 800762e:	2201      	movs	r2, #1
 8007630:	e000      	b.n	8007634 <prvGetNextExpireTime+0x18>
 8007632:	2200      	movs	r2, #0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007640:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <prvGetNextExpireTime+0x44>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e001      	b.n	8007650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000f80 	.word	0x20000f80

08007664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800766c:	f7ff fa64 	bl	8006b38 <xTaskGetTickCount>
 8007670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007672:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <prvSampleTimeNow+0x3c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	429a      	cmp	r2, r3
 800767a:	d205      	bcs.n	8007688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800767c:	f000 f93a 	bl	80078f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e002      	b.n	800768e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800768e:	4a04      	ldr	r2, [pc, #16]	@ (80076a0 <prvSampleTimeNow+0x3c>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000f90 	.word	0x20000f90

080076a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d812      	bhi.n	80076f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d302      	bcc.n	80076de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076d8:	2301      	movs	r3, #1
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e01b      	b.n	8007716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076de:	4b10      	ldr	r3, [pc, #64]	@ (8007720 <prvInsertTimerInActiveList+0x7c>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7fe f9b8 	bl	8005a5e <vListInsert>
 80076ee:	e012      	b.n	8007716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d206      	bcs.n	8007706 <prvInsertTimerInActiveList+0x62>
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e007      	b.n	8007716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007706:	4b07      	ldr	r3, [pc, #28]	@ (8007724 <prvInsertTimerInActiveList+0x80>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fe f9a4 	bl	8005a5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007716:	697b      	ldr	r3, [r7, #20]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20000f84 	.word	0x20000f84
 8007724:	20000f80 	.word	0x20000f80

08007728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08e      	sub	sp, #56	@ 0x38
 800772c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800772e:	e0ce      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	da19      	bge.n	800776a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007736:	1d3b      	adds	r3, r7, #4
 8007738:	3304      	adds	r3, #4
 800773a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	61fb      	str	r3, [r7, #28]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007760:	6850      	ldr	r0, [r2, #4]
 8007762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007764:	6892      	ldr	r2, [r2, #8]
 8007766:	4611      	mov	r1, r2
 8007768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f2c0 80ae 	blt.w	80078ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe f9a4 	bl	8005ad0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007788:	463b      	mov	r3, r7
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff ff6a 	bl	8007664 <prvSampleTimeNow>
 8007790:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b09      	cmp	r3, #9
 8007796:	f200 8097 	bhi.w	80078c8 <prvProcessReceivedCommands+0x1a0>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <prvProcessReceivedCommands+0x78>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	0800783f 	.word	0x0800783f
 80077b0:	08007853 	.word	0x08007853
 80077b4:	0800789f 	.word	0x0800789f
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077c9 	.word	0x080077c9
 80077c0:	0800783f 	.word	0x0800783f
 80077c4:	08007853 	.word	0x08007853
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	18d1      	adds	r1, r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077e8:	f7ff ff5c 	bl	80076a4 <prvInsertTimerInActiveList>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d06c      	beq.n	80078cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d061      	beq.n	80078cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	441a      	add	r2, r3
 8007810:	2300      	movs	r3, #0
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	2100      	movs	r1, #0
 8007818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800781a:	f7ff fe01 	bl	8007420 <xTimerGenericCommand>
 800781e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d152      	bne.n	80078cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	61bb      	str	r3, [r7, #24]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	b2da      	uxtb	r2, r3
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007850:	e03d      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	617b      	str	r3, [r7, #20]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	18d1      	adds	r1, r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007898:	f7ff ff04 	bl	80076a4 <prvInsertTimerInActiveList>
					break;
 800789c:	e017      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80078ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078ae:	f000 fbeb 	bl	8008088 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078b2:	e00c      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078c6:	e002      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80078c8:	bf00      	nop
 80078ca:	e000      	b.n	80078ce <prvProcessReceivedCommands+0x1a6>
					break;
 80078cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ce:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <prvProcessReceivedCommands+0x1c8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	1d39      	adds	r1, r7, #4
 80078d4:	2200      	movs	r2, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fbce 	bl	8006078 <xQueueReceive>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f47f af26 	bne.w	8007730 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3730      	adds	r7, #48	@ 0x30
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000f88 	.word	0x20000f88

080078f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078fa:	e049      	b.n	8007990 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078fc:	4b2e      	ldr	r3, [pc, #184]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007906:	4b2c      	ldr	r3, [pc, #176]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3304      	adds	r3, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe f8db 	bl	8005ad0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02f      	beq.n	8007990 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d90e      	bls.n	8007960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7fe f880 	bl	8005a5e <vListInsert>
 800795e:	e017      	b.n	8007990 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007960:	2300      	movs	r3, #0
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	2100      	movs	r1, #0
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7ff fd58 	bl	8007420 <xTimerGenericCommand>
 8007970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	603b      	str	r3, [r7, #0]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007990:	4b09      	ldr	r3, [pc, #36]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1b0      	bne.n	80078fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800799a:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079a0:	4b06      	ldr	r3, [pc, #24]	@ (80079bc <prvSwitchTimerLists+0xc8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a04      	ldr	r2, [pc, #16]	@ (80079b8 <prvSwitchTimerLists+0xc4>)
 80079a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079a8:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <prvSwitchTimerLists+0xc8>)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6013      	str	r3, [r2, #0]
}
 80079ae:	bf00      	nop
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000f80 	.word	0x20000f80
 80079bc:	20000f84 	.word	0x20000f84

080079c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079c6:	f000 f96f 	bl	8007ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079ca:	4b15      	ldr	r3, [pc, #84]	@ (8007a20 <prvCheckForValidListAndQueue+0x60>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d120      	bne.n	8007a14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079d2:	4814      	ldr	r0, [pc, #80]	@ (8007a24 <prvCheckForValidListAndQueue+0x64>)
 80079d4:	f7fd fff2 	bl	80059bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079d8:	4813      	ldr	r0, [pc, #76]	@ (8007a28 <prvCheckForValidListAndQueue+0x68>)
 80079da:	f7fd ffef 	bl	80059bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079de:	4b13      	ldr	r3, [pc, #76]	@ (8007a2c <prvCheckForValidListAndQueue+0x6c>)
 80079e0:	4a10      	ldr	r2, [pc, #64]	@ (8007a24 <prvCheckForValidListAndQueue+0x64>)
 80079e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079e4:	4b12      	ldr	r3, [pc, #72]	@ (8007a30 <prvCheckForValidListAndQueue+0x70>)
 80079e6:	4a10      	ldr	r2, [pc, #64]	@ (8007a28 <prvCheckForValidListAndQueue+0x68>)
 80079e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4b11      	ldr	r3, [pc, #68]	@ (8007a34 <prvCheckForValidListAndQueue+0x74>)
 80079f0:	4a11      	ldr	r2, [pc, #68]	@ (8007a38 <prvCheckForValidListAndQueue+0x78>)
 80079f2:	2110      	movs	r1, #16
 80079f4:	200a      	movs	r0, #10
 80079f6:	f7fe f8ff 	bl	8005bf8 <xQueueGenericCreateStatic>
 80079fa:	4603      	mov	r3, r0
 80079fc:	4a08      	ldr	r2, [pc, #32]	@ (8007a20 <prvCheckForValidListAndQueue+0x60>)
 80079fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <prvCheckForValidListAndQueue+0x60>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <prvCheckForValidListAndQueue+0x60>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	490b      	ldr	r1, [pc, #44]	@ (8007a3c <prvCheckForValidListAndQueue+0x7c>)
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fd24 	bl	800645c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a14:	f000 f97a 	bl	8007d0c <vPortExitCritical>
}
 8007a18:	bf00      	nop
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000f88 	.word	0x20000f88
 8007a24:	20000f58 	.word	0x20000f58
 8007a28:	20000f6c 	.word	0x20000f6c
 8007a2c:	20000f80 	.word	0x20000f80
 8007a30:	20000f84 	.word	0x20000f84
 8007a34:	20001034 	.word	0x20001034
 8007a38:	20000f94 	.word	0x20000f94
 8007a3c:	0800850c 	.word	0x0800850c

08007a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f023 0201 	bic.w	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a70:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa4 <pxPortInitialiseStack+0x64>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b14      	subs	r3, #20
 8007a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f06f 0202 	mvn.w	r2, #2
 8007a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b20      	subs	r3, #32
 8007a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	08007aa9 	.word	0x08007aa9

08007aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ab2:	4b13      	ldr	r3, [pc, #76]	@ (8007b00 <prvTaskExitError+0x58>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aba:	d00b      	beq.n	8007ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <prvTaskExitError+0x28>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60bb      	str	r3, [r7, #8]
}
 8007ae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ae8:	bf00      	nop
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0fc      	beq.n	8007aea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000010 	.word	0x20000010
	...

08007b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b10:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <pxCurrentTCBConst2>)
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f380 8809 	msr	PSP, r0
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8811 	msr	BASEPRI, r0
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst2>:
 8007b30:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b38:	4808      	ldr	r0, [pc, #32]	@ (8007b5c <prvPortStartFirstTask+0x24>)
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f380 8808 	msr	MSP, r0
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8814 	msr	CONTROL, r0
 8007b4a:	b662      	cpsie	i
 8007b4c:	b661      	cpsie	f
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	df00      	svc	0
 8007b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed08 	.word	0xe000ed08

08007b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b66:	4b47      	ldr	r3, [pc, #284]	@ (8007c84 <xPortStartScheduler+0x124>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a47      	ldr	r2, [pc, #284]	@ (8007c88 <xPortStartScheduler+0x128>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10b      	bne.n	8007b88 <xPortStartScheduler+0x28>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b88:	4b3e      	ldr	r3, [pc, #248]	@ (8007c84 <xPortStartScheduler+0x124>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c8c <xPortStartScheduler+0x12c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10b      	bne.n	8007baa <xPortStartScheduler+0x4a>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	613b      	str	r3, [r7, #16]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007baa:	4b39      	ldr	r3, [pc, #228]	@ (8007c90 <xPortStartScheduler+0x130>)
 8007bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	22ff      	movs	r2, #255	@ 0xff
 8007bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	4b31      	ldr	r3, [pc, #196]	@ (8007c94 <xPortStartScheduler+0x134>)
 8007bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bd2:	4b31      	ldr	r3, [pc, #196]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd8:	e009      	b.n	8007bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007bda:	4b2f      	ldr	r3, [pc, #188]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf6:	2b80      	cmp	r3, #128	@ 0x80
 8007bf8:	d0ef      	beq.n	8007bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bfa:	4b27      	ldr	r3, [pc, #156]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f1c3 0307 	rsb	r3, r3, #7
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d00b      	beq.n	8007c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	4a1c      	ldr	r2, [pc, #112]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c30:	4a19      	ldr	r2, [pc, #100]	@ (8007c98 <xPortStartScheduler+0x138>)
 8007c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c3c:	4b17      	ldr	r3, [pc, #92]	@ (8007c9c <xPortStartScheduler+0x13c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <xPortStartScheduler+0x13c>)
 8007c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c48:	4b14      	ldr	r3, [pc, #80]	@ (8007c9c <xPortStartScheduler+0x13c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a13      	ldr	r2, [pc, #76]	@ (8007c9c <xPortStartScheduler+0x13c>)
 8007c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c54:	f000 f8da 	bl	8007e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c58:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <xPortStartScheduler+0x140>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c5e:	f000 f8f9 	bl	8007e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c62:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <xPortStartScheduler+0x144>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <xPortStartScheduler+0x144>)
 8007c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c6e:	f7ff ff63 	bl	8007b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c72:	f7ff f82b 	bl	8006ccc <vTaskSwitchContext>
	prvTaskExitError();
 8007c76:	f7ff ff17 	bl	8007aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	e000ed00 	.word	0xe000ed00
 8007c88:	410fc271 	.word	0x410fc271
 8007c8c:	410fc270 	.word	0x410fc270
 8007c90:	e000e400 	.word	0xe000e400
 8007c94:	20001084 	.word	0x20001084
 8007c98:	20001088 	.word	0x20001088
 8007c9c:	e000ed20 	.word	0xe000ed20
 8007ca0:	20000010 	.word	0x20000010
 8007ca4:	e000ef34 	.word	0xe000ef34

08007ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
}
 8007cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cc2:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <vPortEnterCritical+0x5c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8007d04 <vPortEnterCritical+0x5c>)
 8007cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <vPortEnterCritical+0x5c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d110      	bne.n	8007cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <vPortEnterCritical+0x60>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	603b      	str	r3, [r7, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	e7fd      	b.n	8007cf2 <vPortEnterCritical+0x4a>
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000010 	.word	0x20000010
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d12:	4b12      	ldr	r3, [pc, #72]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <vPortExitCritical+0x26>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4a08      	ldr	r2, [pc, #32]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <vPortExitCritical+0x44>
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20000010 	.word	0x20000010

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d84:	f380 8811 	msr	BASEPRI, r0
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f7fe ff9c 	bl	8006ccc <vTaskSwitchContext>
 8007d94:	f04f 0000 	mov.w	r0, #0
 8007d98:	f380 8811 	msr	BASEPRI, r0
 8007d9c:	bc09      	pop	{r0, r3}
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	6808      	ldr	r0, [r1, #0]
 8007da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da6:	f01e 0f10 	tst.w	lr, #16
 8007daa:	bf08      	it	eq
 8007dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db0:	f380 8809 	msr	PSP, r0
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	607b      	str	r3, [r7, #4]
}
 8007de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f7fe feb9 	bl	8006b58 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <xPortSysTickHandler+0x40>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <vPortSetupTimerInterrupt+0x38>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <vPortSetupTimerInterrupt+0x3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	@ (8007e4c <vPortSetupTimerInterrupt+0x40>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	4a09      	ldr	r2, [pc, #36]	@ (8007e50 <vPortSetupTimerInterrupt+0x44>)
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e2e:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e30:	2207      	movs	r2, #7
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	e000e010 	.word	0xe000e010
 8007e44:	e000e018 	.word	0xe000e018
 8007e48:	20000004 	.word	0x20000004
 8007e4c:	10624dd3 	.word	0x10624dd3
 8007e50:	e000e014 	.word	0xe000e014

08007e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e64 <vPortEnableVFP+0x10>
 8007e58:	6801      	ldr	r1, [r0, #0]
 8007e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e5e:	6001      	str	r1, [r0, #0]
 8007e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e62:	bf00      	nop
 8007e64:	e000ed88 	.word	0xe000ed88

08007e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e6e:	f3ef 8305 	mrs	r3, IPSR
 8007e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d915      	bls.n	8007ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7a:	4a18      	ldr	r2, [pc, #96]	@ (8007edc <vPortValidateInterruptPriority+0x74>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e84:	4b16      	ldr	r3, [pc, #88]	@ (8007ee0 <vPortValidateInterruptPriority+0x78>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d20b      	bcs.n	8007ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee4 <vPortValidateInterruptPriority+0x7c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007eae:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee8 <vPortValidateInterruptPriority+0x80>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d90b      	bls.n	8007ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	603b      	str	r3, [r7, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <vPortValidateInterruptPriority+0x62>
	}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	e000e3f0 	.word	0xe000e3f0
 8007ee0:	20001084 	.word	0x20001084
 8007ee4:	e000ed0c 	.word	0xe000ed0c
 8007ee8:	20001088 	.word	0x20001088

08007eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef8:	f7fe fd72 	bl	80069e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007efc:	4b5c      	ldr	r3, [pc, #368]	@ (8008070 <pvPortMalloc+0x184>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f04:	f000 f924 	bl	8008150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f08:	4b5a      	ldr	r3, [pc, #360]	@ (8008074 <pvPortMalloc+0x188>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 8095 	bne.w	8008040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01e      	beq.n	8007f5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4413      	add	r3, r2
 8007f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d015      	beq.n	8007f5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f023 0307 	bic.w	r3, r3, #7
 8007f34:	3308      	adds	r3, #8
 8007f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <pvPortMalloc+0x6e>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	617b      	str	r3, [r7, #20]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d06f      	beq.n	8008040 <pvPortMalloc+0x154>
 8007f60:	4b45      	ldr	r3, [pc, #276]	@ (8008078 <pvPortMalloc+0x18c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d86a      	bhi.n	8008040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f6a:	4b44      	ldr	r3, [pc, #272]	@ (800807c <pvPortMalloc+0x190>)
 8007f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f6e:	4b43      	ldr	r3, [pc, #268]	@ (800807c <pvPortMalloc+0x190>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f74:	e004      	b.n	8007f80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d903      	bls.n	8007f92 <pvPortMalloc+0xa6>
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f1      	bne.n	8007f76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f92:	4b37      	ldr	r3, [pc, #220]	@ (8008070 <pvPortMalloc+0x184>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d051      	beq.n	8008040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	4413      	add	r3, r2
 8007fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	2308      	movs	r3, #8
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d920      	bls.n	8008000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <pvPortMalloc+0xfc>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ffa:	69b8      	ldr	r0, [r7, #24]
 8007ffc:	f000 f90a 	bl	8008214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008000:	4b1d      	ldr	r3, [pc, #116]	@ (8008078 <pvPortMalloc+0x18c>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <pvPortMalloc+0x18c>)
 800800c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800800e:	4b1a      	ldr	r3, [pc, #104]	@ (8008078 <pvPortMalloc+0x18c>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b1b      	ldr	r3, [pc, #108]	@ (8008080 <pvPortMalloc+0x194>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d203      	bcs.n	8008022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800801a:	4b17      	ldr	r3, [pc, #92]	@ (8008078 <pvPortMalloc+0x18c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <pvPortMalloc+0x194>)
 8008020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	4b13      	ldr	r3, [pc, #76]	@ (8008074 <pvPortMalloc+0x188>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	431a      	orrs	r2, r3
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008036:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <pvPortMalloc+0x198>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <pvPortMalloc+0x198>)
 800803e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008040:	f7fe fcdc 	bl	80069fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <pvPortMalloc+0x17a>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60fb      	str	r3, [r7, #12]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <pvPortMalloc+0x176>
	return pvReturn;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	@ 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20004c94 	.word	0x20004c94
 8008074:	20004ca8 	.word	0x20004ca8
 8008078:	20004c98 	.word	0x20004c98
 800807c:	20004c8c 	.word	0x20004c8c
 8008080:	20004c9c 	.word	0x20004c9c
 8008084:	20004ca0 	.word	0x20004ca0

08008088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04f      	beq.n	800813a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800809a:	2308      	movs	r3, #8
 800809c:	425b      	negs	r3, r3
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4413      	add	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	4b25      	ldr	r3, [pc, #148]	@ (8008144 <vPortFree+0xbc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <vPortFree+0x46>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <vPortFree+0x66>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60bb      	str	r3, [r7, #8]
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	e7fd      	b.n	80080ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	4b14      	ldr	r3, [pc, #80]	@ (8008144 <vPortFree+0xbc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01e      	beq.n	800813a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11a      	bne.n	800813a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	4b0e      	ldr	r3, [pc, #56]	@ (8008144 <vPortFree+0xbc>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	43db      	mvns	r3, r3
 800810e:	401a      	ands	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008114:	f7fe fc64 	bl	80069e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4b0a      	ldr	r3, [pc, #40]	@ (8008148 <vPortFree+0xc0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4413      	add	r3, r2
 8008122:	4a09      	ldr	r2, [pc, #36]	@ (8008148 <vPortFree+0xc0>)
 8008124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008126:	6938      	ldr	r0, [r7, #16]
 8008128:	f000 f874 	bl	8008214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800812c:	4b07      	ldr	r3, [pc, #28]	@ (800814c <vPortFree+0xc4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	4a06      	ldr	r2, [pc, #24]	@ (800814c <vPortFree+0xc4>)
 8008134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008136:	f7fe fc61 	bl	80069fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800813a:	bf00      	nop
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20004ca8 	.word	0x20004ca8
 8008148:	20004c98 	.word	0x20004c98
 800814c:	20004ca4 	.word	0x20004ca4

08008150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008156:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800815a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800815c:	4b27      	ldr	r3, [pc, #156]	@ (80081fc <prvHeapInit+0xac>)
 800815e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3307      	adds	r3, #7
 800816e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0307 	bic.w	r3, r3, #7
 8008176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	4a1f      	ldr	r2, [pc, #124]	@ (80081fc <prvHeapInit+0xac>)
 8008180:	4413      	add	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008188:	4a1d      	ldr	r2, [pc, #116]	@ (8008200 <prvHeapInit+0xb0>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800818e:	4b1c      	ldr	r3, [pc, #112]	@ (8008200 <prvHeapInit+0xb0>)
 8008190:	2200      	movs	r2, #0
 8008192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	4413      	add	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800819c:	2208      	movs	r2, #8
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1a9b      	subs	r3, r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0307 	bic.w	r3, r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a15      	ldr	r2, [pc, #84]	@ (8008204 <prvHeapInit+0xb4>)
 80081b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b2:	4b14      	ldr	r3, [pc, #80]	@ (8008204 <prvHeapInit+0xb4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ba:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <prvHeapInit+0xb4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <prvHeapInit+0xb4>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008208 <prvHeapInit+0xb8>)
 80081de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	4a09      	ldr	r2, [pc, #36]	@ (800820c <prvHeapInit+0xbc>)
 80081e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <prvHeapInit+0xc0>)
 80081ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	2000108c 	.word	0x2000108c
 8008200:	20004c8c 	.word	0x20004c8c
 8008204:	20004c94 	.word	0x20004c94
 8008208:	20004c9c 	.word	0x20004c9c
 800820c:	20004c98 	.word	0x20004c98
 8008210:	20004ca8 	.word	0x20004ca8

08008214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800821c:	4b28      	ldr	r3, [pc, #160]	@ (80082c0 <prvInsertBlockIntoFreeList+0xac>)
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e002      	b.n	8008228 <prvInsertBlockIntoFreeList+0x14>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d8f7      	bhi.n	8008222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d108      	bne.n	8008256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	441a      	add	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d118      	bne.n	800829c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b15      	ldr	r3, [pc, #84]	@ (80082c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d00d      	beq.n	8008292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	441a      	add	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e008      	b.n	80082a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008292:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e003      	b.n	80082a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d002      	beq.n	80082b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20004c8c 	.word	0x20004c8c
 80082c4:	20004c94 	.word	0x20004c94

080082c8 <memset>:
 80082c8:	4402      	add	r2, r0
 80082ca:	4603      	mov	r3, r0
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d100      	bne.n	80082d2 <memset+0xa>
 80082d0:	4770      	bx	lr
 80082d2:	f803 1b01 	strb.w	r1, [r3], #1
 80082d6:	e7f9      	b.n	80082cc <memset+0x4>

080082d8 <_reclaim_reent>:
 80082d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008390 <_reclaim_reent+0xb8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4283      	cmp	r3, r0
 80082de:	b570      	push	{r4, r5, r6, lr}
 80082e0:	4604      	mov	r4, r0
 80082e2:	d053      	beq.n	800838c <_reclaim_reent+0xb4>
 80082e4:	69c3      	ldr	r3, [r0, #28]
 80082e6:	b31b      	cbz	r3, 8008330 <_reclaim_reent+0x58>
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	b163      	cbz	r3, 8008306 <_reclaim_reent+0x2e>
 80082ec:	2500      	movs	r5, #0
 80082ee:	69e3      	ldr	r3, [r4, #28]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	5959      	ldr	r1, [r3, r5]
 80082f4:	b9b1      	cbnz	r1, 8008324 <_reclaim_reent+0x4c>
 80082f6:	3504      	adds	r5, #4
 80082f8:	2d80      	cmp	r5, #128	@ 0x80
 80082fa:	d1f8      	bne.n	80082ee <_reclaim_reent+0x16>
 80082fc:	69e3      	ldr	r3, [r4, #28]
 80082fe:	4620      	mov	r0, r4
 8008300:	68d9      	ldr	r1, [r3, #12]
 8008302:	f000 f87b 	bl	80083fc <_free_r>
 8008306:	69e3      	ldr	r3, [r4, #28]
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	b111      	cbz	r1, 8008312 <_reclaim_reent+0x3a>
 800830c:	4620      	mov	r0, r4
 800830e:	f000 f875 	bl	80083fc <_free_r>
 8008312:	69e3      	ldr	r3, [r4, #28]
 8008314:	689d      	ldr	r5, [r3, #8]
 8008316:	b15d      	cbz	r5, 8008330 <_reclaim_reent+0x58>
 8008318:	4629      	mov	r1, r5
 800831a:	4620      	mov	r0, r4
 800831c:	682d      	ldr	r5, [r5, #0]
 800831e:	f000 f86d 	bl	80083fc <_free_r>
 8008322:	e7f8      	b.n	8008316 <_reclaim_reent+0x3e>
 8008324:	680e      	ldr	r6, [r1, #0]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f868 	bl	80083fc <_free_r>
 800832c:	4631      	mov	r1, r6
 800832e:	e7e1      	b.n	80082f4 <_reclaim_reent+0x1c>
 8008330:	6961      	ldr	r1, [r4, #20]
 8008332:	b111      	cbz	r1, 800833a <_reclaim_reent+0x62>
 8008334:	4620      	mov	r0, r4
 8008336:	f000 f861 	bl	80083fc <_free_r>
 800833a:	69e1      	ldr	r1, [r4, #28]
 800833c:	b111      	cbz	r1, 8008344 <_reclaim_reent+0x6c>
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f85c 	bl	80083fc <_free_r>
 8008344:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008346:	b111      	cbz	r1, 800834e <_reclaim_reent+0x76>
 8008348:	4620      	mov	r0, r4
 800834a:	f000 f857 	bl	80083fc <_free_r>
 800834e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008350:	b111      	cbz	r1, 8008358 <_reclaim_reent+0x80>
 8008352:	4620      	mov	r0, r4
 8008354:	f000 f852 	bl	80083fc <_free_r>
 8008358:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800835a:	b111      	cbz	r1, 8008362 <_reclaim_reent+0x8a>
 800835c:	4620      	mov	r0, r4
 800835e:	f000 f84d 	bl	80083fc <_free_r>
 8008362:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008364:	b111      	cbz	r1, 800836c <_reclaim_reent+0x94>
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f848 	bl	80083fc <_free_r>
 800836c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800836e:	b111      	cbz	r1, 8008376 <_reclaim_reent+0x9e>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f843 	bl	80083fc <_free_r>
 8008376:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008378:	b111      	cbz	r1, 8008380 <_reclaim_reent+0xa8>
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f83e 	bl	80083fc <_free_r>
 8008380:	6a23      	ldr	r3, [r4, #32]
 8008382:	b11b      	cbz	r3, 800838c <_reclaim_reent+0xb4>
 8008384:	4620      	mov	r0, r4
 8008386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800838a:	4718      	bx	r3
 800838c:	bd70      	pop	{r4, r5, r6, pc}
 800838e:	bf00      	nop
 8008390:	20000014 	.word	0x20000014

08008394 <__libc_init_array>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4d0d      	ldr	r5, [pc, #52]	@ (80083cc <__libc_init_array+0x38>)
 8008398:	4c0d      	ldr	r4, [pc, #52]	@ (80083d0 <__libc_init_array+0x3c>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	2600      	movs	r6, #0
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	d109      	bne.n	80083b8 <__libc_init_array+0x24>
 80083a4:	4d0b      	ldr	r5, [pc, #44]	@ (80083d4 <__libc_init_array+0x40>)
 80083a6:	4c0c      	ldr	r4, [pc, #48]	@ (80083d8 <__libc_init_array+0x44>)
 80083a8:	f000 f87e 	bl	80084a8 <_init>
 80083ac:	1b64      	subs	r4, r4, r5
 80083ae:	10a4      	asrs	r4, r4, #2
 80083b0:	2600      	movs	r6, #0
 80083b2:	42a6      	cmp	r6, r4
 80083b4:	d105      	bne.n	80083c2 <__libc_init_array+0x2e>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083bc:	4798      	blx	r3
 80083be:	3601      	adds	r6, #1
 80083c0:	e7ee      	b.n	80083a0 <__libc_init_array+0xc>
 80083c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c6:	4798      	blx	r3
 80083c8:	3601      	adds	r6, #1
 80083ca:	e7f2      	b.n	80083b2 <__libc_init_array+0x1e>
 80083cc:	080085c4 	.word	0x080085c4
 80083d0:	080085c4 	.word	0x080085c4
 80083d4:	080085c4 	.word	0x080085c4
 80083d8:	080085c8 	.word	0x080085c8

080083dc <__retarget_lock_acquire_recursive>:
 80083dc:	4770      	bx	lr

080083de <__retarget_lock_release_recursive>:
 80083de:	4770      	bx	lr

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <_free_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4605      	mov	r5, r0
 8008400:	2900      	cmp	r1, #0
 8008402:	d041      	beq.n	8008488 <_free_r+0x8c>
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f0c      	subs	r4, r1, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfb8      	it	lt
 800840e:	18e4      	addlt	r4, r4, r3
 8008410:	f000 f83e 	bl	8008490 <__malloc_lock>
 8008414:	4a1d      	ldr	r2, [pc, #116]	@ (800848c <_free_r+0x90>)
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	b933      	cbnz	r3, 8008428 <_free_r+0x2c>
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	6014      	str	r4, [r2, #0]
 800841e:	4628      	mov	r0, r5
 8008420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008424:	f000 b83a 	b.w	800849c <__malloc_unlock>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d908      	bls.n	800843e <_free_r+0x42>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	1821      	adds	r1, r4, r0
 8008430:	428b      	cmp	r3, r1
 8008432:	bf01      	itttt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	1809      	addeq	r1, r1, r0
 800843a:	6021      	streq	r1, [r4, #0]
 800843c:	e7ed      	b.n	800841a <_free_r+0x1e>
 800843e:	461a      	mov	r2, r3
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b10b      	cbz	r3, 8008448 <_free_r+0x4c>
 8008444:	42a3      	cmp	r3, r4
 8008446:	d9fa      	bls.n	800843e <_free_r+0x42>
 8008448:	6811      	ldr	r1, [r2, #0]
 800844a:	1850      	adds	r0, r2, r1
 800844c:	42a0      	cmp	r0, r4
 800844e:	d10b      	bne.n	8008468 <_free_r+0x6c>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	4401      	add	r1, r0
 8008454:	1850      	adds	r0, r2, r1
 8008456:	4283      	cmp	r3, r0
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	d1e0      	bne.n	800841e <_free_r+0x22>
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	6053      	str	r3, [r2, #4]
 8008462:	4408      	add	r0, r1
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	e7da      	b.n	800841e <_free_r+0x22>
 8008468:	d902      	bls.n	8008470 <_free_r+0x74>
 800846a:	230c      	movs	r3, #12
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	e7d6      	b.n	800841e <_free_r+0x22>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf04      	itt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	6063      	str	r3, [r4, #4]
 800847e:	bf04      	itt	eq
 8008480:	1809      	addeq	r1, r1, r0
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	6054      	str	r4, [r2, #4]
 8008486:	e7ca      	b.n	800841e <_free_r+0x22>
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20004de8 	.word	0x20004de8

08008490 <__malloc_lock>:
 8008490:	4801      	ldr	r0, [pc, #4]	@ (8008498 <__malloc_lock+0x8>)
 8008492:	f7ff bfa3 	b.w	80083dc <__retarget_lock_acquire_recursive>
 8008496:	bf00      	nop
 8008498:	20004de4 	.word	0x20004de4

0800849c <__malloc_unlock>:
 800849c:	4801      	ldr	r0, [pc, #4]	@ (80084a4 <__malloc_unlock+0x8>)
 800849e:	f7ff bf9e 	b.w	80083de <__retarget_lock_release_recursive>
 80084a2:	bf00      	nop
 80084a4:	20004de4 	.word	0x20004de4

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
